// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: common-message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from common-message.proto</summary>
public static partial class CommonMessageReflection {

  #region Descriptor
  /// <summary>File descriptor for common-message.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static CommonMessageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRjb21tb24tbWVzc2FnZS5wcm90byJiCghEYXRlVGltZRILCgNkYXkYASAB",
          "KA0SDQoFbW9udGgYAiABKA0SDAoEeWVhchgDIAEoDRIMCgRob3VyGAQgASgN",
          "Eg4KBm1pbnV0ZRgFIAEoDRIOCgZzZWNvbmQYBiABKA0iMQoHUHJvamVjdBIK",
          "CgJpZBgBIAEoCRIMCgRjb2RlGAIgASgJEgwKBG5hbWUYAyABKAkiMgoIQnVp",
          "bGRpbmcSCgoCaWQYASABKAkSDAoEY29kZRgCIAEoCRIMCgRuYW1lGAMgASgJ",
          "Ii8KBUZsb29yEgoKAmlkGAEgASgJEgwKBGNvZGUYAiABKAkSDAoEbmFtZRgD",
          "IAEoCSIzCglBcGFydG1lbnQSCgoCaWQYASABKAkSDAoEY29kZRgCIAEoCRIM",
          "CgRuYW1lGAMgASgJIioKDEltYWdlTmV0d29yaxINCgV0aHVtYhgBIAEoCRIL",
          "CgN1cmwYAiABKAki1wIKDEdyb3VwQ29udHJvbBIKCgJpZBgBIAEoCRIMCgRu",
          "YW1lGAIgASgJEg4KBm5hbWVFbhgDIAEoCRIMCgRpY29uGAQgASgJEhsKBWdy",
          "b3VwGAUgASgOMgwuR3JvdXBEZXZpY2USEwoEcm9vbRgGIAEoCzIFLlJvb20S",
          "DQoFY291bnQYByABKA0SEAoIZmF2b3JpdGUYCCABKAgSEAoIc2hvd0hvbWUY",
          "CSABKAgSDwoHYXV0b09mZhgKIAEoDRIXCgZkZXZpY2UYCyABKAsyBy5EZXZp",
          "Y2USHAoFc3RhdGUYDCABKAsyDS5Db250cm9sU3RhdGUSHAoJc3dpdGNoZXJz",
          "GA0gAygLMgkuU3dpdGNoZXISKgoQY3VydGFpblN3aXRjaGVycxgOIAMoCzIQ",
          "LkN1cnRhaW5Td2l0Y2hlchIYCgdyZW1vdGVzGA8gAygLMgcuUmVtb3RlItoD",
          "CgZEZXZpY2USEAoIZGV2aWNlSWQYASABKAkSDgoGcm9vbUlkGAIgASgJEhMK",
          "C2RldmljZVRva2VuGAMgASgJEhIKCmRldmljZU5hbWUYBCABKAkSEQoJYnJh",
          "bmROYW1lGAUgASgJEhAKCHJvb21OYW1lGAYgASgJEgwKBGljb24YByABKAkS",
          "CgoCaXAYCCABKAkSDAoEbWRucxgJIAEoCRINCgVtb2RlbBgKIAEoCRIOCgZz",
          "aWduYWwYCyABKAUSFwoPZmlybXdhcmVWZXJzaW9uGAwgASgJEhcKD2hhcmR3",
          "YXJlVmVyc2lvbhgNIAEoCRISCgpoYXJkd2FyZUlkGA4gASgJEhEKCWFjY2Vz",
          "c0tleRgPIAEoCRIpCg9jb25uZWN0aW9uU3RhdGUYECABKA4yEC5Db25uZWN0",
          "aW9uU3RhdGUSGwoFZ3JvdXAYESABKA4yDC5Hcm91cERldmljZRISCgp1cGRh",
          "dGVNb2RlGBIgASgNEhEKCWdhdGV3YXlJZBgTIAEoCRISCgpyZWFjdGl2aXR5",
          "GBQgASgNEhIKCmJyaWdodG5lc3MYFSABKA0SEQoJdGltZURlbGF5GBYgASgN",
          "EhYKDnNjZW5lQWN0aXZlTWFwGBcgASgNIroCCghTd2l0Y2hlchIKCgJpZBgB",
          "IAEoCRIMCgRuYW1lGAIgASgJEg4KBm5hbWVFbhgDIAEoCRIMCgRpY29uGAQg",
          "ASgJEhAKCHN3aXRjaGVyGAUgASgNEh8KCnBvd2VyU3RhdGUYBiABKA4yCy5Q",
          "b3dlclN0YXRlEhEKCWtlZXBTdGF0ZRgHIAEoDRIQCghmYXZvcml0ZRgIIAEo",
          "CBINCgVvcmRlchgJIAEoDRIXCgZkZXZpY2UYCiABKAsyBy5EZXZpY2USEwoE",
          "cm9vbRgLIAEoCzIFLlJvb20SGQoEdHlwZRgMIAEoDjILLlR5cGVEZXZpY2US",
          "EAoIc2hvd0hvbWUYDSABKAgSDwoHYXV0b09mZhgOIAEoDRIjCgxncm91cENv",
          "bnRyb2wYDyABKAsyDS5Hcm91cENvbnRyb2witgIKB0xlZEl0ZW0SCgoCaWQY",
          "ASABKAkSDAoEbmFtZRgCIAEoCRIOCgZuYW1lRW4YAyABKAkSDAoEaWNvbhgE",
          "IAEoCRINCgVpbmRleBgFIAEoDRIZChFicmlnaHRuZXNzUGVyY2VudBgGIAEo",
          "BRIfCgpwb3dlclN0YXRlGAcgASgOMgsuUG93ZXJTdGF0ZRIRCglrZWVwU3Rh",
          "dGUYCCABKA0SEAoIZmF2b3JpdGUYCSABKAgSDQoFb3JkZXIYCiABKA0SFwoG",
          "ZGV2aWNlGAsgASgLMgcuRGV2aWNlEhMKBHJvb20YDCABKAsyBS5Sb29tEhAK",
          "CHNob3dIb21lGA0gASgIEg8KB2F1dG9PZmYYDiABKA0SIwoMZ3JvdXBDb250",
          "cm9sGA8gASgLMg0uR3JvdXBDb250cm9sIu4BCglMZWREcml2ZXISCgoCaWQY",
          "ASABKAkSDAoEbmFtZRgCIAEoCRIOCgZuYW1lRW4YAyABKAkSDAoEaWNvbhgE",
          "IAEoCRIaCghsZWRJdGVtcxgFIAMoCzIILkxlZEl0ZW0SFwoGZGV2aWNlGAYg",
          "ASgLMgcuRGV2aWNlEhMKBHJvb20YByABKAsyBS5Sb29tEh8KCnBvd2VyU3Rh",
          "dGUYCCABKA4yCy5Qb3dlclN0YXRlEhkKEWJyaWdodG5lc3NQZXJjZW50GAkg",
          "ASgFEiMKDGdyb3VwQ29udHJvbBgKIAEoCzINLkdyb3VwQ29udHJvbCKGAQoK",
          "QnJpZGdlSW5mbxIWCg50YXJnZXRTd2l0Y2hlchgBIAEoDRIYChB0YXJnZXRI",
          "YXJkd2FyZUlkGAIgASgJEhIKCmJyaWRnZVR5cGUYAyABKA0SIAoKZGV2aWNl",
          "VHlwZRgEIAEoDjIMLkdyb3VwRGV2aWNlEhAKCGV4ZWN1dGVkGAUgASgIIocC",
          "Cg9DdXJ0YWluU3dpdGNoZXISCgoCaWQYASABKAkSDAoEbmFtZRgCIAEoCRIM",
          "CgRpY29uGAMgASgJEhAKCGZhdm9yaXRlGAQgASgIEg0KBW9yZGVyGAUgASgN",
          "EhcKBmRldmljZRgGIAEoCzIHLkRldmljZRIRCglwZXJjZW50SW4YByABKA0S",
          "EgoKcGVyY2VudE91dBgIIAEoDRIOCgZuYW1lRW4YCSABKAkSEwoEcm9vbRgK",
          "IAEoCzIFLlJvb20SEAoIc2hvd0hvbWUYCyABKAgSDwoHYXV0b09mZhgMIAEo",
          "DRIjCgxncm91cENvbnRyb2wYDSABKAsyDS5Hcm91cENvbnRyb2wiyQEKBk1v",
          "dGlvbhIKCgJpZBgBIAEoCRIMCgRuYW1lGAIgASgJEgwKBGljb24YAyABKAkS",
          "GwoFc3RhdGUYBCABKA4yDC5Nb3Rpb25TdGF0ZRIQCghmYXZvcml0ZRgFIAEo",
          "CBINCgVvcmRlchgGIAEoDRIXCgZkZXZpY2UYByABKAsyBy5EZXZpY2USDgoG",
          "bmFtZUVuGAggASgJEh8KBHR5cGUYCSABKA4yES5Nb3Rpb25TZW5zb3JUeXBl",
          "Eg8KB2JhdHRlcnkYCiABKA0ilwEKB0hvbWVraXQSCgoCaWQYASABKAkSDAoE",
          "aWNvbhgCIAEoCRIMCgRuYW1lGAMgASgJEg4KBm5hbWVFbhgEIAEoCRIaCgRt",
          "b2RlGAUgASgOMgwuSG9tZWtpdE1vZGUSEAoIZmF2b3JpdGUYBiABKAgSDQoF",
          "b3JkZXIYByABKA0SFwoGZGV2aWNlGAggASgLMgcuRGV2aWNlIp8CCgZSZW1v",
          "dGUSCgoCaWQYASABKAkSFwoPcmVtb3RlTGlicmFyeUlkGAIgASgJEhAKCGRl",
          "dmljZUlkGAMgASgJEgwKBG5hbWUYBCABKAkSDAoEaWNvbhgFIAEoCRIQCghm",
          "YXZvcml0ZRgGIAEoCBINCgVvcmRlchgHIAEoDRIfCgdsaWJyYXJ5GAggASgL",
          "Mg4uUmVtb3RlTGlicmFyeRIXCgZkZXZpY2UYCSABKAsyBy5EZXZpY2USIwoF",
          "c3RhdGUYCiABKAsyFC5BaXJDb25kaXRpb25lclN0YXRlEg4KBm5hbWVFbhgL",
          "IAEoCRIOCgZyb29tSWQYDCABKAkSEAoIcm9vbU5hbWUYDSABKAkSEAoIc2hv",
          "d0hvbWUYDiABKAgi8QEKBkJ1dHRvbhIKCgJpZBgBIAEoCRIMCgRpY29uGAIg",
          "ASgJEgwKBG5hbWUYAyABKAkSDgoGbmFtZUVuGAQgASgJEiEKC2J1dHRvblN0",
          "YXRlGAUgASgOMgwuQnV0dG9uU3RhdGUSEAoIZmF2b3JpdGUYBiABKAgSDQoF",
          "b3JkZXIYByABKA0SFwoGZGV2aWNlGAggASgLMgcuRGV2aWNlEg0KBWluZGV4",
          "GAkgASgNEg8KB2JhdHRlcnkYCiABKA0SDgoGcm9vbUlkGAsgASgJEhAKCHJv",
          "b21OYW1lGAwgASgJEhAKCHNob3dIb21lGA0gASgIIpEBCg1SZW1vdGVMaWJy",
          "YXJ5EgoKAmlkGAEgASgJEgwKBG5hbWUYAiABKAkSDAoEaWNvbhgDIAEoCRIN",
          "CgVtb2RlbBgEIAEoCRIYChB1aVJlbW90ZVRlbXBsYXRlGAUgASgNEhIKCmFw",
          "cFZlcnNpb24YBiABKAkSGwoFZ3JvdXAYByABKA4yDC5Hcm91cFJlbW90ZSJx",
          "CgtSZW1vdGVNdWx0aRIKCgJpZBgBIAEoCRIQCghyZW1vdGVJZBgCIAEoCRIM",
          "CgRuYW1lGAMgASgJEjYKFnJlbW90ZU11bHRpTGlicmFyeUNtZHMYBSADKAsy",
          "Fi5SZW1vdGVNdWx0aUxpYnJhcnlDbWQicQoVUmVtb3RlTXVsdGlMaWJyYXJ5",
          "Q21kEgoKAmlkGAEgASgJEhUKDXJlbW90ZU11bHRpSWQYAiABKAkSDAoEbmFt",
          "ZRgDIAEoCRINCgVvcmRlchgEIAEoDRIYCgR0eXBlGAUgASgOMgouVHlwZUxl",
          "YXJuIqACChNBaXJDb25kaXRpb25lclN0YXRlEhAKCHJlbW90ZUlkGAEgASgJ",
          "Eh8KCnBvd2VyU3RhdGUYAiABKA4yCy5Qb3dlclN0YXRlEhMKC3RlbXBlcmF0",
          "dXJlGAMgASgCEhUKBG1vZGUYBCABKA4yBy5Nb2RlQWMSFwoFc3dpbmcYBSAB",
          "KA4yCC5Td2luZ0FjEhMKA2ZhbhgGIAEoDjIGLkZhbkFjEhcKD3RlbXBlcmF0",
          "dXJlUm9vbRgHIAEoAhIUCgxodW1pZGl0eVJvb20YCCABKAISEAoIZGV2aWNl",
          "SWQYCSABKAkSKQoPY29ubmVjdGlvblN0YXRlGAogASgOMhAuQ29ubmVjdGlv",
          "blN0YXRlEhAKCGluZG9vcklkGAsgASgNIosCCgxDb250cm9sU3RhdGUSEQoJ",
          "Y29udHJvbElkGAEgASgJEhsKBWdyb3VwGAIgASgOMgwuR3JvdXBEZXZpY2US",
          "HwoKcG93ZXJTdGF0ZRgDIAEoDjILLlBvd2VyU3RhdGUSEwoLdGVtcGVyYXR1",
          "cmUYBCABKAISFQoEbW9kZRgFIAEoDjIHLk1vZGVBYxIXCgVzd2luZxgGIAEo",
          "DjIILlN3aW5nQWMSEwoDZmFuGAcgASgOMgYuRmFuQWMSKQoPY29ubmVjdGlv",
          "blN0YXRlGAggASgOMhAuQ29ubmVjdGlvblN0YXRlEhEKCXBlcmNlbnRJbhgJ",
          "IAEoDRISCgpwZXJjZW50T3V0GAogASgNItgBCgRIb21lEgoKAmlkGAEgASgJ",
          "EgwKBG5hbWUYAiABKAkSDgoGbmFtZUVuGAMgASgJEhYKDmJhY2tncm91bmRO",
          "YW1lGAQgASgJEhEKCWxvbmdpdHVkZRgFIAEoAhIQCghsYXRpdHVkZRgGIAEo",
          "AhIPCgdpc093bmVyGAcgASgIEhEKCWlzRGVmYXVsdBgIIAEoCBIWCg5mdWxs",
          "TmFtZVNoYXJlchgJIAEoCRIYCgV1c2VycxgKIAMoCzIJLlVzZXJIb21lEhMK",
          "C2ZlYXR1cmVDb2RlGAsgASgNIpQBCgRVc2VyEg4KBnVzZXJJZBgBIAEoCRIO",
          "CgZhdmF0YXIYAiABKAwSEAoIZnVsbE5hbWUYAyABKAkSDQoFZW1haWwYBCAB",
          "KAkSEwoLcGhvbmVOdW1iZXIYBSABKAkSEAoIbGFuZ3VhZ2UYBiABKAkSFQoN",
          "YXV0b1N3aXRjaEdwcxgHIAEoCBINCgVvcmRlchhkIAEoBCJ/CghVc2VySG9t",
          "ZRIKCgJpZBgBIAEoCRIOCgZ1c2VySWQYAiABKAkSDgoGaG9tZUlkGAMgASgJ",
          "Eg4KBmF2YXRhchgEIAEoDBIQCghmdWxsTmFtZRgFIAEoCRIPCgdpc093bmVy",
          "GAYgASgIEhQKDGFjY2VwdGVkRGF0ZRgHIAEoBCKzAQoHQ2l0aXplbhIOCgZo",
          "b21lSWQYASABKAkSGQoHcHJvamVjdBgCIAEoCzIILlByb2plY3QSGwoIYnVp",
          "bGRpbmcYAyABKAsyCS5CdWlsZGluZxIVCgVmbG9vchgEIAEoCzIGLkZsb29y",
          "Eh0KCWFwYXJ0bWVudBgFIAEoCzIKLkFwYXJ0bWVudBIUCgxyZWNlaXZlZERh",
          "dGUYBiABKAQSFAoMYXBwcm92ZWREYXRlGAcgASgEIv8DCgRSb29tEgoKAmlk",
          "GAEgASgJEgwKBG5hbWUYAiABKAkSEwoEaG9tZRgDIAEoCzIFLkhvbWUSGAoH",
          "ZGV2aWNlcxgEIAMoCzIHLkRldmljZRIcCglzd2l0Y2hlcnMYBSADKAsyCS5T",
          "d2l0Y2hlchIqChBjdXJ0YWluU3dpdGNoZXJzGAYgAygLMhAuQ3VydGFpblN3",
          "aXRjaGVyEhgKB3JlbW90ZXMYByADKAsyBy5SZW1vdGUSGAoHbW90aW9ucxgI",
          "IAMoCzIHLk1vdGlvbhIaCghob21la2l0cxgJIAMoCzIILkhvbWVraXQSDgoG",
          "bmFtZUVuGAogASgJEhYKDmJhY2tncm91bmROYW1lGAsgASgJEhgKB2J1dHRv",
          "bnMYDCADKAsyBy5CdXR0b24SJAoNZ3JvdXBDb250cm9scxgNIAMoCzINLkdy",
          "b3VwQ29udHJvbBIZCgdsZWRJdGVtGA4gAygLMgguTGVkSXRlbRIdCglsZWRE",
          "cml2ZXIYDyADKAsyCi5MZWREcml2ZXISIgoMbGlnaHRTZW5zb3JzGBAgAygL",
          "MgwuTGlnaHRTZW5zb3ISLgoSZW52aXJvbm1lbnRTZW5zb3JzGBEgAygLMhIu",
          "RW52aXJvbm1lbnRTZW5zb3ISHgoKc21hcnRQbHVncxgSIAMoCzIKLlNtYXJ0",
          "UGx1ZyKSAQoIU2NoZWR1bGUSGwoIZGF0ZXRpbWUYASABKAsyCS5EYXRlVGlt",
          "ZRIOCgZyZXBlYXQYAiABKAgSCwoDbW9uGAMgASgIEgsKA3R1ZRgEIAEoCBIL",
          "CgN3ZWQYBSABKAgSCwoDdGh1GAYgASgIEgsKA2ZyaRgHIAEoCBILCgNzYXQY",
          "CCABKAgSCwoDc3VuGAkgASgIIqUBChRSZW1vdGVTY2hlZHVsZUFjdGlvbhIK",
          "CgJpZBgBIAEoCRIYChByZW1vdGVTY2hlZHVsZUlkGAIgASgJEhoKEnJlbW90",
          "ZUxpYnJhcnlDbWRJZBgDIAEoCRIfChdyZW1vdGVNdWx0aUxpYnJhcnlDbWRJ",
          "ZBgEIAEoCRINCgVkZWxheRgFIAEoDRINCgVvcmRlchgGIAEoDRIMCgRuYW1l",
          "GAcgASgJIrMBChxBaXJDb25kaXRpb25lclNjaGVkdWxlQWN0aW9uEhgKEHJl",
          "bW90ZVNjaGVkdWxlSWQYASABKAkSHwoKcG93ZXJTdGF0ZRgCIAEoDjILLlBv",
          "d2VyU3RhdGUSEwoLdGVtcGVyYXR1cmUYAyABKAISFQoEbW9kZRgEIAEoDjIH",
          "Lk1vZGVBYxIXCgVzd2luZxgFIAEoDjIILlN3aW5nQWMSEwoDZmFuGAYgASgO",
          "MgYuRmFuQWMizQEKDlJlbW90ZVNjaGVkdWxlEgoKAmlkGAEgASgJEhcKBnJl",
          "bW90ZRgCIAEoCzIHLlJlbW90ZRIbCghzY2hlZHVsZRgDIAEoCzIJLlNjaGVk",
          "dWxlEjsKFGFpckNvbmRpdGlvbmVyQWN0aW9uGAQgASgLMh0uQWlyQ29uZGl0",
          "aW9uZXJTY2hlZHVsZUFjdGlvbhIsCg1yZW1vdGVBY3Rpb25zGAUgAygLMhUu",
          "UmVtb3RlU2NoZWR1bGVBY3Rpb24SDgoGYWN0aXZlGAYgASgIIokBChBTd2l0",
          "Y2hlclNjaGVkdWxlEgoKAmlkGAEgASgJEh8KCnBvd2VyU3RhdGUYAiABKA4y",
          "Cy5Qb3dlclN0YXRlEhsKCHN3aXRjaGVyGAMgASgLMgkuU3dpdGNoZXISGwoI",
          "c2NoZWR1bGUYBCABKAsyCS5TY2hlZHVsZRIOCgZhY3RpdmUYBSABKAgipAEK",
          "F0N1cnRhaW5Td2l0Y2hlclNjaGVkdWxlEgoKAmlkGAEgASgJEikKD2N1cnRh",
          "aW5Td2l0Y2hlchgCIAEoCzIQLkN1cnRhaW5Td2l0Y2hlchIbCghzY2hlZHVs",
          "ZRgDIAEoCzIJLlNjaGVkdWxlEhEKCXBlcmNlbnRJbhgEIAEoDRISCgpwZXJj",
          "ZW50T3V0GAUgASgNEg4KBmFjdGl2ZRgGIAEoCCKiAQoLTGlnaHRTZW5zb3IS",
          "CgoCaWQYASABKAkSDAoEaWNvbhgCIAEoCRIMCgRuYW1lGAMgASgJEg4KBm5h",
          "bWVFbhgEIAEoCRIhCgtidXR0b25TdGF0ZRgFIAEoDjIMLkJ1dHRvblN0YXRl",
          "EhAKCGZhdm9yaXRlGAYgASgIEg0KBW9yZGVyGAcgASgNEhcKBmRldmljZRgI",
          "IAEoCzIHLkRldmljZSL6AwoFTWV0ZXISCgoCaWQYASABKAkSFAoMc2VyaWFs",
          "TnVtYmVyGAIgASgJEh0KCXR5cGVNZXRlchgDIAEoDjIKLlR5cGVNZXRlchIQ",
          "CghkZXZpY2VJZBgEIAEoCRIMCgRpY29uGAUgASgJEg0KBW1vbnRoGAYgASgN",
          "Eg4KBm1ldHJpYxgHIAEoAhIQCghlc3RpbWF0ZRgIIAEoDRIbCgZpbmRleHMY",
          "CSADKAsyCy5NZXRlckluZGV4EiEKCWVzdGltYXRlcxgKIAMoCzIOLk1ldGVy",
          "RXN0aW1hdGUSKQoPY29ubmVjdGlvblN0YXRlGAsgASgOMhAuQ29ubmVjdGlv",
          "blN0YXRlEhIKCmxpbWl0TW9uZXkYDCABKA0SGAoQYWxlcnRPdmVyQ29uc3Vt",
          "ZRgNIAEoDRIXCg9sYXN0VXBkYXRlSW5kZXgYDiABKAQSFwoPbG9zdFVwZGF0",
          "ZUluZGV4GA8gASgIEhQKDGxhc3RGcm9tRGF0ZRgQIAEoBBImCg5lc3RpbWF0",
          "ZU1vbnRocxgRIAMoCzIOLk1ldGVyRXN0aW1hdGUSJAoMZXN0aW1hdGVEYXlz",
          "GBIgAygLMg4uTWV0ZXJFc3RpbWF0ZRIXCgZkZXZpY2UYEyABKAsyBy5EZXZp",
          "Y2USFwoPbGFzdE1ldHJpY0luZGV4GBQgASgCIloKCk1ldGVySW5kZXgSFAoM",
          "c2VyaWFsTnVtYmVyGAEgASgJEhgKBHR5cGUYAiABKA4yCi5UeXBlTWV0ZXIS",
          "DgoGbWV0cmljGAMgASgCEgwKBGhvdXIYBCABKAUimgEKDU1ldGVyRXN0aW1h",
          "dGUSFAoMc2VyaWFsTnVtYmVyGAEgASgJEhgKBHR5cGUYAiABKA4yCi5UeXBl",
          "TWV0ZXISDQoFbW9udGgYAyABKA0SEAoIZXN0aW1hdGUYBCABKA0SDwoHY29u",
          "c3VtZRgFIAEoAhIMCgR5ZWFyGAYgASgNEgsKA2RheRgHIAEoDRIMCgRob3Vy",
          "GAggASgNImIKCkFjdGl2ZVRpbWUSFgoOZW5hYmxlRnVsbFRpbWUYASABKAgS",
          "EwoLZW5hYmxlU3RhcnQYAiABKA0SEQoJZW5hYmxlRW5kGAMgASgNEhQKDGVu",
          "YWJsZURheU1hcBgEIAEoDSK9BgoFU2NlbmUSCgoCaWQYASABKAkSDgoGaG9t",
          "ZUlkGAIgASgJEgwKBG5hbWUYAyABKAkSDgoGbmFtZUVuGAQgASgJEgwKBGlj",
          "b24YBSABKAkSEAoIZmF2b3JpdGUYBiABKAgSIgoJY29uZGl0aW9uGAcgASgO",
          "Mg8uQ29uZGl0aW9uU2NlbmUSJAoRc3dpdGNoZXJDb25kaXRpb24YCCABKAsy",
          "CS5Td2l0Y2hlchIfCgpwb3dlclN0YXRlGAkgASgOMgsuUG93ZXJTdGF0ZRIy",
          "ChRzY2VuZVN3aXRjaGVyQWN0aW9ucxgKIAMoCzIULlNjZW5lU3dpdGNoZXJB",
          "Y3Rpb24SOwoWY3VydGFpblN3aXRjaGVyQWN0aW9ucxgLIAMoCzIbLlNjZW5l",
          "Q3VydGFpblN3aXRjaGVyQWN0aW9uEjkKFWFpckNvbmRpdGlvbmVyQWN0aW9u",
          "cxgMIAMoCzIaLlNjZW5lQWlyQ29uZGl0aW9uZXJBY3Rpb24SLgoSc2NlbmVS",
          "ZW1vdGVBY3Rpb25zGA0gAygLMhIuU2NlbmVSZW1vdGVBY3Rpb24SLgoSc2Nl",
          "bmVNb3Rpb25BY3Rpb25zGA4gAygLMhIuU2NlbmVNb3Rpb25BY3Rpb24SDAoE",
          "dHlwZRgPIAEoDRIRCgljb25maXJtZWQYECABKAgSIAoPbW90aW9uQ29uZGl0",
          "aW9uGBEgASgLMgcuTW90aW9uEh8KCmFjdGl2ZVRpbWUYEiABKAsyCy5BY3Rp",
          "dmVUaW1lEhEKCWlzRGlzYWJsZRgTIAEoCBIWCg5hY3Rpb25MaXN0SWNvbhgU",
          "IAEoCRIbCghzY2hlZHVsZRgVIAEoCzIJLlNjaGVkdWxlEjQKFXNjZW5lTGVk",
          "RHJpdmVyQWN0aW9ucxgWIAMoCzIVLlNjZW5lTGVkRHJpdmVyQWN0aW9uEiAK",
          "D2J1dHRvbkNvbmRpdGlvbhgXIAEoCzIHLkJ1dHRvbhImChJsZWREcml2ZXJD",
          "b25kaXRpb24YGCABKAsyCi5MZWREcml2ZXISNwobZW52aXJvbm1lbnRTZW5z",
          "b3JzQ29uZGl0aW9uGBkgASgLMhIuRW52aXJvbm1lbnRTZW5zb3IifwoTU2Nl",
          "bmVTd2l0Y2hlckFjdGlvbhIKCgJpZBgBIAEoCRIPCgdzY2VuZUlkGAIgASgJ",
          "EhsKCHN3aXRjaGVyGAMgASgLMgkuU3dpdGNoZXISHwoKcG93ZXJTdGF0ZRgE",
          "IAEoDjILLlBvd2VyU3RhdGUSDQoFb3JkZXIYBSABKA0i2wEKGVNjZW5lQWly",
          "Q29uZGl0aW9uZXJBY3Rpb24SCgoCaWQYASABKAkSDwoHc2NlbmVJZBgCIAEo",
          "CRIXCgZyZW1vdGUYAyABKAsyBy5SZW1vdGUSHwoKcG93ZXJTdGF0ZRgEIAEo",
          "DjILLlBvd2VyU3RhdGUSEwoLdGVtcGVyYXR1cmUYBSABKAISFQoEbW9kZRgG",
          "IAEoDjIHLk1vZGVBYxIXCgVzd2luZxgHIAEoDjIILlN3aW5nQWMSEwoDZmFu",
          "GAggASgOMgYuRmFuQWMSDQoFb3JkZXIYCSABKA0iiwEKGlNjZW5lQ3VydGFp",
          "blN3aXRjaGVyQWN0aW9uEgoKAmlkGAEgASgJEg8KB3NjZW5lSWQYAiABKAkS",
          "KQoPY3VydGFpblN3aXRjaGVyGAMgASgLMhAuQ3VydGFpblN3aXRjaGVyEhEK",
          "CXBlcmNlbnRJbhgEIAEoDRISCgpwZXJjZW50T3V0GAUgASgNIrIBChFTY2Vu",
          "ZVJlbW90ZUFjdGlvbhIKCgJpZBgBIAEoCRIPCgdzY2VuZUlkGAIgASgJEhcK",
          "BnJlbW90ZRgDIAEoCzIHLlJlbW90ZRIaChJSZW1vdGVMaWJyYXJ5Q21kSWQY",
          "BCABKAkSHwoXUmVtb3RlTXVsdGlMaWJyYXJ5Q21kSWQYBSABKAkSDQoFZGVs",
          "YXkYBiABKA0SDQoFb3JkZXIYByABKA0SDAoEbmFtZRgIIAEoCSJ1ChFTY2Vu",
          "ZU1vdGlvbkFjdGlvbhIKCgJpZBgBIAEoCRIPCgdzY2VuZUlkGAIgASgJEhcK",
          "Bm1vdGlvbhgDIAEoCzIHLk1vdGlvbhIbCgVzdGF0ZRgEIAEoDjIMLk1vdGlv",
          "blN0YXRlEg0KBW9yZGVyGAUgASgNIqsBChRTY2VuZUxlZERyaXZlckFjdGlv",
          "bhIKCgJpZBgBIAEoCRIPCgdzY2VuZUlkGAIgASgJEh0KCWxlZERyaXZlchgD",
          "IAEoCzIKLkxlZERyaXZlchIfCgpwb3dlclN0YXRlGAQgASgOMgsuUG93ZXJT",
          "dGF0ZRIZChFicmlnaHRuZXNzUGVyY2VudBgFIAEoBRIMCgRpY29uGAYgASgJ",
          "Eg0KBW9yZGVyGAcgASgNInsKEVNjZW5lQnV0dG9uQWN0aW9uEgoKAmlkGAEg",
          "ASgJEg8KB3NjZW5lSWQYAiABKAkSFwoGYnV0dG9uGAMgASgLMgcuQnV0dG9u",
          "EiEKC2J1dHRvblN0YXRlGAQgASgOMgwuQnV0dG9uU3RhdGUSDQoFb3JkZXIY",
          "BSABKA0iWgoNUmVtb3RlQ29tbWFuZBIMCgRuYW1lGAEgASgJEhoKElJlbW90",
          "ZUxpYnJhcnlDbWRJZBgCIAEoCRIfChdSZW1vdGVNdWx0aUxpYnJhcnlDbWRJ",
          "ZBgDIAEoCSIrCgpTdGF0dXNDb2RlEgwKBGNvZGUYASABKA0SDwoHbWVzc2Fn",
          "ZRgCIAEoCSJkCg1EZXZpY2VJblNjZW5lEhsKCHN3aXRjaGVyGAEgASgLMgku",
          "U3dpdGNoZXISFwoGbW90aW9uGAIgASgLMgcuTW90aW9uEh0KCWxlZERyaXZl",
          "chgDIAEoCzIKLkxlZERyaXZlciI9ChRDdXJ0YWluU3dpdGNoZXJTdGF0ZRIR",
          "CglwZXJjZW50SW4YASABKA0SEgoKcGVyY2VudE91dBgCIAEoDSL1AgoSRGV2",
          "aWNlVHJpZ2dlclNjZW5lEhIKCmhhcmR3YXJlSWQYASABKAkSEwoLZGV2aWNl",
          "SW5kZXgYAiABKA0SFAoMZ3JvdXBDb250cm9sGAMgASgNEiEKCnBvd2VyU3Rh",
          "dGUYBCABKA4yCy5Qb3dlclN0YXRlSAASIwoLbW90aW9uU3RhdGUYBSABKA4y",
          "DC5Nb3Rpb25TdGF0ZUgAEiMKC2J1dHRvblN0YXRlGAYgASgOMgwuQnV0dG9u",
          "U3RhdGVIABIbChFicmlnaHRuZXNzUGVyY2VudBgHIAEoBUgAEhoKEGVudmly",
          "b25tZW50VmFsdWUYCCABKAJIABI1ChRjdXJ0YWluU3dpdGNoZXJTdGF0ZRgJ",
          "IAEoCzIVLkN1cnRhaW5Td2l0Y2hlclN0YXRlSAASMwoTYWlyQ29uZGl0aW9u",
          "ZXJTdGF0ZRgKIAEoCzIULkFpckNvbmRpdGlvbmVyU3RhdGVIAEIOCgxDb250",
          "cm9sU3RhdGUiTgoXRW52aXJvbm1lbnRTZW5zb3JSZXBvcnQSJAoEdHlwZRgB",
          "IAEoDjIWLkVudmlyb25tZW50U2Vuc29yVHlwZRINCgV2YWx1ZRgCIAEoAiL2",
          "AQoRRW52aXJvbm1lbnRTZW5zb3ISCgoCaWQYASABKAkSDAoEaWNvbhgCIAEo",
          "CRIMCgRuYW1lGAMgASgJEg4KBm5hbWVFbhgEIAEoCRIoCgZyZXBvcnQYBSAD",
          "KAsyGC5FbnZpcm9ubWVudFNlbnNvclJlcG9ydBIQCghmYXZvcml0ZRgGIAEo",
          "CBINCgVvcmRlchgHIAEoDRIXCgZkZXZpY2UYCCABKAsyBy5EZXZpY2USDQoF",
          "aW5kZXgYCSABKA0SDwoHYmF0dGVyeRgKIAEoDRITCgRyb29tGAsgASgLMgUu",
          "Um9vbRIQCghzaG93SG9tZRgMIAEoCCLdAQoJU21hcnRQbHVnEgoKAmlkGAEg",
          "ASgJEgwKBGljb24YAiABKAkSDAoEbmFtZRgDIAEoCRIOCgZuYW1lRW4YBCAB",
          "KAkSDQoFaW5kZXgYBSABKA0SEAoIZmF2b3JpdGUYBiABKAgSDQoFb3JkZXIY",
          "ByABKA0SFwoGZGV2aWNlGAggASgLMgcuRGV2aWNlEgsKA2FtcBgJIAEoAhIN",
          "CgVwb3dlchgKIAEoAhIMCgR2b2x0GAsgASgCEhMKBHJvb20YDCABKAsyBS5S",
          "b29tEhAKCHNob3dIb21lGA0gASgIIiQKC1VzZXJTZXR0aW5nEhUKDWRlZmF1",
          "bHRIb21lSWQYASABKAkiQQoORmlsZVVwbG9hZEZvcm0SDAoEbmFtZRgBIAEo",
          "CRINCgVpbWFnZRgCIAEoDBISCgpzaXplSW5CeXRlGAMgASgNKjUKC0dyb3Vw",
          "UmVtb3RlEhIKDkFpckNvbmRpdGlvbmVyEAASBwoDRmFuEAESCQoFTXVsdGkQ",
          "AiruAQoLR3JvdXBEZXZpY2USEQoNU3dpdGNoZXJHcm91cBAAEhgKFEN1cnRh",
          "aW5Td2l0Y2hlckdyb3VwEAESEAoMQ3VydGFpbkdyb3VwEAISDQoJSXJSZkdy",
          "b3VwEAMSDgoKTWV0ZXJHcm91cBAEEg8KC01vdGlvbkdyb3VwEAUSEAoMSG9t",
          "ZWtpdEdyb3VwEAYSDwoLQnV0dG9uR3JvdXAQBxILCgdBQ0dyb3VwEAgSEgoO",
          "TGVkRHJpdmVyR3JvdXAQCRIaChZFbnZpcm9ubWVudFNlbnNvckdyb3VwEAoS",
          "EAoLVW5rbm93R3JvdXAQ6AcqOAoOQ29uZGl0aW9uU2NlbmUSEQoNQXV0b0Nv",
          "bmRpdGlvbhAAEhMKD01hbnVhbENvbmRpdGlvbhABKkgKClBvd2VyU3RhdGUS",
          "BwoDT2ZmEAASBgoCT24QARINCglEb3VibGVUYXAQAhIQCgxTY2VuZVRyaWdn",
          "ZXIQAxIICgROb25lEAQqSAoLQnV0dG9uU3RhdGUSCwoHTm90aGluZxAAEgwK",
          "CE9uZUNsaWNrEAESDwoLRG91YmxlQ2xpY2sQAhINCglMb25nQ2xpY2sQAyo6",
          "Cg9Db25uZWN0aW9uU3RhdGUSCwoHT2ZmbGluZRAAEgoKBk9ubGluZRABEg4K",
          "CkRpc2Nvbm5lY3QQAipMCgZNb2RlQWMSDAoIQXV0b01vZGUQABIMCghDb29s",
          "TW9kZRABEgwKCEhlYXRNb2RlEAISCwoHRHJ5TW9kZRADEgsKB0Zhbk1vZGUQ",
          "BCpGCgdTd2luZ0FjEg0KCUF1dG9Td2luZxAAEgwKCExvd1N3aW5nEAESDwoL",
          "TWVkaXVtU3dpbmcQAhINCglIaWdoU3dpbmcQAyo8CgVGYW5BYxILCgdBdXRv",
          "RmFuEAASCgoGTG93RmFuEAESDQoJTWVkaXVtRmFuEAISCwoHSGlnaEZhbhAD",
          "Ki4KCVR5cGVNZXRlchIRCg1FbGVjdHJpY01ldGVyEAASDgoKV2F0ZXJNZXRl",
          "chABKhsKCVR5cGVMZWFybhIGCgJJUhAAEgYKAlJGEAEqQwoKVHlwZURldmlj",
          "ZRIPCgtTd2l0Y2hMaWdodBAAEhIKDlN3aXRjaFN3aXRjaGVyEAESEAoMU3dp",
          "dGNoT3V0bGV0EAIqMQoLTW90aW9uU3RhdGUSDgoKTW90aW9uTm9uZRAAEhIK",
          "Dk1vdGlvbkRldGVjdGVkEAEqQQoLSG9tZWtpdE1vZGUSFQoRSG9tZWtpdE5v",
          "cm1hbE1vZGUQABIbChdIb21la2l0UHJvdmlzaW9uaW5nTW9kZRABKiUKCFR5",
          "cGVFY2hvEggKBEVjaG8QABIPCgtEZXZpY2VMb2dpbhABKiQKCERhdGFUeXBl",
          "EgwKCEJJTkFSSUVTEAASCgoGQkFTRTY0EAEqQAoIVXNlclJvbGUSDgoKTm9y",
          "bWFsVXNlchAAEhMKD09wZXJhdGlvbmFsVXNlchABEg8KC1VzZXJSb2xlTWF4",
          "EAIqrQEKEE1vdGlvblNlbnNvclR5cGUSEAoMTW90aW9uU2Vuc29yEAASDgoK",
          "RG9vclNlbnNvchABEg4KCkxlYWtTZW5zb3IQAhIPCgtTbW9rZVNlbnNvchAD",
          "Eg0KCUdhc1NlbnNvchAEEiEKHVRlbXBlcmF0dXJlX0h1bWlkaXR5X1ByZXNz",
          "dXJlEAUSEAoMTW90aW9uX0xpZ2h0EAYSEgoOTW90aW9uX1ZpYnJhdGUQBypo",
          "ChVFbnZpcm9ubWVudFNlbnNvclR5cGUSCgoGVW5rbm93EAASDwoLVGVtcGVy",
          "YXR1cmUQARIMCghIdW1pZGl0eRACEgwKCFByZXNzdXJlEAMSCQoFTGlnaHQQ",
          "BBILCgdWaWJyYXRlEAVCOwouY29tLnN1bnNoaW5lLnNtYXJ0aG9tZS5zZXJ2",
          "ZXIubWVzc2FnZS5wcm90b2J1ZkIJQ29tbW9uQnVmYgZwcm90bzM="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(new[] {typeof(global::GroupRemote), typeof(global::GroupDevice), typeof(global::ConditionScene), typeof(global::PowerState), typeof(global::ButtonState), typeof(global::ConnectionState), typeof(global::ModeAc), typeof(global::SwingAc), typeof(global::FanAc), typeof(global::TypeMeter), typeof(global::TypeLearn), typeof(global::TypeDevice), typeof(global::MotionState), typeof(global::HomekitMode), typeof(global::TypeEcho), typeof(global::DataType), typeof(global::UserRole), typeof(global::MotionSensorType), typeof(global::EnvironmentSensorType), }, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::DateTime), global::DateTime.Parser, new[]{ "Day", "Month", "Year", "Hour", "Minute", "Second" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Project), global::Project.Parser, new[]{ "Id", "Code", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Building), global::Building.Parser, new[]{ "Id", "Code", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Floor), global::Floor.Parser, new[]{ "Id", "Code", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Apartment), global::Apartment.Parser, new[]{ "Id", "Code", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ImageNetwork), global::ImageNetwork.Parser, new[]{ "Thumb", "Url" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GroupControl), global::GroupControl.Parser, new[]{ "Id", "Name", "NameEn", "Icon", "Group", "Room", "Count", "Favorite", "ShowHome", "AutoOff", "Device", "State", "Switchers", "CurtainSwitchers", "Remotes" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Device), global::Device.Parser, new[]{ "DeviceId", "RoomId", "DeviceToken", "DeviceName", "BrandName", "RoomName", "Icon", "Ip", "Mdns", "Model", "Signal", "FirmwareVersion", "HardwareVersion", "HardwareId", "AccessKey", "ConnectionState", "Group", "UpdateMode", "GatewayId", "Reactivity", "Brightness", "TimeDelay", "SceneActiveMap" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Switcher), global::Switcher.Parser, new[]{ "Id", "Name", "NameEn", "Icon", "Switcher_", "PowerState", "KeepState", "Favorite", "Order", "Device", "Room", "Type", "ShowHome", "AutoOff", "GroupControl" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LedItem), global::LedItem.Parser, new[]{ "Id", "Name", "NameEn", "Icon", "Index", "BrightnessPercent", "PowerState", "KeepState", "Favorite", "Order", "Device", "Room", "ShowHome", "AutoOff", "GroupControl" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LedDriver), global::LedDriver.Parser, new[]{ "Id", "Name", "NameEn", "Icon", "LedItems", "Device", "Room", "PowerState", "BrightnessPercent", "GroupControl" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BridgeInfo), global::BridgeInfo.Parser, new[]{ "TargetSwitcher", "TargetHardwareId", "BridgeType", "DeviceType", "Executed" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurtainSwitcher), global::CurtainSwitcher.Parser, new[]{ "Id", "Name", "Icon", "Favorite", "Order", "Device", "PercentIn", "PercentOut", "NameEn", "Room", "ShowHome", "AutoOff", "GroupControl" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Motion), global::Motion.Parser, new[]{ "Id", "Name", "Icon", "State", "Favorite", "Order", "Device", "NameEn", "Type", "Battery" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Homekit), global::Homekit.Parser, new[]{ "Id", "Icon", "Name", "NameEn", "Mode", "Favorite", "Order", "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Remote), global::Remote.Parser, new[]{ "Id", "RemoteLibraryId", "DeviceId", "Name", "Icon", "Favorite", "Order", "Library", "Device", "State", "NameEn", "RoomId", "RoomName", "ShowHome" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Button), global::Button.Parser, new[]{ "Id", "Icon", "Name", "NameEn", "ButtonState", "Favorite", "Order", "Device", "Index", "Battery", "RoomId", "RoomName", "ShowHome" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemoteLibrary), global::RemoteLibrary.Parser, new[]{ "Id", "Name", "Icon", "Model", "UiRemoteTemplate", "AppVersion", "Group" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemoteMulti), global::RemoteMulti.Parser, new[]{ "Id", "RemoteId", "Name", "RemoteMultiLibraryCmds" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemoteMultiLibraryCmd), global::RemoteMultiLibraryCmd.Parser, new[]{ "Id", "RemoteMultiId", "Name", "Order", "Type" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerState), global::AirConditionerState.Parser, new[]{ "RemoteId", "PowerState", "Temperature", "Mode", "Swing", "Fan", "TemperatureRoom", "HumidityRoom", "DeviceId", "ConnectionState", "IndoorId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ControlState), global::ControlState.Parser, new[]{ "ControlId", "Group", "PowerState", "Temperature", "Mode", "Swing", "Fan", "ConnectionState", "PercentIn", "PercentOut" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Home), global::Home.Parser, new[]{ "Id", "Name", "NameEn", "BackgroundName", "Longitude", "Latitude", "IsOwner", "IsDefault", "FullNameSharer", "Users", "FeatureCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::User), global::User.Parser, new[]{ "UserId", "Avatar", "FullName", "Email", "PhoneNumber", "Language", "AutoSwitchGps", "Order" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserHome), global::UserHome.Parser, new[]{ "Id", "UserId", "HomeId", "Avatar", "FullName", "IsOwner", "AcceptedDate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Citizen), global::Citizen.Parser, new[]{ "HomeId", "Project", "Building", "Floor", "Apartment", "ReceivedDate", "ApprovedDate" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Room), global::Room.Parser, new[]{ "Id", "Name", "Home", "Devices", "Switchers", "CurtainSwitchers", "Remotes", "Motions", "Homekits", "NameEn", "BackgroundName", "Buttons", "GroupControls", "LedItem", "LedDriver", "LightSensors", "EnvironmentSensors", "SmartPlugs" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Schedule), global::Schedule.Parser, new[]{ "Datetime", "Repeat", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemoteScheduleAction), global::RemoteScheduleAction.Parser, new[]{ "Id", "RemoteScheduleId", "RemoteLibraryCmdId", "RemoteMultiLibraryCmdId", "Delay", "Order", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerScheduleAction), global::AirConditionerScheduleAction.Parser, new[]{ "RemoteScheduleId", "PowerState", "Temperature", "Mode", "Swing", "Fan" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemoteSchedule), global::RemoteSchedule.Parser, new[]{ "Id", "Remote", "Schedule", "AirConditionerAction", "RemoteActions", "Active" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SwitcherSchedule), global::SwitcherSchedule.Parser, new[]{ "Id", "PowerState", "Switcher", "Schedule", "Active" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurtainSwitcherSchedule), global::CurtainSwitcherSchedule.Parser, new[]{ "Id", "CurtainSwitcher", "Schedule", "PercentIn", "PercentOut", "Active" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LightSensor), global::LightSensor.Parser, new[]{ "Id", "Icon", "Name", "NameEn", "ButtonState", "Favorite", "Order", "Device" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Meter), global::Meter.Parser, new[]{ "Id", "SerialNumber", "TypeMeter", "DeviceId", "Icon", "Month", "Metric", "Estimate", "Indexs", "Estimates", "ConnectionState", "LimitMoney", "AlertOverConsume", "LastUpdateIndex", "LostUpdateIndex", "LastFromDate", "EstimateMonths", "EstimateDays", "Device", "LastMetricIndex" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterIndex), global::MeterIndex.Parser, new[]{ "SerialNumber", "Type", "Metric", "Hour" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterEstimate), global::MeterEstimate.Parser, new[]{ "SerialNumber", "Type", "Month", "Estimate", "Consume", "Year", "Day", "Hour" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ActiveTime), global::ActiveTime.Parser, new[]{ "EnableFullTime", "EnableStart", "EnableEnd", "EnableDayMap" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::Scene), global::Scene.Parser, new[]{ "Id", "HomeId", "Name", "NameEn", "Icon", "Favorite", "Condition", "SwitcherCondition", "PowerState", "SceneSwitcherActions", "CurtainSwitcherActions", "AirConditionerActions", "SceneRemoteActions", "SceneMotionActions", "Type", "Confirmed", "MotionCondition", "ActiveTime", "IsDisable", "ActionListIcon", "Schedule", "SceneLedDriverActions", "ButtonCondition", "LedDriverCondition", "EnvironmentSensorsCondition" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneSwitcherAction), global::SceneSwitcherAction.Parser, new[]{ "Id", "SceneId", "Switcher", "PowerState", "Order" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneAirConditionerAction), global::SceneAirConditionerAction.Parser, new[]{ "Id", "SceneId", "Remote", "PowerState", "Temperature", "Mode", "Swing", "Fan", "Order" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneCurtainSwitcherAction), global::SceneCurtainSwitcherAction.Parser, new[]{ "Id", "SceneId", "CurtainSwitcher", "PercentIn", "PercentOut" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneRemoteAction), global::SceneRemoteAction.Parser, new[]{ "Id", "SceneId", "Remote", "RemoteLibraryCmdId", "RemoteMultiLibraryCmdId", "Delay", "Order", "Name" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneMotionAction), global::SceneMotionAction.Parser, new[]{ "Id", "SceneId", "Motion", "State", "Order" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneLedDriverAction), global::SceneLedDriverAction.Parser, new[]{ "Id", "SceneId", "LedDriver", "PowerState", "BrightnessPercent", "Icon", "Order" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneButtonAction), global::SceneButtonAction.Parser, new[]{ "Id", "SceneId", "Button", "ButtonState", "Order" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemoteCommand), global::RemoteCommand.Parser, new[]{ "Name", "RemoteLibraryCmdId", "RemoteMultiLibraryCmdId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::StatusCode), global::StatusCode.Parser, new[]{ "Code", "Message" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceInScene), global::DeviceInScene.Parser, new[]{ "Switcher", "Motion", "LedDriver" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurtainSwitcherState), global::CurtainSwitcherState.Parser, new[]{ "PercentIn", "PercentOut" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceTriggerScene), global::DeviceTriggerScene.Parser, new[]{ "HardwareId", "DeviceIndex", "GroupControl", "PowerState", "MotionState", "ButtonState", "BrightnessPercent", "EnvironmentValue", "CurtainSwitcherState", "AirConditionerState" }, new[]{ "ControlState" }, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentSensorReport), global::EnvironmentSensorReport.Parser, new[]{ "Type", "Value" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentSensor), global::EnvironmentSensor.Parser, new[]{ "Id", "Icon", "Name", "NameEn", "Report", "Favorite", "Order", "Device", "Index", "Battery", "Room", "ShowHome" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SmartPlug), global::SmartPlug.Parser, new[]{ "Id", "Icon", "Name", "NameEn", "Index", "Favorite", "Order", "Device", "Amp", "Power", "Volt", "Room", "ShowHome" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UserSetting), global::UserSetting.Parser, new[]{ "DefaultHomeId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::FileUploadForm), global::FileUploadForm.Parser, new[]{ "Name", "Image", "SizeInByte" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Enums
/// <summary>
/// Enum nhóm điều hòa, quạt, rèm cửa, đa năng
/// </summary>
public enum GroupRemote {
  /// <summary>
  /// Điều hòa
  /// </summary>
  [pbr::OriginalName("AirConditioner")] AirConditioner = 0,
  /// <summary>
  /// Quạt
  /// </summary>
  [pbr::OriginalName("Fan")] Fan = 1,
  /// <summary>
  /// Đa năng
  /// </summary>
  [pbr::OriginalName("Multi")] Multi = 2,
}

/// <summary>
/// Enum nhóm thiết bị
/// SWITCH,SWCURTAIN,CURTAIN,IRRF,METTER
/// </summary>
public enum GroupDevice {
  /// <summary>
  /// Công tắc, Bình nóng lạnh
  /// </summary>
  [pbr::OriginalName("SwitcherGroup")] SwitcherGroup = 0,
  /// <summary>
  /// Rèm cửa điều khiển qua công tắc
  /// </summary>
  [pbr::OriginalName("CurtainSwitcherGroup")] CurtainSwitcherGroup = 1,
  /// <summary>
  /// Rèm cửa điều khiển qua thiết bị wifi
  /// </summary>
  [pbr::OriginalName("CurtainGroup")] CurtainGroup = 2,
  /// <summary>
  /// Bộ thu phát sóng IrRf
  /// </summary>
  [pbr::OriginalName("IrRfGroup")] IrRfGroup = 3,
  /// <summary>
  /// Đồng hồ điện
  /// </summary>
  [pbr::OriginalName("MeterGroup")] MeterGroup = 4,
  /// <summary>
  /// Thiết bị chuyển động
  /// </summary>
  [pbr::OriginalName("MotionGroup")] MotionGroup = 5,
  /// <summary>
  /// Homekit
  /// </summary>
  [pbr::OriginalName("HomekitGroup")] HomekitGroup = 6,
  /// <summary>
  /// Nút nhấn
  /// </summary>
  [pbr::OriginalName("ButtonGroup")] ButtonGroup = 7,
  /// <summary>
  /// Nhóm điều hòa
  /// </summary>
  [pbr::OriginalName("ACGroup")] Acgroup = 8,
  [pbr::OriginalName("LedDriverGroup")] LedDriverGroup = 9,
  [pbr::OriginalName("EnvironmentSensorGroup")] EnvironmentSensorGroup = 10,
  /// <summary>
  /// Không xác định
  /// </summary>
  [pbr::OriginalName("UnknowGroup")] UnknowGroup = 1000,
}

/// <summary>
/// Enum điều kiện kịch bản
/// </summary>
public enum ConditionScene {
  /// <summary>
  /// Tự động
  /// </summary>
  [pbr::OriginalName("AutoCondition")] AutoCondition = 0,
  /// <summary>
  /// Bằng tay
  /// </summary>
  [pbr::OriginalName("ManualCondition")] ManualCondition = 1,
}

/// <summary>
/// Enum trạng thái công tắc
/// </summary>
public enum PowerState {
  /// <summary>
  /// Tắt
  /// </summary>
  [pbr::OriginalName("Off")] Off = 0,
  /// <summary>
  /// Mở
  /// </summary>
  [pbr::OriginalName("On")] On = 1,
  /// <summary>
  /// Nháy kép
  /// </summary>
  [pbr::OriginalName("DoubleTap")] DoubleTap = 2,
  /// <summary>
  /// Trigger ngữ cảnh
  /// </summary>
  [pbr::OriginalName("SceneTrigger")] SceneTrigger = 3,
  [pbr::OriginalName("None")] None = 4,
}

/// <summary>
/// Enum trạng thái nút nhấn
/// </summary>
public enum ButtonState {
  /// <summary>
  /// Không làm gì
  /// </summary>
  [pbr::OriginalName("Nothing")] Nothing = 0,
  /// <summary>
  /// Nhấn 1 lần
  /// </summary>
  [pbr::OriginalName("OneClick")] OneClick = 1,
  /// <summary>
  /// Nhấn 2 lần
  /// </summary>
  [pbr::OriginalName("DoubleClick")] DoubleClick = 2,
  /// <summary>
  /// Nhấn giữ
  /// </summary>
  [pbr::OriginalName("LongClick")] LongClick = 3,
}

/// <summary>
/// Enum trạng thái kết nối ConnectionState
/// </summary>
public enum ConnectionState {
  /// <summary>
  /// Offline
  /// </summary>
  [pbr::OriginalName("Offline")] Offline = 0,
  /// <summary>
  /// Online
  /// </summary>
  [pbr::OriginalName("Online")] Online = 1,
  /// <summary>
  /// Disconnect
  /// </summary>
  [pbr::OriginalName("Disconnect")] Disconnect = 2,
}

/// <summary>
/// Enum Mode
/// </summary>
public enum ModeAc {
  [pbr::OriginalName("AutoMode")] AutoMode = 0,
  [pbr::OriginalName("CoolMode")] CoolMode = 1,
  [pbr::OriginalName("HeatMode")] HeatMode = 2,
  [pbr::OriginalName("DryMode")] DryMode = 3,
  [pbr::OriginalName("FanMode")] FanMode = 4,
}

/// <summary>
/// Enum Swing
/// </summary>
public enum SwingAc {
  [pbr::OriginalName("AutoSwing")] AutoSwing = 0,
  [pbr::OriginalName("LowSwing")] LowSwing = 1,
  [pbr::OriginalName("MediumSwing")] MediumSwing = 2,
  [pbr::OriginalName("HighSwing")] HighSwing = 3,
}

/// <summary>
/// Enum Fan
/// </summary>
public enum FanAc {
  [pbr::OriginalName("AutoFan")] AutoFan = 0,
  [pbr::OriginalName("LowFan")] LowFan = 1,
  [pbr::OriginalName("MediumFan")] MediumFan = 2,
  [pbr::OriginalName("HighFan")] HighFan = 3,
}

/// <summary>
/// Enum Type Meter
/// </summary>
public enum TypeMeter {
  [pbr::OriginalName("ElectricMeter")] ElectricMeter = 0,
  [pbr::OriginalName("WaterMeter")] WaterMeter = 1,
}

/// <summary>
/// Enum for learn IR or RF remote
/// </summary>
public enum TypeLearn {
  [pbr::OriginalName("IR")] Ir = 0,
  [pbr::OriginalName("RF")] Rf = 1,
}

/// <summary>
/// Enum loại thiết bị
/// </summary>
public enum TypeDevice {
  /// <summary>
  /// Đèn
  /// </summary>
  [pbr::OriginalName("SwitchLight")] SwitchLight = 0,
  /// <summary>
  /// Công tắc
  /// </summary>
  [pbr::OriginalName("SwitchSwitcher")] SwitchSwitcher = 1,
  /// <summary>
  /// Ổ cắm
  /// </summary>
  [pbr::OriginalName("SwitchOutlet")] SwitchOutlet = 2,
}

/// <summary>
/// Enum trạng thái cảm biến chuyển động
/// </summary>
public enum MotionState {
  /// <summary>
  /// Không có chuyển động
  /// </summary>
  [pbr::OriginalName("MotionNone")] MotionNone = 0,
  /// <summary>
  /// Có chuyển động
  /// </summary>
  [pbr::OriginalName("MotionDetected")] MotionDetected = 1,
}

public enum HomekitMode {
  [pbr::OriginalName("HomekitNormalMode")] HomekitNormalMode = 0,
  [pbr::OriginalName("HomekitProvisioningMode")] HomekitProvisioningMode = 1,
}

/// <summary>
/// Enum nhóm điều hòa, quạt, rèm cửa
/// </summary>
public enum TypeEcho {
  /// <summary>
  /// Phản hồi bình thường
  /// </summary>
  [pbr::OriginalName("Echo")] Echo = 0,
  /// <summary>
  /// Login của thiết bị
  /// </summary>
  [pbr::OriginalName("DeviceLogin")] DeviceLogin = 1,
}

public enum DataType {
  [pbr::OriginalName("BINARIES")] Binaries = 0,
  [pbr::OriginalName("BASE64")] Base64 = 1,
}

public enum UserRole {
  [pbr::OriginalName("NormalUser")] NormalUser = 0,
  [pbr::OriginalName("OperationalUser")] OperationalUser = 1,
  [pbr::OriginalName("UserRoleMax")] Max = 2,
}

public enum MotionSensorType {
  [pbr::OriginalName("MotionSensor")] MotionSensor = 0,
  [pbr::OriginalName("DoorSensor")] DoorSensor = 1,
  [pbr::OriginalName("LeakSensor")] LeakSensor = 2,
  [pbr::OriginalName("SmokeSensor")] SmokeSensor = 3,
  [pbr::OriginalName("GasSensor")] GasSensor = 4,
  [pbr::OriginalName("Temperature_Humidity_Pressure")] TemperatureHumidityPressure = 5,
  [pbr::OriginalName("Motion_Light")] MotionLight = 6,
  [pbr::OriginalName("Motion_Vibrate")] MotionVibrate = 7,
}

public enum EnvironmentSensorType {
  [pbr::OriginalName("Unknow")] Unknow = 0,
  [pbr::OriginalName("Temperature")] Temperature = 1,
  [pbr::OriginalName("Humidity")] Humidity = 2,
  [pbr::OriginalName("Pressure")] Pressure = 3,
  [pbr::OriginalName("Light")] Light = 4,
  [pbr::OriginalName("Vibrate")] Vibrate = 5,
}

#endregion

#region Messages
/// <summary>
/// Ngày giờ
/// </summary>
public sealed partial class DateTime : pb::IMessage<DateTime> {
  private static readonly pb::MessageParser<DateTime> _parser = new pb::MessageParser<DateTime>(() => new DateTime());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DateTime> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DateTime() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DateTime(DateTime other) : this() {
    day_ = other.day_;
    month_ = other.month_;
    year_ = other.year_;
    hour_ = other.hour_;
    minute_ = other.minute_;
    second_ = other.second_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DateTime Clone() {
    return new DateTime(this);
  }

  /// <summary>Field number for the "day" field.</summary>
  public const int DayFieldNumber = 1;
  private uint day_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Day {
    get { return day_; }
    set {
      day_ = value;
    }
  }

  /// <summary>Field number for the "month" field.</summary>
  public const int MonthFieldNumber = 2;
  private uint month_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Month {
    get { return month_; }
    set {
      month_ = value;
    }
  }

  /// <summary>Field number for the "year" field.</summary>
  public const int YearFieldNumber = 3;
  private uint year_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Year {
    get { return year_; }
    set {
      year_ = value;
    }
  }

  /// <summary>Field number for the "hour" field.</summary>
  public const int HourFieldNumber = 4;
  private uint hour_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Hour {
    get { return hour_; }
    set {
      hour_ = value;
    }
  }

  /// <summary>Field number for the "minute" field.</summary>
  public const int MinuteFieldNumber = 5;
  private uint minute_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Minute {
    get { return minute_; }
    set {
      minute_ = value;
    }
  }

  /// <summary>Field number for the "second" field.</summary>
  public const int SecondFieldNumber = 6;
  private uint second_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Second {
    get { return second_; }
    set {
      second_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DateTime);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DateTime other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Day != other.Day) return false;
    if (Month != other.Month) return false;
    if (Year != other.Year) return false;
    if (Hour != other.Hour) return false;
    if (Minute != other.Minute) return false;
    if (Second != other.Second) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Day != 0) hash ^= Day.GetHashCode();
    if (Month != 0) hash ^= Month.GetHashCode();
    if (Year != 0) hash ^= Year.GetHashCode();
    if (Hour != 0) hash ^= Hour.GetHashCode();
    if (Minute != 0) hash ^= Minute.GetHashCode();
    if (Second != 0) hash ^= Second.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Day != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Day);
    }
    if (Month != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Month);
    }
    if (Year != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Year);
    }
    if (Hour != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Hour);
    }
    if (Minute != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Minute);
    }
    if (Second != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Second);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Day != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Day);
    }
    if (Month != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Month);
    }
    if (Year != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Year);
    }
    if (Hour != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hour);
    }
    if (Minute != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Minute);
    }
    if (Second != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Second);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DateTime other) {
    if (other == null) {
      return;
    }
    if (other.Day != 0) {
      Day = other.Day;
    }
    if (other.Month != 0) {
      Month = other.Month;
    }
    if (other.Year != 0) {
      Year = other.Year;
    }
    if (other.Hour != 0) {
      Hour = other.Hour;
    }
    if (other.Minute != 0) {
      Minute = other.Minute;
    }
    if (other.Second != 0) {
      Second = other.Second;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Day = input.ReadUInt32();
          break;
        }
        case 16: {
          Month = input.ReadUInt32();
          break;
        }
        case 24: {
          Year = input.ReadUInt32();
          break;
        }
        case 32: {
          Hour = input.ReadUInt32();
          break;
        }
        case 40: {
          Minute = input.ReadUInt32();
          break;
        }
        case 48: {
          Second = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class Project : pb::IMessage<Project> {
  private static readonly pb::MessageParser<Project> _parser = new pb::MessageParser<Project>(() => new Project());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Project> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Project() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Project(Project other) : this() {
    id_ = other.id_;
    code_ = other.code_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Project Clone() {
    return new Project(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Project);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Project other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Code != other.Code) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Code.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Code);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Project other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Code = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Building : pb::IMessage<Building> {
  private static readonly pb::MessageParser<Building> _parser = new pb::MessageParser<Building>(() => new Building());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Building> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Building() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Building(Building other) : this() {
    id_ = other.id_;
    code_ = other.code_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Building Clone() {
    return new Building(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Building);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Building other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Code != other.Code) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Code.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Code);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Building other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Code = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Floor : pb::IMessage<Floor> {
  private static readonly pb::MessageParser<Floor> _parser = new pb::MessageParser<Floor>(() => new Floor());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Floor> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Floor() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Floor(Floor other) : this() {
    id_ = other.id_;
    code_ = other.code_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Floor Clone() {
    return new Floor(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Floor);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Floor other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Code != other.Code) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Code.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Code);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Floor other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Code = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class Apartment : pb::IMessage<Apartment> {
  private static readonly pb::MessageParser<Apartment> _parser = new pb::MessageParser<Apartment>(() => new Apartment());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Apartment> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Apartment() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Apartment(Apartment other) : this() {
    id_ = other.id_;
    code_ = other.code_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Apartment Clone() {
    return new Apartment(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 2;
  private string code_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Code {
    get { return code_; }
    set {
      code_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Apartment);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Apartment other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Code != other.Code) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Code.Length != 0) hash ^= Code.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Code.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Code);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Code.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Code);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Apartment other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Code.Length != 0) {
      Code = other.Code;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Code = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class ImageNetwork : pb::IMessage<ImageNetwork> {
  private static readonly pb::MessageParser<ImageNetwork> _parser = new pb::MessageParser<ImageNetwork>(() => new ImageNetwork());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ImageNetwork> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageNetwork() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageNetwork(ImageNetwork other) : this() {
    thumb_ = other.thumb_;
    url_ = other.url_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ImageNetwork Clone() {
    return new ImageNetwork(this);
  }

  /// <summary>Field number for the "thumb" field.</summary>
  public const int ThumbFieldNumber = 1;
  private string thumb_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Thumb {
    get { return thumb_; }
    set {
      thumb_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "url" field.</summary>
  public const int UrlFieldNumber = 2;
  private string url_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Url {
    get { return url_; }
    set {
      url_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ImageNetwork);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ImageNetwork other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Thumb != other.Thumb) return false;
    if (Url != other.Url) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Thumb.Length != 0) hash ^= Thumb.GetHashCode();
    if (Url.Length != 0) hash ^= Url.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Thumb.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Thumb);
    }
    if (Url.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Url);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Thumb.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Thumb);
    }
    if (Url.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Url);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ImageNetwork other) {
    if (other == null) {
      return;
    }
    if (other.Thumb.Length != 0) {
      Thumb = other.Thumb;
    }
    if (other.Url.Length != 0) {
      Url = other.Url;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Thumb = input.ReadString();
          break;
        }
        case 18: {
          Url = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhóm thiết bị
/// </summary>
public sealed partial class GroupControl : pb::IMessage<GroupControl> {
  private static readonly pb::MessageParser<GroupControl> _parser = new pb::MessageParser<GroupControl>(() => new GroupControl());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GroupControl> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GroupControl() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GroupControl(GroupControl other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    icon_ = other.icon_;
    group_ = other.group_;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    count_ = other.count_;
    favorite_ = other.favorite_;
    showHome_ = other.showHome_;
    autoOff_ = other.autoOff_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    state_ = other.state_ != null ? other.state_.Clone() : null;
    switchers_ = other.switchers_.Clone();
    curtainSwitchers_ = other.curtainSwitchers_.Clone();
    remotes_ = other.remotes_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GroupControl Clone() {
    return new GroupControl(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// Id nhóm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  /// <summary>
  /// Tên tiếng việt
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 3;
  private string nameEn_ = "";
  /// <summary>
  /// Tên tiếng anh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 4;
  private string icon_ = "";
  /// <summary>
  /// Tên tiếng anh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "group" field.</summary>
  public const int GroupFieldNumber = 5;
  private global::GroupDevice group_ = global::GroupDevice.SwitcherGroup;
  /// <summary>
  /// Nhóm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupDevice Group {
    get { return group_; }
    set {
      group_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 6;
  private global::Room room_;
  /// <summary>
  /// Phòng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Room Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "count" field.</summary>
  public const int CountFieldNumber = 7;
  private uint count_;
  /// <summary>
  /// Số lượng thiết bị trong Nhóm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Count {
    get { return count_; }
    set {
      count_ = value;
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 8;
  private bool favorite_;
  /// <summary>
  /// Ưu thích
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "showHome" field.</summary>
  public const int ShowHomeFieldNumber = 9;
  private bool showHome_;
  /// <summary>
  /// Hiển thị trạng thái trang nhà
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowHome {
    get { return showHome_; }
    set {
      showHome_ = value;
    }
  }

  /// <summary>Field number for the "autoOff" field.</summary>
  public const int AutoOffFieldNumber = 10;
  private uint autoOff_;
  /// <summary>
  /// Số phút tự động tắt
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AutoOff {
    get { return autoOff_; }
    set {
      autoOff_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 11;
  private global::Device device_;
  /// <summary>
  /// Device ảo DeviceId = GroupControlId để cho đồng bộ với thiết bị thật
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 12;
  private global::ControlState state_;
  /// <summary>
  /// Trạng thái hiện tại của nhóm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ControlState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "switchers" field.</summary>
  public const int SwitchersFieldNumber = 13;
  private static readonly pb::FieldCodec<global::Switcher> _repeated_switchers_codec
      = pb::FieldCodec.ForMessage(106, global::Switcher.Parser);
  private readonly pbc::RepeatedField<global::Switcher> switchers_ = new pbc::RepeatedField<global::Switcher>();
  /// <summary>
  /// Công tắc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Switcher> Switchers {
    get { return switchers_; }
  }

  /// <summary>Field number for the "curtainSwitchers" field.</summary>
  public const int CurtainSwitchersFieldNumber = 14;
  private static readonly pb::FieldCodec<global::CurtainSwitcher> _repeated_curtainSwitchers_codec
      = pb::FieldCodec.ForMessage(114, global::CurtainSwitcher.Parser);
  private readonly pbc::RepeatedField<global::CurtainSwitcher> curtainSwitchers_ = new pbc::RepeatedField<global::CurtainSwitcher>();
  /// <summary>
  ///  Rèm cửa
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CurtainSwitcher> CurtainSwitchers {
    get { return curtainSwitchers_; }
  }

  /// <summary>Field number for the "remotes" field.</summary>
  public const int RemotesFieldNumber = 15;
  private static readonly pb::FieldCodec<global::Remote> _repeated_remotes_codec
      = pb::FieldCodec.ForMessage(122, global::Remote.Parser);
  private readonly pbc::RepeatedField<global::Remote> remotes_ = new pbc::RepeatedField<global::Remote>();
  /// <summary>
  /// Điều hòa
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Remote> Remotes {
    get { return remotes_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GroupControl);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GroupControl other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (Icon != other.Icon) return false;
    if (Group != other.Group) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (Count != other.Count) return false;
    if (Favorite != other.Favorite) return false;
    if (ShowHome != other.ShowHome) return false;
    if (AutoOff != other.AutoOff) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (!object.Equals(State, other.State)) return false;
    if(!switchers_.Equals(other.switchers_)) return false;
    if(!curtainSwitchers_.Equals(other.curtainSwitchers_)) return false;
    if(!remotes_.Equals(other.remotes_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Group != global::GroupDevice.SwitcherGroup) hash ^= Group.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (Count != 0) hash ^= Count.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (ShowHome != false) hash ^= ShowHome.GetHashCode();
    if (AutoOff != 0) hash ^= AutoOff.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (state_ != null) hash ^= State.GetHashCode();
    hash ^= switchers_.GetHashCode();
    hash ^= curtainSwitchers_.GetHashCode();
    hash ^= remotes_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NameEn);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Icon);
    }
    if (Group != global::GroupDevice.SwitcherGroup) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Group);
    }
    if (room_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Room);
    }
    if (Count != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Count);
    }
    if (Favorite != false) {
      output.WriteRawTag(64);
      output.WriteBool(Favorite);
    }
    if (ShowHome != false) {
      output.WriteRawTag(72);
      output.WriteBool(ShowHome);
    }
    if (AutoOff != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(AutoOff);
    }
    if (device_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(Device);
    }
    if (state_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(State);
    }
    switchers_.WriteTo(output, _repeated_switchers_codec);
    curtainSwitchers_.WriteTo(output, _repeated_curtainSwitchers_codec);
    remotes_.WriteTo(output, _repeated_remotes_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Group != global::GroupDevice.SwitcherGroup) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Group);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (Count != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Count);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (ShowHome != false) {
      size += 1 + 1;
    }
    if (AutoOff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoOff);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (state_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
    }
    size += switchers_.CalculateSize(_repeated_switchers_codec);
    size += curtainSwitchers_.CalculateSize(_repeated_curtainSwitchers_codec);
    size += remotes_.CalculateSize(_repeated_remotes_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GroupControl other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Group != global::GroupDevice.SwitcherGroup) {
      Group = other.Group;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::Room();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.Count != 0) {
      Count = other.Count;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.ShowHome != false) {
      ShowHome = other.ShowHome;
    }
    if (other.AutoOff != 0) {
      AutoOff = other.AutoOff;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.state_ != null) {
      if (state_ == null) {
        State = new global::ControlState();
      }
      State.MergeFrom(other.State);
    }
    switchers_.Add(other.switchers_);
    curtainSwitchers_.Add(other.curtainSwitchers_);
    remotes_.Add(other.remotes_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          NameEn = input.ReadString();
          break;
        }
        case 34: {
          Icon = input.ReadString();
          break;
        }
        case 40: {
          Group = (global::GroupDevice) input.ReadEnum();
          break;
        }
        case 50: {
          if (room_ == null) {
            Room = new global::Room();
          }
          input.ReadMessage(Room);
          break;
        }
        case 56: {
          Count = input.ReadUInt32();
          break;
        }
        case 64: {
          Favorite = input.ReadBool();
          break;
        }
        case 72: {
          ShowHome = input.ReadBool();
          break;
        }
        case 80: {
          AutoOff = input.ReadUInt32();
          break;
        }
        case 90: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 98: {
          if (state_ == null) {
            State = new global::ControlState();
          }
          input.ReadMessage(State);
          break;
        }
        case 106: {
          switchers_.AddEntriesFrom(input, _repeated_switchers_codec);
          break;
        }
        case 114: {
          curtainSwitchers_.AddEntriesFrom(input, _repeated_curtainSwitchers_codec);
          break;
        }
        case 122: {
          remotes_.AddEntriesFrom(input, _repeated_remotes_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin về thiết bị kết nối wifi
/// </summary>
public sealed partial class Device : pb::IMessage<Device> {
  private static readonly pb::MessageParser<Device> _parser = new pb::MessageParser<Device>(() => new Device());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Device> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Device() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Device(Device other) : this() {
    deviceId_ = other.deviceId_;
    roomId_ = other.roomId_;
    deviceToken_ = other.deviceToken_;
    deviceName_ = other.deviceName_;
    brandName_ = other.brandName_;
    roomName_ = other.roomName_;
    icon_ = other.icon_;
    ip_ = other.ip_;
    mdns_ = other.mdns_;
    model_ = other.model_;
    signal_ = other.signal_;
    firmwareVersion_ = other.firmwareVersion_;
    hardwareVersion_ = other.hardwareVersion_;
    hardwareId_ = other.hardwareId_;
    accessKey_ = other.accessKey_;
    connectionState_ = other.connectionState_;
    group_ = other.group_;
    updateMode_ = other.updateMode_;
    gatewayId_ = other.gatewayId_;
    reactivity_ = other.reactivity_;
    brightness_ = other.brightness_;
    timeDelay_ = other.timeDelay_;
    sceneActiveMap_ = other.sceneActiveMap_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Device Clone() {
    return new Device(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// Id của thiết bị kết nối wifi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomId" field.</summary>
  public const int RoomIdFieldNumber = 2;
  private string roomId_ = "";
  /// <summary>
  /// Id của room
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomId {
    get { return roomId_; }
    set {
      roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceToken" field.</summary>
  public const int DeviceTokenFieldNumber = 3;
  private string deviceToken_ = "";
  /// <summary>
  /// DeviceToken
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceToken {
    get { return deviceToken_; }
    set {
      deviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceName" field.</summary>
  public const int DeviceNameFieldNumber = 4;
  private string deviceName_ = "";
  /// <summary>
  /// Tên thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceName {
    get { return deviceName_; }
    set {
      deviceName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "brandName" field.</summary>
  public const int BrandNameFieldNumber = 5;
  private string brandName_ = "";
  /// <summary>
  /// Tên hãng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BrandName {
    get { return brandName_; }
    set {
      brandName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomName" field.</summary>
  public const int RoomNameFieldNumber = 6;
  private string roomName_ = "";
  /// <summary>
  /// Tên của room
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomName {
    get { return roomName_; }
    set {
      roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 7;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ip" field.</summary>
  public const int IpFieldNumber = 8;
  private string ip_ = "";
  /// <summary>
  /// IP local của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Ip {
    get { return ip_; }
    set {
      ip_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "mdns" field.</summary>
  public const int MdnsFieldNumber = 9;
  private string mdns_ = "";
  /// <summary>
  /// IP local của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Mdns {
    get { return mdns_; }
    set {
      mdns_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "model" field.</summary>
  public const int ModelFieldNumber = 10;
  private string model_ = "";
  /// <summary>
  /// Mẫu thiết bị (1 Công tắc, 2 Công tắc, 3 Công tắc...)
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Model {
    get { return model_; }
    set {
      model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "signal" field.</summary>
  public const int SignalFieldNumber = 11;
  private int signal_;
  /// <summary>
  /// Tín hiệu sóng, Lưu trên server?
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Signal {
    get { return signal_; }
    set {
      signal_ = value;
    }
  }

  /// <summary>Field number for the "firmwareVersion" field.</summary>
  public const int FirmwareVersionFieldNumber = 12;
  private string firmwareVersion_ = "";
  /// <summary>
  /// Phiên bản firmware phần mềm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FirmwareVersion {
    get { return firmwareVersion_; }
    set {
      firmwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hardwareVersion" field.</summary>
  public const int HardwareVersionFieldNumber = 13;
  private string hardwareVersion_ = "";
  /// <summary>
  /// Phiên bản hardware phần cứng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareVersion {
    get { return hardwareVersion_; }
    set {
      hardwareVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 14;
  private string hardwareId_ = "";
  /// <summary>
  /// HardwareId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "accessKey" field.</summary>
  public const int AccessKeyFieldNumber = 15;
  private string accessKey_ = "";
  /// <summary>
  /// Access key để đăng nhập websocket server
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AccessKey {
    get { return accessKey_; }
    set {
      accessKey_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connectionState" field.</summary>
  public const int ConnectionStateFieldNumber = 16;
  private global::ConnectionState connectionState_ = global::ConnectionState.Offline;
  /// <summary>
  /// Online/Offline/Disconnect
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConnectionState ConnectionState {
    get { return connectionState_; }
    set {
      connectionState_ = value;
    }
  }

  /// <summary>Field number for the "group" field.</summary>
  public const int GroupFieldNumber = 17;
  private global::GroupDevice group_ = global::GroupDevice.SwitcherGroup;
  /// <summary>
  /// Nhóm thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupDevice Group {
    get { return group_; }
    set {
      group_ = value;
    }
  }

  /// <summary>Field number for the "updateMode" field.</summary>
  public const int UpdateModeFieldNumber = 18;
  private uint updateMode_;
  /// <summary>
  /// Chế độ update firmware
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UpdateMode {
    get { return updateMode_; }
    set {
      updateMode_ = value;
    }
  }

  /// <summary>Field number for the "gatewayId" field.</summary>
  public const int GatewayIdFieldNumber = 19;
  private string gatewayId_ = "";
  /// <summary>
  /// gatewayId root
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string GatewayId {
    get { return gatewayId_; }
    set {
      gatewayId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "reactivity" field.</summary>
  public const int ReactivityFieldNumber = 20;
  private uint reactivity_;
  /// <summary>
  /// Độ nhạy của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Reactivity {
    get { return reactivity_; }
    set {
      reactivity_ = value;
    }
  }

  /// <summary>Field number for the "brightness" field.</summary>
  public const int BrightnessFieldNumber = 21;
  private uint brightness_;
  /// <summary>
  /// Độ sáng của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Brightness {
    get { return brightness_; }
    set {
      brightness_ = value;
    }
  }

  /// <summary>Field number for the "timeDelay" field.</summary>
  public const int TimeDelayFieldNumber = 22;
  private uint timeDelay_;
  /// <summary>
  /// Thời gian chờ để tắt PIR
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeDelay {
    get { return timeDelay_; }
    set {
      timeDelay_ = value;
    }
  }

  /// <summary>Field number for the "sceneActiveMap" field.</summary>
  public const int SceneActiveMapFieldNumber = 23;
  private uint sceneActiveMap_;
  /// <summary>
  /// |0000|0000|0000|0000|0000|0000|0000|0000|,
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SceneActiveMap {
    get { return sceneActiveMap_; }
    set {
      sceneActiveMap_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Device);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Device other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (RoomId != other.RoomId) return false;
    if (DeviceToken != other.DeviceToken) return false;
    if (DeviceName != other.DeviceName) return false;
    if (BrandName != other.BrandName) return false;
    if (RoomName != other.RoomName) return false;
    if (Icon != other.Icon) return false;
    if (Ip != other.Ip) return false;
    if (Mdns != other.Mdns) return false;
    if (Model != other.Model) return false;
    if (Signal != other.Signal) return false;
    if (FirmwareVersion != other.FirmwareVersion) return false;
    if (HardwareVersion != other.HardwareVersion) return false;
    if (HardwareId != other.HardwareId) return false;
    if (AccessKey != other.AccessKey) return false;
    if (ConnectionState != other.ConnectionState) return false;
    if (Group != other.Group) return false;
    if (UpdateMode != other.UpdateMode) return false;
    if (GatewayId != other.GatewayId) return false;
    if (Reactivity != other.Reactivity) return false;
    if (Brightness != other.Brightness) return false;
    if (TimeDelay != other.TimeDelay) return false;
    if (SceneActiveMap != other.SceneActiveMap) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
    if (DeviceToken.Length != 0) hash ^= DeviceToken.GetHashCode();
    if (DeviceName.Length != 0) hash ^= DeviceName.GetHashCode();
    if (BrandName.Length != 0) hash ^= BrandName.GetHashCode();
    if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Ip.Length != 0) hash ^= Ip.GetHashCode();
    if (Mdns.Length != 0) hash ^= Mdns.GetHashCode();
    if (Model.Length != 0) hash ^= Model.GetHashCode();
    if (Signal != 0) hash ^= Signal.GetHashCode();
    if (FirmwareVersion.Length != 0) hash ^= FirmwareVersion.GetHashCode();
    if (HardwareVersion.Length != 0) hash ^= HardwareVersion.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (AccessKey.Length != 0) hash ^= AccessKey.GetHashCode();
    if (ConnectionState != global::ConnectionState.Offline) hash ^= ConnectionState.GetHashCode();
    if (Group != global::GroupDevice.SwitcherGroup) hash ^= Group.GetHashCode();
    if (UpdateMode != 0) hash ^= UpdateMode.GetHashCode();
    if (GatewayId.Length != 0) hash ^= GatewayId.GetHashCode();
    if (Reactivity != 0) hash ^= Reactivity.GetHashCode();
    if (Brightness != 0) hash ^= Brightness.GetHashCode();
    if (TimeDelay != 0) hash ^= TimeDelay.GetHashCode();
    if (SceneActiveMap != 0) hash ^= SceneActiveMap.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (RoomId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RoomId);
    }
    if (DeviceToken.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DeviceToken);
    }
    if (DeviceName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(DeviceName);
    }
    if (BrandName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(BrandName);
    }
    if (RoomName.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(RoomName);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Icon);
    }
    if (Ip.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Ip);
    }
    if (Mdns.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(Mdns);
    }
    if (Model.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(Model);
    }
    if (Signal != 0) {
      output.WriteRawTag(88);
      output.WriteInt32(Signal);
    }
    if (FirmwareVersion.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(FirmwareVersion);
    }
    if (HardwareVersion.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(HardwareVersion);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(114);
      output.WriteString(HardwareId);
    }
    if (AccessKey.Length != 0) {
      output.WriteRawTag(122);
      output.WriteString(AccessKey);
    }
    if (ConnectionState != global::ConnectionState.Offline) {
      output.WriteRawTag(128, 1);
      output.WriteEnum((int) ConnectionState);
    }
    if (Group != global::GroupDevice.SwitcherGroup) {
      output.WriteRawTag(136, 1);
      output.WriteEnum((int) Group);
    }
    if (UpdateMode != 0) {
      output.WriteRawTag(144, 1);
      output.WriteUInt32(UpdateMode);
    }
    if (GatewayId.Length != 0) {
      output.WriteRawTag(154, 1);
      output.WriteString(GatewayId);
    }
    if (Reactivity != 0) {
      output.WriteRawTag(160, 1);
      output.WriteUInt32(Reactivity);
    }
    if (Brightness != 0) {
      output.WriteRawTag(168, 1);
      output.WriteUInt32(Brightness);
    }
    if (TimeDelay != 0) {
      output.WriteRawTag(176, 1);
      output.WriteUInt32(TimeDelay);
    }
    if (SceneActiveMap != 0) {
      output.WriteRawTag(184, 1);
      output.WriteUInt32(SceneActiveMap);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (RoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
    }
    if (DeviceToken.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceToken);
    }
    if (DeviceName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceName);
    }
    if (BrandName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BrandName);
    }
    if (RoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Ip.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Ip);
    }
    if (Mdns.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Mdns);
    }
    if (Model.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
    }
    if (Signal != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Signal);
    }
    if (FirmwareVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FirmwareVersion);
    }
    if (HardwareVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareVersion);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (AccessKey.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AccessKey);
    }
    if (ConnectionState != global::ConnectionState.Offline) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
    }
    if (Group != global::GroupDevice.SwitcherGroup) {
      size += 2 + pb::CodedOutputStream.ComputeEnumSize((int) Group);
    }
    if (UpdateMode != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(UpdateMode);
    }
    if (GatewayId.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(GatewayId);
    }
    if (Reactivity != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Reactivity);
    }
    if (Brightness != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(Brightness);
    }
    if (TimeDelay != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(TimeDelay);
    }
    if (SceneActiveMap != 0) {
      size += 2 + pb::CodedOutputStream.ComputeUInt32Size(SceneActiveMap);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Device other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.RoomId.Length != 0) {
      RoomId = other.RoomId;
    }
    if (other.DeviceToken.Length != 0) {
      DeviceToken = other.DeviceToken;
    }
    if (other.DeviceName.Length != 0) {
      DeviceName = other.DeviceName;
    }
    if (other.BrandName.Length != 0) {
      BrandName = other.BrandName;
    }
    if (other.RoomName.Length != 0) {
      RoomName = other.RoomName;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Ip.Length != 0) {
      Ip = other.Ip;
    }
    if (other.Mdns.Length != 0) {
      Mdns = other.Mdns;
    }
    if (other.Model.Length != 0) {
      Model = other.Model;
    }
    if (other.Signal != 0) {
      Signal = other.Signal;
    }
    if (other.FirmwareVersion.Length != 0) {
      FirmwareVersion = other.FirmwareVersion;
    }
    if (other.HardwareVersion.Length != 0) {
      HardwareVersion = other.HardwareVersion;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.AccessKey.Length != 0) {
      AccessKey = other.AccessKey;
    }
    if (other.ConnectionState != global::ConnectionState.Offline) {
      ConnectionState = other.ConnectionState;
    }
    if (other.Group != global::GroupDevice.SwitcherGroup) {
      Group = other.Group;
    }
    if (other.UpdateMode != 0) {
      UpdateMode = other.UpdateMode;
    }
    if (other.GatewayId.Length != 0) {
      GatewayId = other.GatewayId;
    }
    if (other.Reactivity != 0) {
      Reactivity = other.Reactivity;
    }
    if (other.Brightness != 0) {
      Brightness = other.Brightness;
    }
    if (other.TimeDelay != 0) {
      TimeDelay = other.TimeDelay;
    }
    if (other.SceneActiveMap != 0) {
      SceneActiveMap = other.SceneActiveMap;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18: {
          RoomId = input.ReadString();
          break;
        }
        case 26: {
          DeviceToken = input.ReadString();
          break;
        }
        case 34: {
          DeviceName = input.ReadString();
          break;
        }
        case 42: {
          BrandName = input.ReadString();
          break;
        }
        case 50: {
          RoomName = input.ReadString();
          break;
        }
        case 58: {
          Icon = input.ReadString();
          break;
        }
        case 66: {
          Ip = input.ReadString();
          break;
        }
        case 74: {
          Mdns = input.ReadString();
          break;
        }
        case 82: {
          Model = input.ReadString();
          break;
        }
        case 88: {
          Signal = input.ReadInt32();
          break;
        }
        case 98: {
          FirmwareVersion = input.ReadString();
          break;
        }
        case 106: {
          HardwareVersion = input.ReadString();
          break;
        }
        case 114: {
          HardwareId = input.ReadString();
          break;
        }
        case 122: {
          AccessKey = input.ReadString();
          break;
        }
        case 128: {
          ConnectionState = (global::ConnectionState) input.ReadEnum();
          break;
        }
        case 136: {
          Group = (global::GroupDevice) input.ReadEnum();
          break;
        }
        case 144: {
          UpdateMode = input.ReadUInt32();
          break;
        }
        case 154: {
          GatewayId = input.ReadString();
          break;
        }
        case 160: {
          Reactivity = input.ReadUInt32();
          break;
        }
        case 168: {
          Brightness = input.ReadUInt32();
          break;
        }
        case 176: {
          TimeDelay = input.ReadUInt32();
          break;
        }
        case 184: {
          SceneActiveMap = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thiết bị switcher công tắc
/// </summary>
public sealed partial class Switcher : pb::IMessage<Switcher> {
  private static readonly pb::MessageParser<Switcher> _parser = new pb::MessageParser<Switcher>(() => new Switcher());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Switcher> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Switcher() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Switcher(Switcher other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    icon_ = other.icon_;
    switcher_ = other.switcher_;
    powerState_ = other.powerState_;
    keepState_ = other.keepState_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    type_ = other.type_;
    showHome_ = other.showHome_;
    autoOff_ = other.autoOff_;
    groupControl_ = other.groupControl_ != null ? other.groupControl_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Switcher Clone() {
    return new Switcher(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 3;
  private string nameEn_ = "";
  /// <summary>
  /// Tên tiếng anh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 4;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int Switcher_FieldNumber = 5;
  private uint switcher_;
  /// <summary>
  /// 1/2/3/4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher_ {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 6;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Trạng thái On/Off
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "keepState" field.</summary>
  public const int KeepStateFieldNumber = 7;
  private uint keepState_;
  /// <summary>
  /// 0: Off, 1: On, 2: Keep giữ trạng thái cũ
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint KeepState {
    get { return keepState_; }
    set {
      keepState_ = value;
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 8;
  private bool favorite_;
  /// <summary>
  /// Ưu thích
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 9;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 10;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 11;
  private global::Room room_;
  /// <summary>
  /// Phòng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Room Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 12;
  private global::TypeDevice type_ = global::TypeDevice.SwitchLight;
  /// <summary>
  /// Loại thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeDevice Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "showHome" field.</summary>
  public const int ShowHomeFieldNumber = 13;
  private bool showHome_;
  /// <summary>
  /// Hiển thị trạng thái trang nhà
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowHome {
    get { return showHome_; }
    set {
      showHome_ = value;
    }
  }

  /// <summary>Field number for the "autoOff" field.</summary>
  public const int AutoOffFieldNumber = 14;
  private uint autoOff_;
  /// <summary>
  /// Số phút tự động tắt
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AutoOff {
    get { return autoOff_; }
    set {
      autoOff_ = value;
    }
  }

  /// <summary>Field number for the "groupControl" field.</summary>
  public const int GroupControlFieldNumber = 15;
  private global::GroupControl groupControl_;
  /// <summary>
  /// Nhóm điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupControl GroupControl {
    get { return groupControl_; }
    set {
      groupControl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Switcher);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Switcher other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (Icon != other.Icon) return false;
    if (Switcher_ != other.Switcher_) return false;
    if (PowerState != other.PowerState) return false;
    if (KeepState != other.KeepState) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (Type != other.Type) return false;
    if (ShowHome != other.ShowHome) return false;
    if (AutoOff != other.AutoOff) return false;
    if (!object.Equals(GroupControl, other.GroupControl)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Switcher_ != 0) hash ^= Switcher_.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (KeepState != 0) hash ^= KeepState.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (Type != global::TypeDevice.SwitchLight) hash ^= Type.GetHashCode();
    if (ShowHome != false) hash ^= ShowHome.GetHashCode();
    if (AutoOff != 0) hash ^= AutoOff.GetHashCode();
    if (groupControl_ != null) hash ^= GroupControl.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NameEn);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Icon);
    }
    if (Switcher_ != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Switcher_);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(48);
      output.WriteEnum((int) PowerState);
    }
    if (KeepState != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(KeepState);
    }
    if (Favorite != false) {
      output.WriteRawTag(64);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(Device);
    }
    if (room_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(Room);
    }
    if (Type != global::TypeDevice.SwitchLight) {
      output.WriteRawTag(96);
      output.WriteEnum((int) Type);
    }
    if (ShowHome != false) {
      output.WriteRawTag(104);
      output.WriteBool(ShowHome);
    }
    if (AutoOff != 0) {
      output.WriteRawTag(112);
      output.WriteUInt32(AutoOff);
    }
    if (groupControl_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(GroupControl);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Switcher_ != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher_);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (KeepState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepState);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (Type != global::TypeDevice.SwitchLight) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (ShowHome != false) {
      size += 1 + 1;
    }
    if (AutoOff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoOff);
    }
    if (groupControl_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupControl);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Switcher other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Switcher_ != 0) {
      Switcher_ = other.Switcher_;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.KeepState != 0) {
      KeepState = other.KeepState;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::Room();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.Type != global::TypeDevice.SwitchLight) {
      Type = other.Type;
    }
    if (other.ShowHome != false) {
      ShowHome = other.ShowHome;
    }
    if (other.AutoOff != 0) {
      AutoOff = other.AutoOff;
    }
    if (other.groupControl_ != null) {
      if (groupControl_ == null) {
        GroupControl = new global::GroupControl();
      }
      GroupControl.MergeFrom(other.GroupControl);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          NameEn = input.ReadString();
          break;
        }
        case 34: {
          Icon = input.ReadString();
          break;
        }
        case 40: {
          Switcher_ = input.ReadUInt32();
          break;
        }
        case 48: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 56: {
          KeepState = input.ReadUInt32();
          break;
        }
        case 64: {
          Favorite = input.ReadBool();
          break;
        }
        case 72: {
          Order = input.ReadUInt32();
          break;
        }
        case 82: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 90: {
          if (room_ == null) {
            Room = new global::Room();
          }
          input.ReadMessage(Room);
          break;
        }
        case 96: {
          Type = (global::TypeDevice) input.ReadEnum();
          break;
        }
        case 104: {
          ShowHome = input.ReadBool();
          break;
        }
        case 112: {
          AutoOff = input.ReadUInt32();
          break;
        }
        case 122: {
          if (groupControl_ == null) {
            GroupControl = new global::GroupControl();
          }
          input.ReadMessage(GroupControl);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thiết bị switcher công tắc
/// </summary>
public sealed partial class LedItem : pb::IMessage<LedItem> {
  private static readonly pb::MessageParser<LedItem> _parser = new pb::MessageParser<LedItem>(() => new LedItem());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LedItem> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedItem() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedItem(LedItem other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    icon_ = other.icon_;
    index_ = other.index_;
    brightnessPercent_ = other.brightnessPercent_;
    powerState_ = other.powerState_;
    keepState_ = other.keepState_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    showHome_ = other.showHome_;
    autoOff_ = other.autoOff_;
    groupControl_ = other.groupControl_ != null ? other.groupControl_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedItem Clone() {
    return new LedItem(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 3;
  private string nameEn_ = "";
  /// <summary>
  /// Tên tiếng anh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 4;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 5;
  private uint index_;
  /// <summary>
  /// 1/8/10
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "brightnessPercent" field.</summary>
  public const int BrightnessPercentFieldNumber = 6;
  private int brightnessPercent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BrightnessPercent {
    get { return brightnessPercent_; }
    set {
      brightnessPercent_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 7;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "keepState" field.</summary>
  public const int KeepStateFieldNumber = 8;
  private uint keepState_;
  /// <summary>
  /// 0: Off, 1: On, 2: Keep giữ trạng thái cũ
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint KeepState {
    get { return keepState_; }
    set {
      keepState_ = value;
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 9;
  private bool favorite_;
  /// <summary>
  /// Ưu thích
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 10;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 11;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 12;
  private global::Room room_;
  /// <summary>
  /// Phòng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Room Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "showHome" field.</summary>
  public const int ShowHomeFieldNumber = 13;
  private bool showHome_;
  /// <summary>
  /// Hiển thị trạng thái trang nhà
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowHome {
    get { return showHome_; }
    set {
      showHome_ = value;
    }
  }

  /// <summary>Field number for the "autoOff" field.</summary>
  public const int AutoOffFieldNumber = 14;
  private uint autoOff_;
  /// <summary>
  /// Số phút tự động tắt
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AutoOff {
    get { return autoOff_; }
    set {
      autoOff_ = value;
    }
  }

  /// <summary>Field number for the "groupControl" field.</summary>
  public const int GroupControlFieldNumber = 15;
  private global::GroupControl groupControl_;
  /// <summary>
  /// Nhóm điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupControl GroupControl {
    get { return groupControl_; }
    set {
      groupControl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LedItem);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LedItem other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (Icon != other.Icon) return false;
    if (Index != other.Index) return false;
    if (BrightnessPercent != other.BrightnessPercent) return false;
    if (PowerState != other.PowerState) return false;
    if (KeepState != other.KeepState) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (ShowHome != other.ShowHome) return false;
    if (AutoOff != other.AutoOff) return false;
    if (!object.Equals(GroupControl, other.GroupControl)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (BrightnessPercent != 0) hash ^= BrightnessPercent.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (KeepState != 0) hash ^= KeepState.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (ShowHome != false) hash ^= ShowHome.GetHashCode();
    if (AutoOff != 0) hash ^= AutoOff.GetHashCode();
    if (groupControl_ != null) hash ^= GroupControl.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NameEn);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Icon);
    }
    if (Index != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Index);
    }
    if (BrightnessPercent != 0) {
      output.WriteRawTag(48);
      output.WriteInt32(BrightnessPercent);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(56);
      output.WriteEnum((int) PowerState);
    }
    if (KeepState != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(KeepState);
    }
    if (Favorite != false) {
      output.WriteRawTag(72);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(Device);
    }
    if (room_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(Room);
    }
    if (ShowHome != false) {
      output.WriteRawTag(104);
      output.WriteBool(ShowHome);
    }
    if (AutoOff != 0) {
      output.WriteRawTag(112);
      output.WriteUInt32(AutoOff);
    }
    if (groupControl_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(GroupControl);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (BrightnessPercent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrightnessPercent);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (KeepState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepState);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (ShowHome != false) {
      size += 1 + 1;
    }
    if (AutoOff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoOff);
    }
    if (groupControl_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupControl);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LedItem other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.BrightnessPercent != 0) {
      BrightnessPercent = other.BrightnessPercent;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.KeepState != 0) {
      KeepState = other.KeepState;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::Room();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.ShowHome != false) {
      ShowHome = other.ShowHome;
    }
    if (other.AutoOff != 0) {
      AutoOff = other.AutoOff;
    }
    if (other.groupControl_ != null) {
      if (groupControl_ == null) {
        GroupControl = new global::GroupControl();
      }
      GroupControl.MergeFrom(other.GroupControl);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          NameEn = input.ReadString();
          break;
        }
        case 34: {
          Icon = input.ReadString();
          break;
        }
        case 40: {
          Index = input.ReadUInt32();
          break;
        }
        case 48: {
          BrightnessPercent = input.ReadInt32();
          break;
        }
        case 56: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 64: {
          KeepState = input.ReadUInt32();
          break;
        }
        case 72: {
          Favorite = input.ReadBool();
          break;
        }
        case 80: {
          Order = input.ReadUInt32();
          break;
        }
        case 90: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 98: {
          if (room_ == null) {
            Room = new global::Room();
          }
          input.ReadMessage(Room);
          break;
        }
        case 104: {
          ShowHome = input.ReadBool();
          break;
        }
        case 112: {
          AutoOff = input.ReadUInt32();
          break;
        }
        case 122: {
          if (groupControl_ == null) {
            GroupControl = new global::GroupControl();
          }
          input.ReadMessage(GroupControl);
          break;
        }
      }
    }
  }

}

public sealed partial class LedDriver : pb::IMessage<LedDriver> {
  private static readonly pb::MessageParser<LedDriver> _parser = new pb::MessageParser<LedDriver>(() => new LedDriver());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LedDriver> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriver() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriver(LedDriver other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    icon_ = other.icon_;
    ledItems_ = other.ledItems_.Clone();
    device_ = other.device_ != null ? other.device_.Clone() : null;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    powerState_ = other.powerState_;
    brightnessPercent_ = other.brightnessPercent_;
    groupControl_ = other.groupControl_ != null ? other.groupControl_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriver Clone() {
    return new LedDriver(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 3;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 4;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ledItems" field.</summary>
  public const int LedItemsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::LedItem> _repeated_ledItems_codec
      = pb::FieldCodec.ForMessage(42, global::LedItem.Parser);
  private readonly pbc::RepeatedField<global::LedItem> ledItems_ = new pbc::RepeatedField<global::LedItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LedItem> LedItems {
    get { return ledItems_; }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 6;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 7;
  private global::Room room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Room Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 8;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "brightnessPercent" field.</summary>
  public const int BrightnessPercentFieldNumber = 9;
  private int brightnessPercent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BrightnessPercent {
    get { return brightnessPercent_; }
    set {
      brightnessPercent_ = value;
    }
  }

  /// <summary>Field number for the "groupControl" field.</summary>
  public const int GroupControlFieldNumber = 10;
  private global::GroupControl groupControl_;
  /// <summary>
  /// Nhóm điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupControl GroupControl {
    get { return groupControl_; }
    set {
      groupControl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LedDriver);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LedDriver other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (Icon != other.Icon) return false;
    if(!ledItems_.Equals(other.ledItems_)) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (PowerState != other.PowerState) return false;
    if (BrightnessPercent != other.BrightnessPercent) return false;
    if (!object.Equals(GroupControl, other.GroupControl)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    hash ^= ledItems_.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (BrightnessPercent != 0) hash ^= BrightnessPercent.GetHashCode();
    if (groupControl_ != null) hash ^= GroupControl.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NameEn);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Icon);
    }
    ledItems_.WriteTo(output, _repeated_ledItems_codec);
    if (device_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Device);
    }
    if (room_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Room);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(64);
      output.WriteEnum((int) PowerState);
    }
    if (BrightnessPercent != 0) {
      output.WriteRawTag(72);
      output.WriteInt32(BrightnessPercent);
    }
    if (groupControl_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(GroupControl);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    size += ledItems_.CalculateSize(_repeated_ledItems_codec);
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (BrightnessPercent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrightnessPercent);
    }
    if (groupControl_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupControl);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LedDriver other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    ledItems_.Add(other.ledItems_);
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::Room();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.BrightnessPercent != 0) {
      BrightnessPercent = other.BrightnessPercent;
    }
    if (other.groupControl_ != null) {
      if (groupControl_ == null) {
        GroupControl = new global::GroupControl();
      }
      GroupControl.MergeFrom(other.GroupControl);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          NameEn = input.ReadString();
          break;
        }
        case 34: {
          Icon = input.ReadString();
          break;
        }
        case 42: {
          ledItems_.AddEntriesFrom(input, _repeated_ledItems_codec);
          break;
        }
        case 50: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 58: {
          if (room_ == null) {
            Room = new global::Room();
          }
          input.ReadMessage(Room);
          break;
        }
        case 64: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 72: {
          BrightnessPercent = input.ReadInt32();
          break;
        }
        case 82: {
          if (groupControl_ == null) {
            GroupControl = new global::GroupControl();
          }
          input.ReadMessage(GroupControl);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin về thiết bị bắc cầu để root gửi thông tin đến thiết bị đấy
/// </summary>
public sealed partial class BridgeInfo : pb::IMessage<BridgeInfo> {
  private static readonly pb::MessageParser<BridgeInfo> _parser = new pb::MessageParser<BridgeInfo>(() => new BridgeInfo());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BridgeInfo> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BridgeInfo() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BridgeInfo(BridgeInfo other) : this() {
    targetSwitcher_ = other.targetSwitcher_;
    targetHardwareId_ = other.targetHardwareId_;
    bridgeType_ = other.bridgeType_;
    deviceType_ = other.deviceType_;
    executed_ = other.executed_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BridgeInfo Clone() {
    return new BridgeInfo(this);
  }

  /// <summary>Field number for the "targetSwitcher" field.</summary>
  public const int TargetSwitcherFieldNumber = 1;
  private uint targetSwitcher_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TargetSwitcher {
    get { return targetSwitcher_; }
    set {
      targetSwitcher_ = value;
    }
  }

  /// <summary>Field number for the "targetHardwareId" field.</summary>
  public const int TargetHardwareIdFieldNumber = 2;
  private string targetHardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string TargetHardwareId {
    get { return targetHardwareId_; }
    set {
      targetHardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bridgeType" field.</summary>
  public const int BridgeTypeFieldNumber = 3;
  private uint bridgeType_;
  /// <summary>
  /// 1: Cùng On/Off, 2: Đảo ngược
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint BridgeType {
    get { return bridgeType_; }
    set {
      bridgeType_ = value;
    }
  }

  /// <summary>Field number for the "deviceType" field.</summary>
  public const int DeviceTypeFieldNumber = 4;
  private global::GroupDevice deviceType_ = global::GroupDevice.SwitcherGroup;
  /// <summary>
  /// phân loại device
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupDevice DeviceType {
    get { return deviceType_; }
    set {
      deviceType_ = value;
    }
  }

  /// <summary>Field number for the "executed" field.</summary>
  public const int ExecutedFieldNumber = 5;
  private bool executed_;
  /// <summary>
  /// Xác nhận đã điều khiển offline.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Executed {
    get { return executed_; }
    set {
      executed_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BridgeInfo);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BridgeInfo other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (TargetSwitcher != other.TargetSwitcher) return false;
    if (TargetHardwareId != other.TargetHardwareId) return false;
    if (BridgeType != other.BridgeType) return false;
    if (DeviceType != other.DeviceType) return false;
    if (Executed != other.Executed) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (TargetSwitcher != 0) hash ^= TargetSwitcher.GetHashCode();
    if (TargetHardwareId.Length != 0) hash ^= TargetHardwareId.GetHashCode();
    if (BridgeType != 0) hash ^= BridgeType.GetHashCode();
    if (DeviceType != global::GroupDevice.SwitcherGroup) hash ^= DeviceType.GetHashCode();
    if (Executed != false) hash ^= Executed.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (TargetSwitcher != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(TargetSwitcher);
    }
    if (TargetHardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(TargetHardwareId);
    }
    if (BridgeType != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(BridgeType);
    }
    if (DeviceType != global::GroupDevice.SwitcherGroup) {
      output.WriteRawTag(32);
      output.WriteEnum((int) DeviceType);
    }
    if (Executed != false) {
      output.WriteRawTag(40);
      output.WriteBool(Executed);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (TargetSwitcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TargetSwitcher);
    }
    if (TargetHardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(TargetHardwareId);
    }
    if (BridgeType != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(BridgeType);
    }
    if (DeviceType != global::GroupDevice.SwitcherGroup) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) DeviceType);
    }
    if (Executed != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BridgeInfo other) {
    if (other == null) {
      return;
    }
    if (other.TargetSwitcher != 0) {
      TargetSwitcher = other.TargetSwitcher;
    }
    if (other.TargetHardwareId.Length != 0) {
      TargetHardwareId = other.TargetHardwareId;
    }
    if (other.BridgeType != 0) {
      BridgeType = other.BridgeType;
    }
    if (other.DeviceType != global::GroupDevice.SwitcherGroup) {
      DeviceType = other.DeviceType;
    }
    if (other.Executed != false) {
      Executed = other.Executed;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          TargetSwitcher = input.ReadUInt32();
          break;
        }
        case 18: {
          TargetHardwareId = input.ReadString();
          break;
        }
        case 24: {
          BridgeType = input.ReadUInt32();
          break;
        }
        case 32: {
          DeviceType = (global::GroupDevice) input.ReadEnum();
          break;
        }
        case 40: {
          Executed = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thiết bị rèm cửa
/// </summary>
public sealed partial class CurtainSwitcher : pb::IMessage<CurtainSwitcher> {
  private static readonly pb::MessageParser<CurtainSwitcher> _parser = new pb::MessageParser<CurtainSwitcher>(() => new CurtainSwitcher());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurtainSwitcher> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcher() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcher(CurtainSwitcher other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    icon_ = other.icon_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    percentIn_ = other.percentIn_;
    percentOut_ = other.percentOut_;
    nameEn_ = other.nameEn_;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    showHome_ = other.showHome_;
    autoOff_ = other.autoOff_;
    groupControl_ = other.groupControl_ != null ? other.groupControl_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcher Clone() {
    return new CurtainSwitcher(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 3;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 4;
  private bool favorite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 5;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 6;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "percentIn" field.</summary>
  public const int PercentInFieldNumber = 7;
  private uint percentIn_;
  /// <summary>
  /// Phần trăm hướng trong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentIn {
    get { return percentIn_; }
    set {
      percentIn_ = value;
    }
  }

  /// <summary>Field number for the "percentOut" field.</summary>
  public const int PercentOutFieldNumber = 8;
  private uint percentOut_;
  /// <summary>
  /// Phần trăm hướng ngoài
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentOut {
    get { return percentOut_; }
    set {
      percentOut_ = value;
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 9;
  private string nameEn_ = "";
  /// <summary>
  /// Tên tiếng anh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 10;
  private global::Room room_;
  /// <summary>
  /// Phòng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Room Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "showHome" field.</summary>
  public const int ShowHomeFieldNumber = 11;
  private bool showHome_;
  /// <summary>
  /// Hiển thị trạng thái trang nhà
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowHome {
    get { return showHome_; }
    set {
      showHome_ = value;
    }
  }

  /// <summary>Field number for the "autoOff" field.</summary>
  public const int AutoOffFieldNumber = 12;
  private uint autoOff_;
  /// <summary>
  /// Số phút tự động tắt
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AutoOff {
    get { return autoOff_; }
    set {
      autoOff_ = value;
    }
  }

  /// <summary>Field number for the "groupControl" field.</summary>
  public const int GroupControlFieldNumber = 13;
  private global::GroupControl groupControl_;
  /// <summary>
  /// Nhóm điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupControl GroupControl {
    get { return groupControl_; }
    set {
      groupControl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurtainSwitcher);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurtainSwitcher other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Icon != other.Icon) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (PercentIn != other.PercentIn) return false;
    if (PercentOut != other.PercentOut) return false;
    if (NameEn != other.NameEn) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (ShowHome != other.ShowHome) return false;
    if (AutoOff != other.AutoOff) return false;
    if (!object.Equals(GroupControl, other.GroupControl)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (PercentIn != 0) hash ^= PercentIn.GetHashCode();
    if (PercentOut != 0) hash ^= PercentOut.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (ShowHome != false) hash ^= ShowHome.GetHashCode();
    if (AutoOff != 0) hash ^= AutoOff.GetHashCode();
    if (groupControl_ != null) hash ^= GroupControl.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Icon);
    }
    if (Favorite != false) {
      output.WriteRawTag(32);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(Device);
    }
    if (PercentIn != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(PercentIn);
    }
    if (PercentOut != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(PercentOut);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(NameEn);
    }
    if (room_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(Room);
    }
    if (ShowHome != false) {
      output.WriteRawTag(88);
      output.WriteBool(ShowHome);
    }
    if (AutoOff != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(AutoOff);
    }
    if (groupControl_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(GroupControl);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (PercentIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentIn);
    }
    if (PercentOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentOut);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (ShowHome != false) {
      size += 1 + 1;
    }
    if (AutoOff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoOff);
    }
    if (groupControl_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GroupControl);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurtainSwitcher other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.PercentIn != 0) {
      PercentIn = other.PercentIn;
    }
    if (other.PercentOut != 0) {
      PercentOut = other.PercentOut;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::Room();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.ShowHome != false) {
      ShowHome = other.ShowHome;
    }
    if (other.AutoOff != 0) {
      AutoOff = other.AutoOff;
    }
    if (other.groupControl_ != null) {
      if (groupControl_ == null) {
        GroupControl = new global::GroupControl();
      }
      GroupControl.MergeFrom(other.GroupControl);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Icon = input.ReadString();
          break;
        }
        case 32: {
          Favorite = input.ReadBool();
          break;
        }
        case 40: {
          Order = input.ReadUInt32();
          break;
        }
        case 50: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 56: {
          PercentIn = input.ReadUInt32();
          break;
        }
        case 64: {
          PercentOut = input.ReadUInt32();
          break;
        }
        case 74: {
          NameEn = input.ReadString();
          break;
        }
        case 82: {
          if (room_ == null) {
            Room = new global::Room();
          }
          input.ReadMessage(Room);
          break;
        }
        case 88: {
          ShowHome = input.ReadBool();
          break;
        }
        case 96: {
          AutoOff = input.ReadUInt32();
          break;
        }
        case 106: {
          if (groupControl_ == null) {
            GroupControl = new global::GroupControl();
          }
          input.ReadMessage(GroupControl);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thiết bị chuyển động
/// </summary>
public sealed partial class Motion : pb::IMessage<Motion> {
  private static readonly pb::MessageParser<Motion> _parser = new pb::MessageParser<Motion>(() => new Motion());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Motion> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Motion() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Motion(Motion other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    icon_ = other.icon_;
    state_ = other.state_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    nameEn_ = other.nameEn_;
    type_ = other.type_;
    battery_ = other.battery_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Motion Clone() {
    return new Motion(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 3;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private global::MotionState state_ = global::MotionState.MotionNone;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 5;
  private bool favorite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 6;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 7;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 8;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 9;
  private global::MotionSensorType type_ = global::MotionSensorType.MotionSensor;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionSensorType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "battery" field.</summary>
  public const int BatteryFieldNumber = 10;
  private uint battery_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Battery {
    get { return battery_; }
    set {
      battery_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Motion);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Motion other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Icon != other.Icon) return false;
    if (State != other.State) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (NameEn != other.NameEn) return false;
    if (Type != other.Type) return false;
    if (Battery != other.Battery) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (State != global::MotionState.MotionNone) hash ^= State.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (Type != global::MotionSensorType.MotionSensor) hash ^= Type.GetHashCode();
    if (Battery != 0) hash ^= Battery.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Icon);
    }
    if (State != global::MotionState.MotionNone) {
      output.WriteRawTag(32);
      output.WriteEnum((int) State);
    }
    if (Favorite != false) {
      output.WriteRawTag(40);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(Device);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(NameEn);
    }
    if (Type != global::MotionSensorType.MotionSensor) {
      output.WriteRawTag(72);
      output.WriteEnum((int) Type);
    }
    if (Battery != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(Battery);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (State != global::MotionState.MotionNone) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (Type != global::MotionSensorType.MotionSensor) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Battery != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Battery);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Motion other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.State != global::MotionState.MotionNone) {
      State = other.State;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.Type != global::MotionSensorType.MotionSensor) {
      Type = other.Type;
    }
    if (other.Battery != 0) {
      Battery = other.Battery;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Icon = input.ReadString();
          break;
        }
        case 32: {
          State = (global::MotionState) input.ReadEnum();
          break;
        }
        case 40: {
          Favorite = input.ReadBool();
          break;
        }
        case 48: {
          Order = input.ReadUInt32();
          break;
        }
        case 58: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 66: {
          NameEn = input.ReadString();
          break;
        }
        case 72: {
          Type = (global::MotionSensorType) input.ReadEnum();
          break;
        }
        case 80: {
          Battery = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thiết bị chuyển động
/// </summary>
public sealed partial class Homekit : pb::IMessage<Homekit> {
  private static readonly pb::MessageParser<Homekit> _parser = new pb::MessageParser<Homekit>(() => new Homekit());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Homekit> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Homekit() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Homekit(Homekit other) : this() {
    id_ = other.id_;
    icon_ = other.icon_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    mode_ = other.mode_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Homekit Clone() {
    return new Homekit(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 2;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 4;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 5;
  private global::HomekitMode mode_ = global::HomekitMode.HomekitNormalMode;
  /// <summary>
  /// Bật|Tắt or On|Off
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HomekitMode Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 6;
  private bool favorite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 7;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 8;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Homekit);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Homekit other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Icon != other.Icon) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (Mode != other.Mode) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (Mode != global::HomekitMode.HomekitNormalMode) hash ^= Mode.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Icon);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(NameEn);
    }
    if (Mode != global::HomekitMode.HomekitNormalMode) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Mode);
    }
    if (Favorite != false) {
      output.WriteRawTag(48);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Device);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (Mode != global::HomekitMode.HomekitNormalMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Homekit other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.Mode != global::HomekitMode.HomekitNormalMode) {
      Mode = other.Mode;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Icon = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          NameEn = input.ReadString();
          break;
        }
        case 40: {
          Mode = (global::HomekitMode) input.ReadEnum();
          break;
        }
        case 48: {
          Favorite = input.ReadBool();
          break;
        }
        case 56: {
          Order = input.ReadUInt32();
          break;
        }
        case 66: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thiết bị remote chung
/// </summary>
public sealed partial class Remote : pb::IMessage<Remote> {
  private static readonly pb::MessageParser<Remote> _parser = new pb::MessageParser<Remote>(() => new Remote());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Remote> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Remote() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Remote(Remote other) : this() {
    id_ = other.id_;
    remoteLibraryId_ = other.remoteLibraryId_;
    deviceId_ = other.deviceId_;
    name_ = other.name_;
    icon_ = other.icon_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    library_ = other.library_ != null ? other.library_.Clone() : null;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    state_ = other.state_ != null ? other.state_.Clone() : null;
    nameEn_ = other.nameEn_;
    roomId_ = other.roomId_;
    roomName_ = other.roomName_;
    showHome_ = other.showHome_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Remote Clone() {
    return new Remote(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteLibraryId" field.</summary>
  public const int RemoteLibraryIdFieldNumber = 2;
  private string remoteLibraryId_ = "";
  /// <summary>
  /// id của thư viện remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteLibraryId {
    get { return remoteLibraryId_; }
    set {
      remoteLibraryId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 3;
  private string deviceId_ = "";
  /// <summary>
  /// Id của thiết bị thu phát của remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 4;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 5;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 6;
  private bool favorite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 7;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "library" field.</summary>
  public const int LibraryFieldNumber = 8;
  private global::RemoteLibrary library_;
  /// <summary>
  /// Thư viện remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RemoteLibrary Library {
    get { return library_; }
    set {
      library_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 9;
  private global::Device device_;
  /// <summary>
  /// Thiết bị thu phát của remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 10;
  private global::AirConditionerState state_;
  /// <summary>
  /// State của điều hòa
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 11;
  private string nameEn_ = "";
  /// <summary>
  /// Tên tiếng anh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomId" field.</summary>
  public const int RoomIdFieldNumber = 12;
  private string roomId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomId {
    get { return roomId_; }
    set {
      roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomName" field.</summary>
  public const int RoomNameFieldNumber = 13;
  private string roomName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomName {
    get { return roomName_; }
    set {
      roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "showHome" field.</summary>
  public const int ShowHomeFieldNumber = 14;
  private bool showHome_;
  /// <summary>
  /// Hiển thị trạng thái trang nhà
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowHome {
    get { return showHome_; }
    set {
      showHome_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Remote);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Remote other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (RemoteLibraryId != other.RemoteLibraryId) return false;
    if (DeviceId != other.DeviceId) return false;
    if (Name != other.Name) return false;
    if (Icon != other.Icon) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Library, other.Library)) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (!object.Equals(State, other.State)) return false;
    if (NameEn != other.NameEn) return false;
    if (RoomId != other.RoomId) return false;
    if (RoomName != other.RoomName) return false;
    if (ShowHome != other.ShowHome) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (RemoteLibraryId.Length != 0) hash ^= RemoteLibraryId.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (library_ != null) hash ^= Library.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (state_ != null) hash ^= State.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
    if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
    if (ShowHome != false) hash ^= ShowHome.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (RemoteLibraryId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RemoteLibraryId);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DeviceId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Name);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Icon);
    }
    if (Favorite != false) {
      output.WriteRawTag(48);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Order);
    }
    if (library_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Library);
    }
    if (device_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(Device);
    }
    if (state_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(State);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(NameEn);
    }
    if (RoomId.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(RoomId);
    }
    if (RoomName.Length != 0) {
      output.WriteRawTag(106);
      output.WriteString(RoomName);
    }
    if (ShowHome != false) {
      output.WriteRawTag(112);
      output.WriteBool(ShowHome);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (RemoteLibraryId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteLibraryId);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (library_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Library);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (state_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (RoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
    }
    if (RoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
    }
    if (ShowHome != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Remote other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.RemoteLibraryId.Length != 0) {
      RemoteLibraryId = other.RemoteLibraryId;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.library_ != null) {
      if (library_ == null) {
        Library = new global::RemoteLibrary();
      }
      Library.MergeFrom(other.Library);
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.state_ != null) {
      if (state_ == null) {
        State = new global::AirConditionerState();
      }
      State.MergeFrom(other.State);
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.RoomId.Length != 0) {
      RoomId = other.RoomId;
    }
    if (other.RoomName.Length != 0) {
      RoomName = other.RoomName;
    }
    if (other.ShowHome != false) {
      ShowHome = other.ShowHome;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          RemoteLibraryId = input.ReadString();
          break;
        }
        case 26: {
          DeviceId = input.ReadString();
          break;
        }
        case 34: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          Icon = input.ReadString();
          break;
        }
        case 48: {
          Favorite = input.ReadBool();
          break;
        }
        case 56: {
          Order = input.ReadUInt32();
          break;
        }
        case 66: {
          if (library_ == null) {
            Library = new global::RemoteLibrary();
          }
          input.ReadMessage(Library);
          break;
        }
        case 74: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 82: {
          if (state_ == null) {
            State = new global::AirConditionerState();
          }
          input.ReadMessage(State);
          break;
        }
        case 90: {
          NameEn = input.ReadString();
          break;
        }
        case 98: {
          RoomId = input.ReadString();
          break;
        }
        case 106: {
          RoomName = input.ReadString();
          break;
        }
        case 112: {
          ShowHome = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class Button : pb::IMessage<Button> {
  private static readonly pb::MessageParser<Button> _parser = new pb::MessageParser<Button>(() => new Button());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Button> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Button() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Button(Button other) : this() {
    id_ = other.id_;
    icon_ = other.icon_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    buttonState_ = other.buttonState_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    index_ = other.index_;
    battery_ = other.battery_;
    roomId_ = other.roomId_;
    roomName_ = other.roomName_;
    showHome_ = other.showHome_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Button Clone() {
    return new Button(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 2;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 4;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "buttonState" field.</summary>
  public const int ButtonStateFieldNumber = 5;
  private global::ButtonState buttonState_ = global::ButtonState.Nothing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ButtonState ButtonState {
    get { return buttonState_; }
    set {
      buttonState_ = value;
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 6;
  private bool favorite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 7;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 8;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 9;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "battery" field.</summary>
  public const int BatteryFieldNumber = 10;
  private uint battery_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Battery {
    get { return battery_; }
    set {
      battery_ = value;
    }
  }

  /// <summary>Field number for the "roomId" field.</summary>
  public const int RoomIdFieldNumber = 11;
  private string roomId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomId {
    get { return roomId_; }
    set {
      roomId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "roomName" field.</summary>
  public const int RoomNameFieldNumber = 12;
  private string roomName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RoomName {
    get { return roomName_; }
    set {
      roomName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "showHome" field.</summary>
  public const int ShowHomeFieldNumber = 13;
  private bool showHome_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowHome {
    get { return showHome_; }
    set {
      showHome_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Button);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Button other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Icon != other.Icon) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (ButtonState != other.ButtonState) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (Index != other.Index) return false;
    if (Battery != other.Battery) return false;
    if (RoomId != other.RoomId) return false;
    if (RoomName != other.RoomName) return false;
    if (ShowHome != other.ShowHome) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (ButtonState != global::ButtonState.Nothing) hash ^= ButtonState.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Battery != 0) hash ^= Battery.GetHashCode();
    if (RoomId.Length != 0) hash ^= RoomId.GetHashCode();
    if (RoomName.Length != 0) hash ^= RoomName.GetHashCode();
    if (ShowHome != false) hash ^= ShowHome.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Icon);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(NameEn);
    }
    if (ButtonState != global::ButtonState.Nothing) {
      output.WriteRawTag(40);
      output.WriteEnum((int) ButtonState);
    }
    if (Favorite != false) {
      output.WriteRawTag(48);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Device);
    }
    if (Index != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(Index);
    }
    if (Battery != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(Battery);
    }
    if (RoomId.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(RoomId);
    }
    if (RoomName.Length != 0) {
      output.WriteRawTag(98);
      output.WriteString(RoomName);
    }
    if (ShowHome != false) {
      output.WriteRawTag(104);
      output.WriteBool(ShowHome);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (ButtonState != global::ButtonState.Nothing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ButtonState);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Battery != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Battery);
    }
    if (RoomId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomId);
    }
    if (RoomName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomName);
    }
    if (ShowHome != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Button other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.ButtonState != global::ButtonState.Nothing) {
      ButtonState = other.ButtonState;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Battery != 0) {
      Battery = other.Battery;
    }
    if (other.RoomId.Length != 0) {
      RoomId = other.RoomId;
    }
    if (other.RoomName.Length != 0) {
      RoomName = other.RoomName;
    }
    if (other.ShowHome != false) {
      ShowHome = other.ShowHome;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Icon = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          NameEn = input.ReadString();
          break;
        }
        case 40: {
          ButtonState = (global::ButtonState) input.ReadEnum();
          break;
        }
        case 48: {
          Favorite = input.ReadBool();
          break;
        }
        case 56: {
          Order = input.ReadUInt32();
          break;
        }
        case 66: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 72: {
          Index = input.ReadUInt32();
          break;
        }
        case 80: {
          Battery = input.ReadUInt32();
          break;
        }
        case 90: {
          RoomId = input.ReadString();
          break;
        }
        case 98: {
          RoomName = input.ReadString();
          break;
        }
        case 104: {
          ShowHome = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thư viện remote
/// </summary>
public sealed partial class RemoteLibrary : pb::IMessage<RemoteLibrary> {
  private static readonly pb::MessageParser<RemoteLibrary> _parser = new pb::MessageParser<RemoteLibrary>(() => new RemoteLibrary());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemoteLibrary> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteLibrary() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteLibrary(RemoteLibrary other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    icon_ = other.icon_;
    model_ = other.model_;
    uiRemoteTemplate_ = other.uiRemoteTemplate_;
    appVersion_ = other.appVersion_;
    group_ = other.group_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteLibrary Clone() {
    return new RemoteLibrary(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 3;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "model" field.</summary>
  public const int ModelFieldNumber = 4;
  private string model_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Model {
    get { return model_; }
    set {
      model_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "uiRemoteTemplate" field.</summary>
  public const int UiRemoteTemplateFieldNumber = 5;
  private uint uiRemoteTemplate_;
  /// <summary>
  /// UI Remote Template
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UiRemoteTemplate {
    get { return uiRemoteTemplate_; }
    set {
      uiRemoteTemplate_ = value;
    }
  }

  /// <summary>Field number for the "appVersion" field.</summary>
  public const int AppVersionFieldNumber = 6;
  private string appVersion_ = "";
  /// <summary>
  /// Version của app
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string AppVersion {
    get { return appVersion_; }
    set {
      appVersion_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "group" field.</summary>
  public const int GroupFieldNumber = 7;
  private global::GroupRemote group_ = global::GroupRemote.AirConditioner;
  /// <summary>
  /// Nhóm remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupRemote Group {
    get { return group_; }
    set {
      group_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemoteLibrary);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemoteLibrary other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (Icon != other.Icon) return false;
    if (Model != other.Model) return false;
    if (UiRemoteTemplate != other.UiRemoteTemplate) return false;
    if (AppVersion != other.AppVersion) return false;
    if (Group != other.Group) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Model.Length != 0) hash ^= Model.GetHashCode();
    if (UiRemoteTemplate != 0) hash ^= UiRemoteTemplate.GetHashCode();
    if (AppVersion.Length != 0) hash ^= AppVersion.GetHashCode();
    if (Group != global::GroupRemote.AirConditioner) hash ^= Group.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Icon);
    }
    if (Model.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Model);
    }
    if (UiRemoteTemplate != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(UiRemoteTemplate);
    }
    if (AppVersion.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(AppVersion);
    }
    if (Group != global::GroupRemote.AirConditioner) {
      output.WriteRawTag(56);
      output.WriteEnum((int) Group);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Model.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Model);
    }
    if (UiRemoteTemplate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UiRemoteTemplate);
    }
    if (AppVersion.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(AppVersion);
    }
    if (Group != global::GroupRemote.AirConditioner) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Group);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemoteLibrary other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Model.Length != 0) {
      Model = other.Model;
    }
    if (other.UiRemoteTemplate != 0) {
      UiRemoteTemplate = other.UiRemoteTemplate;
    }
    if (other.AppVersion.Length != 0) {
      AppVersion = other.AppVersion;
    }
    if (other.Group != global::GroupRemote.AirConditioner) {
      Group = other.Group;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          Icon = input.ReadString();
          break;
        }
        case 34: {
          Model = input.ReadString();
          break;
        }
        case 40: {
          UiRemoteTemplate = input.ReadUInt32();
          break;
        }
        case 50: {
          AppVersion = input.ReadString();
          break;
        }
        case 56: {
          Group = (global::GroupRemote) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Remote đa năng
/// </summary>
public sealed partial class RemoteMulti : pb::IMessage<RemoteMulti> {
  private static readonly pb::MessageParser<RemoteMulti> _parser = new pb::MessageParser<RemoteMulti>(() => new RemoteMulti());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemoteMulti> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteMulti() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteMulti(RemoteMulti other) : this() {
    id_ = other.id_;
    remoteId_ = other.remoteId_;
    name_ = other.name_;
    remoteMultiLibraryCmds_ = other.remoteMultiLibraryCmds_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteMulti Clone() {
    return new RemoteMulti(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteId" field.</summary>
  public const int RemoteIdFieldNumber = 2;
  private string remoteId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteId {
    get { return remoteId_; }
    set {
      remoteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteMultiLibraryCmds" field.</summary>
  public const int RemoteMultiLibraryCmdsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::RemoteMultiLibraryCmd> _repeated_remoteMultiLibraryCmds_codec
      = pb::FieldCodec.ForMessage(42, global::RemoteMultiLibraryCmd.Parser);
  private readonly pbc::RepeatedField<global::RemoteMultiLibraryCmd> remoteMultiLibraryCmds_ = new pbc::RepeatedField<global::RemoteMultiLibraryCmd>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RemoteMultiLibraryCmd> RemoteMultiLibraryCmds {
    get { return remoteMultiLibraryCmds_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemoteMulti);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemoteMulti other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (RemoteId != other.RemoteId) return false;
    if (Name != other.Name) return false;
    if(!remoteMultiLibraryCmds_.Equals(other.remoteMultiLibraryCmds_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (RemoteId.Length != 0) hash ^= RemoteId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    hash ^= remoteMultiLibraryCmds_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (RemoteId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RemoteId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    remoteMultiLibraryCmds_.WriteTo(output, _repeated_remoteMultiLibraryCmds_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (RemoteId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    size += remoteMultiLibraryCmds_.CalculateSize(_repeated_remoteMultiLibraryCmds_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemoteMulti other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.RemoteId.Length != 0) {
      RemoteId = other.RemoteId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    remoteMultiLibraryCmds_.Add(other.remoteMultiLibraryCmds_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          RemoteId = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 42: {
          remoteMultiLibraryCmds_.AddEntriesFrom(input, _repeated_remoteMultiLibraryCmds_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Remote nút lệnh đa năng
/// </summary>
public sealed partial class RemoteMultiLibraryCmd : pb::IMessage<RemoteMultiLibraryCmd> {
  private static readonly pb::MessageParser<RemoteMultiLibraryCmd> _parser = new pb::MessageParser<RemoteMultiLibraryCmd>(() => new RemoteMultiLibraryCmd());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemoteMultiLibraryCmd> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteMultiLibraryCmd() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteMultiLibraryCmd(RemoteMultiLibraryCmd other) : this() {
    id_ = other.id_;
    remoteMultiId_ = other.remoteMultiId_;
    name_ = other.name_;
    order_ = other.order_;
    type_ = other.type_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteMultiLibraryCmd Clone() {
    return new RemoteMultiLibraryCmd(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteMultiId" field.</summary>
  public const int RemoteMultiIdFieldNumber = 2;
  private string remoteMultiId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteMultiId {
    get { return remoteMultiId_; }
    set {
      remoteMultiId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 4;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 5;
  private global::TypeLearn type_ = global::TypeLearn.Ir;
  /// <summary>
  /// IR or RF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeLearn Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemoteMultiLibraryCmd);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemoteMultiLibraryCmd other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (RemoteMultiId != other.RemoteMultiId) return false;
    if (Name != other.Name) return false;
    if (Order != other.Order) return false;
    if (Type != other.Type) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (RemoteMultiId.Length != 0) hash ^= RemoteMultiId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (Type != global::TypeLearn.Ir) hash ^= Type.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (RemoteMultiId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RemoteMultiId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (Order != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Order);
    }
    if (Type != global::TypeLearn.Ir) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Type);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (RemoteMultiId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteMultiId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (Type != global::TypeLearn.Ir) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemoteMultiLibraryCmd other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.RemoteMultiId.Length != 0) {
      RemoteMultiId = other.RemoteMultiId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.Type != global::TypeLearn.Ir) {
      Type = other.Type;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          RemoteMultiId = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 32: {
          Order = input.ReadUInt32();
          break;
        }
        case 40: {
          Type = (global::TypeLearn) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin state remote điều hòa, trạng thái phòng trong điều hòa
/// </summary>
public sealed partial class AirConditionerState : pb::IMessage<AirConditionerState> {
  private static readonly pb::MessageParser<AirConditionerState> _parser = new pb::MessageParser<AirConditionerState>(() => new AirConditionerState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerState(AirConditionerState other) : this() {
    remoteId_ = other.remoteId_;
    powerState_ = other.powerState_;
    temperature_ = other.temperature_;
    mode_ = other.mode_;
    swing_ = other.swing_;
    fan_ = other.fan_;
    temperatureRoom_ = other.temperatureRoom_;
    humidityRoom_ = other.humidityRoom_;
    deviceId_ = other.deviceId_;
    connectionState_ = other.connectionState_;
    indoorId_ = other.indoorId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerState Clone() {
    return new AirConditionerState(this);
  }

  /// <summary>Field number for the "remoteId" field.</summary>
  public const int RemoteIdFieldNumber = 1;
  private string remoteId_ = "";
  /// <summary>
  /// Id của remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteId {
    get { return remoteId_; }
    set {
      remoteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 2;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 3;
  private float temperature_;
  /// <summary>
  /// Nhiệt độ Cool/Heat
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 4;
  private global::ModeAc mode_ = global::ModeAc.AutoMode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModeAc Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "swing" field.</summary>
  public const int SwingFieldNumber = 5;
  private global::SwingAc swing_ = global::SwingAc.AutoSwing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwingAc Swing {
    get { return swing_; }
    set {
      swing_ = value;
    }
  }

  /// <summary>Field number for the "fan" field.</summary>
  public const int FanFieldNumber = 6;
  private global::FanAc fan_ = global::FanAc.AutoFan;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FanAc Fan {
    get { return fan_; }
    set {
      fan_ = value;
    }
  }

  /// <summary>Field number for the "temperatureRoom" field.</summary>
  public const int TemperatureRoomFieldNumber = 7;
  private float temperatureRoom_;
  /// <summary>
  /// Nhiệt độ Phòng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float TemperatureRoom {
    get { return temperatureRoom_; }
    set {
      temperatureRoom_ = value;
    }
  }

  /// <summary>Field number for the "humidityRoom" field.</summary>
  public const int HumidityRoomFieldNumber = 8;
  private float humidityRoom_;
  /// <summary>
  /// Độ ẩm phòng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float HumidityRoom {
    get { return humidityRoom_; }
    set {
      humidityRoom_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 9;
  private string deviceId_ = "";
  /// <summary>
  /// DeviceId để cập nhật trạng thái nhiệt độ phòng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connectionState" field.</summary>
  public const int ConnectionStateFieldNumber = 10;
  private global::ConnectionState connectionState_ = global::ConnectionState.Offline;
  /// <summary>
  /// Điều hòa online/offline
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConnectionState ConnectionState {
    get { return connectionState_; }
    set {
      connectionState_ = value;
    }
  }

  /// <summary>Field number for the "indoorId" field.</summary>
  public const int IndoorIdFieldNumber = 11;
  private uint indoorId_;
  /// <summary>
  /// Id của dàn lạnh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IndoorId {
    get { return indoorId_; }
    set {
      indoorId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RemoteId != other.RemoteId) return false;
    if (PowerState != other.PowerState) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
    if (Mode != other.Mode) return false;
    if (Swing != other.Swing) return false;
    if (Fan != other.Fan) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(TemperatureRoom, other.TemperatureRoom)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(HumidityRoom, other.HumidityRoom)) return false;
    if (DeviceId != other.DeviceId) return false;
    if (ConnectionState != other.ConnectionState) return false;
    if (IndoorId != other.IndoorId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RemoteId.Length != 0) hash ^= RemoteId.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
    if (Mode != global::ModeAc.AutoMode) hash ^= Mode.GetHashCode();
    if (Swing != global::SwingAc.AutoSwing) hash ^= Swing.GetHashCode();
    if (Fan != global::FanAc.AutoFan) hash ^= Fan.GetHashCode();
    if (TemperatureRoom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(TemperatureRoom);
    if (HumidityRoom != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(HumidityRoom);
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (ConnectionState != global::ConnectionState.Offline) hash ^= ConnectionState.GetHashCode();
    if (IndoorId != 0) hash ^= IndoorId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RemoteId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RemoteId);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PowerState);
    }
    if (Temperature != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Temperature);
    }
    if (Mode != global::ModeAc.AutoMode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Mode);
    }
    if (Swing != global::SwingAc.AutoSwing) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Swing);
    }
    if (Fan != global::FanAc.AutoFan) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Fan);
    }
    if (TemperatureRoom != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(TemperatureRoom);
    }
    if (HumidityRoom != 0F) {
      output.WriteRawTag(69);
      output.WriteFloat(HumidityRoom);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(DeviceId);
    }
    if (ConnectionState != global::ConnectionState.Offline) {
      output.WriteRawTag(80);
      output.WriteEnum((int) ConnectionState);
    }
    if (IndoorId != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(IndoorId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RemoteId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteId);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (Temperature != 0F) {
      size += 1 + 4;
    }
    if (Mode != global::ModeAc.AutoMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
    }
    if (Swing != global::SwingAc.AutoSwing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Swing);
    }
    if (Fan != global::FanAc.AutoFan) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fan);
    }
    if (TemperatureRoom != 0F) {
      size += 1 + 4;
    }
    if (HumidityRoom != 0F) {
      size += 1 + 4;
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (ConnectionState != global::ConnectionState.Offline) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
    }
    if (IndoorId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndoorId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerState other) {
    if (other == null) {
      return;
    }
    if (other.RemoteId.Length != 0) {
      RemoteId = other.RemoteId;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.Temperature != 0F) {
      Temperature = other.Temperature;
    }
    if (other.Mode != global::ModeAc.AutoMode) {
      Mode = other.Mode;
    }
    if (other.Swing != global::SwingAc.AutoSwing) {
      Swing = other.Swing;
    }
    if (other.Fan != global::FanAc.AutoFan) {
      Fan = other.Fan;
    }
    if (other.TemperatureRoom != 0F) {
      TemperatureRoom = other.TemperatureRoom;
    }
    if (other.HumidityRoom != 0F) {
      HumidityRoom = other.HumidityRoom;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.ConnectionState != global::ConnectionState.Offline) {
      ConnectionState = other.ConnectionState;
    }
    if (other.IndoorId != 0) {
      IndoorId = other.IndoorId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RemoteId = input.ReadString();
          break;
        }
        case 16: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 29: {
          Temperature = input.ReadFloat();
          break;
        }
        case 32: {
          Mode = (global::ModeAc) input.ReadEnum();
          break;
        }
        case 40: {
          Swing = (global::SwingAc) input.ReadEnum();
          break;
        }
        case 48: {
          Fan = (global::FanAc) input.ReadEnum();
          break;
        }
        case 61: {
          TemperatureRoom = input.ReadFloat();
          break;
        }
        case 69: {
          HumidityRoom = input.ReadFloat();
          break;
        }
        case 74: {
          DeviceId = input.ReadString();
          break;
        }
        case 80: {
          ConnectionState = (global::ConnectionState) input.ReadEnum();
          break;
        }
        case 88: {
          IndoorId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin state remote điều hòa, trạng thái phòng trong điều hòa
/// </summary>
public sealed partial class ControlState : pb::IMessage<ControlState> {
  private static readonly pb::MessageParser<ControlState> _parser = new pb::MessageParser<ControlState>(() => new ControlState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ControlState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ControlState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ControlState(ControlState other) : this() {
    controlId_ = other.controlId_;
    group_ = other.group_;
    powerState_ = other.powerState_;
    temperature_ = other.temperature_;
    mode_ = other.mode_;
    swing_ = other.swing_;
    fan_ = other.fan_;
    connectionState_ = other.connectionState_;
    percentIn_ = other.percentIn_;
    percentOut_ = other.percentOut_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ControlState Clone() {
    return new ControlState(this);
  }

  /// <summary>Field number for the "controlId" field.</summary>
  public const int ControlIdFieldNumber = 1;
  private string controlId_ = "";
  /// <summary>
  /// Id của điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ControlId {
    get { return controlId_; }
    set {
      controlId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "group" field.</summary>
  public const int GroupFieldNumber = 2;
  private global::GroupDevice group_ = global::GroupDevice.SwitcherGroup;
  /// <summary>
  /// Nhóm nào
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GroupDevice Group {
    get { return group_; }
    set {
      group_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 3;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 4;
  private float temperature_;
  /// <summary>
  /// Nhiệt độ Cool/Heat
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 5;
  private global::ModeAc mode_ = global::ModeAc.AutoMode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModeAc Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "swing" field.</summary>
  public const int SwingFieldNumber = 6;
  private global::SwingAc swing_ = global::SwingAc.AutoSwing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwingAc Swing {
    get { return swing_; }
    set {
      swing_ = value;
    }
  }

  /// <summary>Field number for the "fan" field.</summary>
  public const int FanFieldNumber = 7;
  private global::FanAc fan_ = global::FanAc.AutoFan;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FanAc Fan {
    get { return fan_; }
    set {
      fan_ = value;
    }
  }

  /// <summary>Field number for the "connectionState" field.</summary>
  public const int ConnectionStateFieldNumber = 8;
  private global::ConnectionState connectionState_ = global::ConnectionState.Offline;
  /// <summary>
  /// Online/offline
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConnectionState ConnectionState {
    get { return connectionState_; }
    set {
      connectionState_ = value;
    }
  }

  /// <summary>Field number for the "percentIn" field.</summary>
  public const int PercentInFieldNumber = 9;
  private uint percentIn_;
  /// <summary>
  /// Phần trăm hướng trong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentIn {
    get { return percentIn_; }
    set {
      percentIn_ = value;
    }
  }

  /// <summary>Field number for the "percentOut" field.</summary>
  public const int PercentOutFieldNumber = 10;
  private uint percentOut_;
  /// <summary>
  /// Phần trăm hướng ngoài
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentOut {
    get { return percentOut_; }
    set {
      percentOut_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ControlState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ControlState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (ControlId != other.ControlId) return false;
    if (Group != other.Group) return false;
    if (PowerState != other.PowerState) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
    if (Mode != other.Mode) return false;
    if (Swing != other.Swing) return false;
    if (Fan != other.Fan) return false;
    if (ConnectionState != other.ConnectionState) return false;
    if (PercentIn != other.PercentIn) return false;
    if (PercentOut != other.PercentOut) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ControlId.Length != 0) hash ^= ControlId.GetHashCode();
    if (Group != global::GroupDevice.SwitcherGroup) hash ^= Group.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
    if (Mode != global::ModeAc.AutoMode) hash ^= Mode.GetHashCode();
    if (Swing != global::SwingAc.AutoSwing) hash ^= Swing.GetHashCode();
    if (Fan != global::FanAc.AutoFan) hash ^= Fan.GetHashCode();
    if (ConnectionState != global::ConnectionState.Offline) hash ^= ConnectionState.GetHashCode();
    if (PercentIn != 0) hash ^= PercentIn.GetHashCode();
    if (PercentOut != 0) hash ^= PercentOut.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ControlId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(ControlId);
    }
    if (Group != global::GroupDevice.SwitcherGroup) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Group);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(24);
      output.WriteEnum((int) PowerState);
    }
    if (Temperature != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Temperature);
    }
    if (Mode != global::ModeAc.AutoMode) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Mode);
    }
    if (Swing != global::SwingAc.AutoSwing) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Swing);
    }
    if (Fan != global::FanAc.AutoFan) {
      output.WriteRawTag(56);
      output.WriteEnum((int) Fan);
    }
    if (ConnectionState != global::ConnectionState.Offline) {
      output.WriteRawTag(64);
      output.WriteEnum((int) ConnectionState);
    }
    if (PercentIn != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(PercentIn);
    }
    if (PercentOut != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(PercentOut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ControlId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(ControlId);
    }
    if (Group != global::GroupDevice.SwitcherGroup) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Group);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (Temperature != 0F) {
      size += 1 + 4;
    }
    if (Mode != global::ModeAc.AutoMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
    }
    if (Swing != global::SwingAc.AutoSwing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Swing);
    }
    if (Fan != global::FanAc.AutoFan) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fan);
    }
    if (ConnectionState != global::ConnectionState.Offline) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
    }
    if (PercentIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentIn);
    }
    if (PercentOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentOut);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ControlState other) {
    if (other == null) {
      return;
    }
    if (other.ControlId.Length != 0) {
      ControlId = other.ControlId;
    }
    if (other.Group != global::GroupDevice.SwitcherGroup) {
      Group = other.Group;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.Temperature != 0F) {
      Temperature = other.Temperature;
    }
    if (other.Mode != global::ModeAc.AutoMode) {
      Mode = other.Mode;
    }
    if (other.Swing != global::SwingAc.AutoSwing) {
      Swing = other.Swing;
    }
    if (other.Fan != global::FanAc.AutoFan) {
      Fan = other.Fan;
    }
    if (other.ConnectionState != global::ConnectionState.Offline) {
      ConnectionState = other.ConnectionState;
    }
    if (other.PercentIn != 0) {
      PercentIn = other.PercentIn;
    }
    if (other.PercentOut != 0) {
      PercentOut = other.PercentOut;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          ControlId = input.ReadString();
          break;
        }
        case 16: {
          Group = (global::GroupDevice) input.ReadEnum();
          break;
        }
        case 24: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 37: {
          Temperature = input.ReadFloat();
          break;
        }
        case 40: {
          Mode = (global::ModeAc) input.ReadEnum();
          break;
        }
        case 48: {
          Swing = (global::SwingAc) input.ReadEnum();
          break;
        }
        case 56: {
          Fan = (global::FanAc) input.ReadEnum();
          break;
        }
        case 64: {
          ConnectionState = (global::ConnectionState) input.ReadEnum();
          break;
        }
        case 72: {
          PercentIn = input.ReadUInt32();
          break;
        }
        case 80: {
          PercentOut = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin nhà
/// </summary>
public sealed partial class Home : pb::IMessage<Home> {
  private static readonly pb::MessageParser<Home> _parser = new pb::MessageParser<Home>(() => new Home());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Home> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Home() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Home(Home other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    backgroundName_ = other.backgroundName_;
    longitude_ = other.longitude_;
    latitude_ = other.latitude_;
    isOwner_ = other.isOwner_;
    isDefault_ = other.isDefault_;
    fullNameSharer_ = other.fullNameSharer_;
    users_ = other.users_.Clone();
    featureCode_ = other.featureCode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Home Clone() {
    return new Home(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 3;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "backgroundName" field.</summary>
  public const int BackgroundNameFieldNumber = 4;
  private string backgroundName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BackgroundName {
    get { return backgroundName_; }
    set {
      backgroundName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "longitude" field.</summary>
  public const int LongitudeFieldNumber = 5;
  private float longitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Longitude {
    get { return longitude_; }
    set {
      longitude_ = value;
    }
  }

  /// <summary>Field number for the "latitude" field.</summary>
  public const int LatitudeFieldNumber = 6;
  private float latitude_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Latitude {
    get { return latitude_; }
    set {
      latitude_ = value;
    }
  }

  /// <summary>Field number for the "isOwner" field.</summary>
  public const int IsOwnerFieldNumber = 7;
  private bool isOwner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsOwner {
    get { return isOwner_; }
    set {
      isOwner_ = value;
    }
  }

  /// <summary>Field number for the "isDefault" field.</summary>
  public const int IsDefaultFieldNumber = 8;
  private bool isDefault_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDefault {
    get { return isDefault_; }
    set {
      isDefault_ = value;
    }
  }

  /// <summary>Field number for the "fullNameSharer" field.</summary>
  public const int FullNameSharerFieldNumber = 9;
  private string fullNameSharer_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FullNameSharer {
    get { return fullNameSharer_; }
    set {
      fullNameSharer_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "users" field.</summary>
  public const int UsersFieldNumber = 10;
  private static readonly pb::FieldCodec<global::UserHome> _repeated_users_codec
      = pb::FieldCodec.ForMessage(82, global::UserHome.Parser);
  private readonly pbc::RepeatedField<global::UserHome> users_ = new pbc::RepeatedField<global::UserHome>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::UserHome> Users {
    get { return users_; }
  }

  /// <summary>Field number for the "featureCode" field.</summary>
  public const int FeatureCodeFieldNumber = 11;
  private uint featureCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint FeatureCode {
    get { return featureCode_; }
    set {
      featureCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Home);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Home other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (BackgroundName != other.BackgroundName) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Longitude, other.Longitude)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Latitude, other.Latitude)) return false;
    if (IsOwner != other.IsOwner) return false;
    if (IsDefault != other.IsDefault) return false;
    if (FullNameSharer != other.FullNameSharer) return false;
    if(!users_.Equals(other.users_)) return false;
    if (FeatureCode != other.FeatureCode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (BackgroundName.Length != 0) hash ^= BackgroundName.GetHashCode();
    if (Longitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Longitude);
    if (Latitude != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Latitude);
    if (IsOwner != false) hash ^= IsOwner.GetHashCode();
    if (IsDefault != false) hash ^= IsDefault.GetHashCode();
    if (FullNameSharer.Length != 0) hash ^= FullNameSharer.GetHashCode();
    hash ^= users_.GetHashCode();
    if (FeatureCode != 0) hash ^= FeatureCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(NameEn);
    }
    if (BackgroundName.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(BackgroundName);
    }
    if (Longitude != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Longitude);
    }
    if (Latitude != 0F) {
      output.WriteRawTag(53);
      output.WriteFloat(Latitude);
    }
    if (IsOwner != false) {
      output.WriteRawTag(56);
      output.WriteBool(IsOwner);
    }
    if (IsDefault != false) {
      output.WriteRawTag(64);
      output.WriteBool(IsDefault);
    }
    if (FullNameSharer.Length != 0) {
      output.WriteRawTag(74);
      output.WriteString(FullNameSharer);
    }
    users_.WriteTo(output, _repeated_users_codec);
    if (FeatureCode != 0) {
      output.WriteRawTag(88);
      output.WriteUInt32(FeatureCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (BackgroundName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundName);
    }
    if (Longitude != 0F) {
      size += 1 + 4;
    }
    if (Latitude != 0F) {
      size += 1 + 4;
    }
    if (IsOwner != false) {
      size += 1 + 1;
    }
    if (IsDefault != false) {
      size += 1 + 1;
    }
    if (FullNameSharer.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FullNameSharer);
    }
    size += users_.CalculateSize(_repeated_users_codec);
    if (FeatureCode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(FeatureCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Home other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.BackgroundName.Length != 0) {
      BackgroundName = other.BackgroundName;
    }
    if (other.Longitude != 0F) {
      Longitude = other.Longitude;
    }
    if (other.Latitude != 0F) {
      Latitude = other.Latitude;
    }
    if (other.IsOwner != false) {
      IsOwner = other.IsOwner;
    }
    if (other.IsDefault != false) {
      IsDefault = other.IsDefault;
    }
    if (other.FullNameSharer.Length != 0) {
      FullNameSharer = other.FullNameSharer;
    }
    users_.Add(other.users_);
    if (other.FeatureCode != 0) {
      FeatureCode = other.FeatureCode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          NameEn = input.ReadString();
          break;
        }
        case 34: {
          BackgroundName = input.ReadString();
          break;
        }
        case 45: {
          Longitude = input.ReadFloat();
          break;
        }
        case 53: {
          Latitude = input.ReadFloat();
          break;
        }
        case 56: {
          IsOwner = input.ReadBool();
          break;
        }
        case 64: {
          IsDefault = input.ReadBool();
          break;
        }
        case 74: {
          FullNameSharer = input.ReadString();
          break;
        }
        case 82: {
          users_.AddEntriesFrom(input, _repeated_users_codec);
          break;
        }
        case 88: {
          FeatureCode = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class User : pb::IMessage<User> {
  private static readonly pb::MessageParser<User> _parser = new pb::MessageParser<User>(() => new User());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<User> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public User() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public User(User other) : this() {
    userId_ = other.userId_;
    avatar_ = other.avatar_;
    fullName_ = other.fullName_;
    email_ = other.email_;
    phoneNumber_ = other.phoneNumber_;
    language_ = other.language_;
    autoSwitchGps_ = other.autoSwitchGps_;
    order_ = other.order_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public User Clone() {
    return new User(this);
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 1;
  private string userId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserId {
    get { return userId_; }
    set {
      userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 2;
  private pb::ByteString avatar_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fullName" field.</summary>
  public const int FullNameFieldNumber = 3;
  private string fullName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FullName {
    get { return fullName_; }
    set {
      fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "email" field.</summary>
  public const int EmailFieldNumber = 4;
  private string email_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Email {
    get { return email_; }
    set {
      email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "phoneNumber" field.</summary>
  public const int PhoneNumberFieldNumber = 5;
  private string phoneNumber_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string PhoneNumber {
    get { return phoneNumber_; }
    set {
      phoneNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "language" field.</summary>
  public const int LanguageFieldNumber = 6;
  private string language_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Language {
    get { return language_; }
    set {
      language_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "autoSwitchGps" field.</summary>
  public const int AutoSwitchGpsFieldNumber = 7;
  private bool autoSwitchGps_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool AutoSwitchGps {
    get { return autoSwitchGps_; }
    set {
      autoSwitchGps_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 100;
  private ulong order_;
  /// <summary>
  /// Số thứ tự của user
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as User);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(User other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UserId != other.UserId) return false;
    if (Avatar != other.Avatar) return false;
    if (FullName != other.FullName) return false;
    if (Email != other.Email) return false;
    if (PhoneNumber != other.PhoneNumber) return false;
    if (Language != other.Language) return false;
    if (AutoSwitchGps != other.AutoSwitchGps) return false;
    if (Order != other.Order) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UserId.Length != 0) hash ^= UserId.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (FullName.Length != 0) hash ^= FullName.GetHashCode();
    if (Email.Length != 0) hash ^= Email.GetHashCode();
    if (PhoneNumber.Length != 0) hash ^= PhoneNumber.GetHashCode();
    if (Language.Length != 0) hash ^= Language.GetHashCode();
    if (AutoSwitchGps != false) hash ^= AutoSwitchGps.GetHashCode();
    if (Order != 0UL) hash ^= Order.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UserId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(UserId);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Avatar);
    }
    if (FullName.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(FullName);
    }
    if (Email.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(Email);
    }
    if (PhoneNumber.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(PhoneNumber);
    }
    if (Language.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Language);
    }
    if (AutoSwitchGps != false) {
      output.WriteRawTag(56);
      output.WriteBool(AutoSwitchGps);
    }
    if (Order != 0UL) {
      output.WriteRawTag(160, 6);
      output.WriteUInt64(Order);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UserId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Avatar);
    }
    if (FullName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
    }
    if (Email.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
    }
    if (PhoneNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(PhoneNumber);
    }
    if (Language.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Language);
    }
    if (AutoSwitchGps != false) {
      size += 1 + 1;
    }
    if (Order != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(Order);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(User other) {
    if (other == null) {
      return;
    }
    if (other.UserId.Length != 0) {
      UserId = other.UserId;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.FullName.Length != 0) {
      FullName = other.FullName;
    }
    if (other.Email.Length != 0) {
      Email = other.Email;
    }
    if (other.PhoneNumber.Length != 0) {
      PhoneNumber = other.PhoneNumber;
    }
    if (other.Language.Length != 0) {
      Language = other.Language;
    }
    if (other.AutoSwitchGps != false) {
      AutoSwitchGps = other.AutoSwitchGps;
    }
    if (other.Order != 0UL) {
      Order = other.Order;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          UserId = input.ReadString();
          break;
        }
        case 18: {
          Avatar = input.ReadBytes();
          break;
        }
        case 26: {
          FullName = input.ReadString();
          break;
        }
        case 34: {
          Email = input.ReadString();
          break;
        }
        case 42: {
          PhoneNumber = input.ReadString();
          break;
        }
        case 50: {
          Language = input.ReadString();
          break;
        }
        case 56: {
          AutoSwitchGps = input.ReadBool();
          break;
        }
        case 800: {
          Order = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thành viên trong nhà
/// </summary>
public sealed partial class UserHome : pb::IMessage<UserHome> {
  private static readonly pb::MessageParser<UserHome> _parser = new pb::MessageParser<UserHome>(() => new UserHome());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserHome> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserHome() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserHome(UserHome other) : this() {
    id_ = other.id_;
    userId_ = other.userId_;
    homeId_ = other.homeId_;
    avatar_ = other.avatar_;
    fullName_ = other.fullName_;
    isOwner_ = other.isOwner_;
    acceptedDate_ = other.acceptedDate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserHome Clone() {
    return new UserHome(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "userId" field.</summary>
  public const int UserIdFieldNumber = 2;
  private string userId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string UserId {
    get { return userId_; }
    set {
      userId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "homeId" field.</summary>
  public const int HomeIdFieldNumber = 3;
  private string homeId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HomeId {
    get { return homeId_; }
    set {
      homeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "avatar" field.</summary>
  public const int AvatarFieldNumber = 4;
  private pb::ByteString avatar_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Avatar {
    get { return avatar_; }
    set {
      avatar_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "fullName" field.</summary>
  public const int FullNameFieldNumber = 5;
  private string fullName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string FullName {
    get { return fullName_; }
    set {
      fullName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "isOwner" field.</summary>
  public const int IsOwnerFieldNumber = 6;
  private bool isOwner_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsOwner {
    get { return isOwner_; }
    set {
      isOwner_ = value;
    }
  }

  /// <summary>Field number for the "acceptedDate" field.</summary>
  public const int AcceptedDateFieldNumber = 7;
  private ulong acceptedDate_;
  /// <summary>
  /// Ngày chấp nhận thành viên
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong AcceptedDate {
    get { return acceptedDate_; }
    set {
      acceptedDate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserHome);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserHome other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (UserId != other.UserId) return false;
    if (HomeId != other.HomeId) return false;
    if (Avatar != other.Avatar) return false;
    if (FullName != other.FullName) return false;
    if (IsOwner != other.IsOwner) return false;
    if (AcceptedDate != other.AcceptedDate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (UserId.Length != 0) hash ^= UserId.GetHashCode();
    if (HomeId.Length != 0) hash ^= HomeId.GetHashCode();
    if (Avatar.Length != 0) hash ^= Avatar.GetHashCode();
    if (FullName.Length != 0) hash ^= FullName.GetHashCode();
    if (IsOwner != false) hash ^= IsOwner.GetHashCode();
    if (AcceptedDate != 0UL) hash ^= AcceptedDate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (UserId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(UserId);
    }
    if (HomeId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HomeId);
    }
    if (Avatar.Length != 0) {
      output.WriteRawTag(34);
      output.WriteBytes(Avatar);
    }
    if (FullName.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(FullName);
    }
    if (IsOwner != false) {
      output.WriteRawTag(48);
      output.WriteBool(IsOwner);
    }
    if (AcceptedDate != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(AcceptedDate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (UserId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(UserId);
    }
    if (HomeId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HomeId);
    }
    if (Avatar.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Avatar);
    }
    if (FullName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(FullName);
    }
    if (IsOwner != false) {
      size += 1 + 1;
    }
    if (AcceptedDate != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(AcceptedDate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserHome other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.UserId.Length != 0) {
      UserId = other.UserId;
    }
    if (other.HomeId.Length != 0) {
      HomeId = other.HomeId;
    }
    if (other.Avatar.Length != 0) {
      Avatar = other.Avatar;
    }
    if (other.FullName.Length != 0) {
      FullName = other.FullName;
    }
    if (other.IsOwner != false) {
      IsOwner = other.IsOwner;
    }
    if (other.AcceptedDate != 0UL) {
      AcceptedDate = other.AcceptedDate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          UserId = input.ReadString();
          break;
        }
        case 26: {
          HomeId = input.ReadString();
          break;
        }
        case 34: {
          Avatar = input.ReadBytes();
          break;
        }
        case 42: {
          FullName = input.ReadString();
          break;
        }
        case 48: {
          IsOwner = input.ReadBool();
          break;
        }
        case 56: {
          AcceptedDate = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Công dân
/// </summary>
public sealed partial class Citizen : pb::IMessage<Citizen> {
  private static readonly pb::MessageParser<Citizen> _parser = new pb::MessageParser<Citizen>(() => new Citizen());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Citizen> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Citizen() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Citizen(Citizen other) : this() {
    homeId_ = other.homeId_;
    project_ = other.project_ != null ? other.project_.Clone() : null;
    building_ = other.building_ != null ? other.building_.Clone() : null;
    floor_ = other.floor_ != null ? other.floor_.Clone() : null;
    apartment_ = other.apartment_ != null ? other.apartment_.Clone() : null;
    receivedDate_ = other.receivedDate_;
    approvedDate_ = other.approvedDate_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Citizen Clone() {
    return new Citizen(this);
  }

  /// <summary>Field number for the "homeId" field.</summary>
  public const int HomeIdFieldNumber = 1;
  private string homeId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HomeId {
    get { return homeId_; }
    set {
      homeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "project" field.</summary>
  public const int ProjectFieldNumber = 2;
  private global::Project project_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Project Project {
    get { return project_; }
    set {
      project_ = value;
    }
  }

  /// <summary>Field number for the "building" field.</summary>
  public const int BuildingFieldNumber = 3;
  private global::Building building_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Building Building {
    get { return building_; }
    set {
      building_ = value;
    }
  }

  /// <summary>Field number for the "floor" field.</summary>
  public const int FloorFieldNumber = 4;
  private global::Floor floor_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Floor Floor {
    get { return floor_; }
    set {
      floor_ = value;
    }
  }

  /// <summary>Field number for the "apartment" field.</summary>
  public const int ApartmentFieldNumber = 5;
  private global::Apartment apartment_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Apartment Apartment {
    get { return apartment_; }
    set {
      apartment_ = value;
    }
  }

  /// <summary>Field number for the "receivedDate" field.</summary>
  public const int ReceivedDateFieldNumber = 6;
  private ulong receivedDate_;
  /// <summary>
  /// Ngày đã nhận unixtime
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ReceivedDate {
    get { return receivedDate_; }
    set {
      receivedDate_ = value;
    }
  }

  /// <summary>Field number for the "approvedDate" field.</summary>
  public const int ApprovedDateFieldNumber = 7;
  private ulong approvedDate_;
  /// <summary>
  /// Ngày đã duyệt nếu chưa có thì đang chờ phê duyệt ngược lại thì đã duyệt
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong ApprovedDate {
    get { return approvedDate_; }
    set {
      approvedDate_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Citizen);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Citizen other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HomeId != other.HomeId) return false;
    if (!object.Equals(Project, other.Project)) return false;
    if (!object.Equals(Building, other.Building)) return false;
    if (!object.Equals(Floor, other.Floor)) return false;
    if (!object.Equals(Apartment, other.Apartment)) return false;
    if (ReceivedDate != other.ReceivedDate) return false;
    if (ApprovedDate != other.ApprovedDate) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HomeId.Length != 0) hash ^= HomeId.GetHashCode();
    if (project_ != null) hash ^= Project.GetHashCode();
    if (building_ != null) hash ^= Building.GetHashCode();
    if (floor_ != null) hash ^= Floor.GetHashCode();
    if (apartment_ != null) hash ^= Apartment.GetHashCode();
    if (ReceivedDate != 0UL) hash ^= ReceivedDate.GetHashCode();
    if (ApprovedDate != 0UL) hash ^= ApprovedDate.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HomeId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HomeId);
    }
    if (project_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Project);
    }
    if (building_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Building);
    }
    if (floor_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Floor);
    }
    if (apartment_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Apartment);
    }
    if (ReceivedDate != 0UL) {
      output.WriteRawTag(48);
      output.WriteUInt64(ReceivedDate);
    }
    if (ApprovedDate != 0UL) {
      output.WriteRawTag(56);
      output.WriteUInt64(ApprovedDate);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HomeId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HomeId);
    }
    if (project_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Project);
    }
    if (building_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Building);
    }
    if (floor_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Floor);
    }
    if (apartment_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Apartment);
    }
    if (ReceivedDate != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ReceivedDate);
    }
    if (ApprovedDate != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(ApprovedDate);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Citizen other) {
    if (other == null) {
      return;
    }
    if (other.HomeId.Length != 0) {
      HomeId = other.HomeId;
    }
    if (other.project_ != null) {
      if (project_ == null) {
        Project = new global::Project();
      }
      Project.MergeFrom(other.Project);
    }
    if (other.building_ != null) {
      if (building_ == null) {
        Building = new global::Building();
      }
      Building.MergeFrom(other.Building);
    }
    if (other.floor_ != null) {
      if (floor_ == null) {
        Floor = new global::Floor();
      }
      Floor.MergeFrom(other.Floor);
    }
    if (other.apartment_ != null) {
      if (apartment_ == null) {
        Apartment = new global::Apartment();
      }
      Apartment.MergeFrom(other.Apartment);
    }
    if (other.ReceivedDate != 0UL) {
      ReceivedDate = other.ReceivedDate;
    }
    if (other.ApprovedDate != 0UL) {
      ApprovedDate = other.ApprovedDate;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HomeId = input.ReadString();
          break;
        }
        case 18: {
          if (project_ == null) {
            Project = new global::Project();
          }
          input.ReadMessage(Project);
          break;
        }
        case 26: {
          if (building_ == null) {
            Building = new global::Building();
          }
          input.ReadMessage(Building);
          break;
        }
        case 34: {
          if (floor_ == null) {
            Floor = new global::Floor();
          }
          input.ReadMessage(Floor);
          break;
        }
        case 42: {
          if (apartment_ == null) {
            Apartment = new global::Apartment();
          }
          input.ReadMessage(Apartment);
          break;
        }
        case 48: {
          ReceivedDate = input.ReadUInt64();
          break;
        }
        case 56: {
          ApprovedDate = input.ReadUInt64();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin phòng
/// </summary>
public sealed partial class Room : pb::IMessage<Room> {
  private static readonly pb::MessageParser<Room> _parser = new pb::MessageParser<Room>(() => new Room());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Room> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Room() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Room(Room other) : this() {
    id_ = other.id_;
    name_ = other.name_;
    home_ = other.home_ != null ? other.home_.Clone() : null;
    devices_ = other.devices_.Clone();
    switchers_ = other.switchers_.Clone();
    curtainSwitchers_ = other.curtainSwitchers_.Clone();
    remotes_ = other.remotes_.Clone();
    motions_ = other.motions_.Clone();
    homekits_ = other.homekits_.Clone();
    nameEn_ = other.nameEn_;
    backgroundName_ = other.backgroundName_;
    buttons_ = other.buttons_.Clone();
    groupControls_ = other.groupControls_.Clone();
    ledItem_ = other.ledItem_.Clone();
    ledDriver_ = other.ledDriver_.Clone();
    lightSensors_ = other.lightSensors_.Clone();
    environmentSensors_ = other.environmentSensors_.Clone();
    smartPlugs_ = other.smartPlugs_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Room Clone() {
    return new Room(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 2;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "home" field.</summary>
  public const int HomeFieldNumber = 3;
  private global::Home home_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Home Home {
    get { return home_; }
    set {
      home_ = value;
    }
  }

  /// <summary>Field number for the "devices" field.</summary>
  public const int DevicesFieldNumber = 4;
  private static readonly pb::FieldCodec<global::Device> _repeated_devices_codec
      = pb::FieldCodec.ForMessage(34, global::Device.Parser);
  private readonly pbc::RepeatedField<global::Device> devices_ = new pbc::RepeatedField<global::Device>();
  /// <summary>
  /// Thiết bị kết nối wifi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Device> Devices {
    get { return devices_; }
  }

  /// <summary>Field number for the "switchers" field.</summary>
  public const int SwitchersFieldNumber = 5;
  private static readonly pb::FieldCodec<global::Switcher> _repeated_switchers_codec
      = pb::FieldCodec.ForMessage(42, global::Switcher.Parser);
  private readonly pbc::RepeatedField<global::Switcher> switchers_ = new pbc::RepeatedField<global::Switcher>();
  /// <summary>
  /// Nút Công tắc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Switcher> Switchers {
    get { return switchers_; }
  }

  /// <summary>Field number for the "curtainSwitchers" field.</summary>
  public const int CurtainSwitchersFieldNumber = 6;
  private static readonly pb::FieldCodec<global::CurtainSwitcher> _repeated_curtainSwitchers_codec
      = pb::FieldCodec.ForMessage(50, global::CurtainSwitcher.Parser);
  private readonly pbc::RepeatedField<global::CurtainSwitcher> curtainSwitchers_ = new pbc::RepeatedField<global::CurtainSwitcher>();
  /// <summary>
  /// Nút Rèm cửa
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::CurtainSwitcher> CurtainSwitchers {
    get { return curtainSwitchers_; }
  }

  /// <summary>Field number for the "remotes" field.</summary>
  public const int RemotesFieldNumber = 7;
  private static readonly pb::FieldCodec<global::Remote> _repeated_remotes_codec
      = pb::FieldCodec.ForMessage(58, global::Remote.Parser);
  private readonly pbc::RepeatedField<global::Remote> remotes_ = new pbc::RepeatedField<global::Remote>();
  /// <summary>
  /// Remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Remote> Remotes {
    get { return remotes_; }
  }

  /// <summary>Field number for the "motions" field.</summary>
  public const int MotionsFieldNumber = 8;
  private static readonly pb::FieldCodec<global::Motion> _repeated_motions_codec
      = pb::FieldCodec.ForMessage(66, global::Motion.Parser);
  private readonly pbc::RepeatedField<global::Motion> motions_ = new pbc::RepeatedField<global::Motion>();
  /// <summary>
  /// Motion
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Motion> Motions {
    get { return motions_; }
  }

  /// <summary>Field number for the "homekits" field.</summary>
  public const int HomekitsFieldNumber = 9;
  private static readonly pb::FieldCodec<global::Homekit> _repeated_homekits_codec
      = pb::FieldCodec.ForMessage(74, global::Homekit.Parser);
  private readonly pbc::RepeatedField<global::Homekit> homekits_ = new pbc::RepeatedField<global::Homekit>();
  /// <summary>
  /// Homekit - Gateway
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Homekit> Homekits {
    get { return homekits_; }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 10;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "backgroundName" field.</summary>
  public const int BackgroundNameFieldNumber = 11;
  private string backgroundName_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string BackgroundName {
    get { return backgroundName_; }
    set {
      backgroundName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "buttons" field.</summary>
  public const int ButtonsFieldNumber = 12;
  private static readonly pb::FieldCodec<global::Button> _repeated_buttons_codec
      = pb::FieldCodec.ForMessage(98, global::Button.Parser);
  private readonly pbc::RepeatedField<global::Button> buttons_ = new pbc::RepeatedField<global::Button>();
  /// <summary>
  /// Nút nhấn
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::Button> Buttons {
    get { return buttons_; }
  }

  /// <summary>Field number for the "groupControls" field.</summary>
  public const int GroupControlsFieldNumber = 13;
  private static readonly pb::FieldCodec<global::GroupControl> _repeated_groupControls_codec
      = pb::FieldCodec.ForMessage(106, global::GroupControl.Parser);
  private readonly pbc::RepeatedField<global::GroupControl> groupControls_ = new pbc::RepeatedField<global::GroupControl>();
  /// <summary>
  /// Thiết bị nhóm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::GroupControl> GroupControls {
    get { return groupControls_; }
  }

  /// <summary>Field number for the "ledItem" field.</summary>
  public const int LedItemFieldNumber = 14;
  private static readonly pb::FieldCodec<global::LedItem> _repeated_ledItem_codec
      = pb::FieldCodec.ForMessage(114, global::LedItem.Parser);
  private readonly pbc::RepeatedField<global::LedItem> ledItem_ = new pbc::RepeatedField<global::LedItem>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LedItem> LedItem {
    get { return ledItem_; }
  }

  /// <summary>Field number for the "ledDriver" field.</summary>
  public const int LedDriverFieldNumber = 15;
  private static readonly pb::FieldCodec<global::LedDriver> _repeated_ledDriver_codec
      = pb::FieldCodec.ForMessage(122, global::LedDriver.Parser);
  private readonly pbc::RepeatedField<global::LedDriver> ledDriver_ = new pbc::RepeatedField<global::LedDriver>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LedDriver> LedDriver {
    get { return ledDriver_; }
  }

  /// <summary>Field number for the "lightSensors" field.</summary>
  public const int LightSensorsFieldNumber = 16;
  private static readonly pb::FieldCodec<global::LightSensor> _repeated_lightSensors_codec
      = pb::FieldCodec.ForMessage(130, global::LightSensor.Parser);
  private readonly pbc::RepeatedField<global::LightSensor> lightSensors_ = new pbc::RepeatedField<global::LightSensor>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LightSensor> LightSensors {
    get { return lightSensors_; }
  }

  /// <summary>Field number for the "environmentSensors" field.</summary>
  public const int EnvironmentSensorsFieldNumber = 17;
  private static readonly pb::FieldCodec<global::EnvironmentSensor> _repeated_environmentSensors_codec
      = pb::FieldCodec.ForMessage(138, global::EnvironmentSensor.Parser);
  private readonly pbc::RepeatedField<global::EnvironmentSensor> environmentSensors_ = new pbc::RepeatedField<global::EnvironmentSensor>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnvironmentSensor> EnvironmentSensors {
    get { return environmentSensors_; }
  }

  /// <summary>Field number for the "smartPlugs" field.</summary>
  public const int SmartPlugsFieldNumber = 18;
  private static readonly pb::FieldCodec<global::SmartPlug> _repeated_smartPlugs_codec
      = pb::FieldCodec.ForMessage(146, global::SmartPlug.Parser);
  private readonly pbc::RepeatedField<global::SmartPlug> smartPlugs_ = new pbc::RepeatedField<global::SmartPlug>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SmartPlug> SmartPlugs {
    get { return smartPlugs_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Room);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Room other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Name != other.Name) return false;
    if (!object.Equals(Home, other.Home)) return false;
    if(!devices_.Equals(other.devices_)) return false;
    if(!switchers_.Equals(other.switchers_)) return false;
    if(!curtainSwitchers_.Equals(other.curtainSwitchers_)) return false;
    if(!remotes_.Equals(other.remotes_)) return false;
    if(!motions_.Equals(other.motions_)) return false;
    if(!homekits_.Equals(other.homekits_)) return false;
    if (NameEn != other.NameEn) return false;
    if (BackgroundName != other.BackgroundName) return false;
    if(!buttons_.Equals(other.buttons_)) return false;
    if(!groupControls_.Equals(other.groupControls_)) return false;
    if(!ledItem_.Equals(other.ledItem_)) return false;
    if(!ledDriver_.Equals(other.ledDriver_)) return false;
    if(!lightSensors_.Equals(other.lightSensors_)) return false;
    if(!environmentSensors_.Equals(other.environmentSensors_)) return false;
    if(!smartPlugs_.Equals(other.smartPlugs_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (home_ != null) hash ^= Home.GetHashCode();
    hash ^= devices_.GetHashCode();
    hash ^= switchers_.GetHashCode();
    hash ^= curtainSwitchers_.GetHashCode();
    hash ^= remotes_.GetHashCode();
    hash ^= motions_.GetHashCode();
    hash ^= homekits_.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (BackgroundName.Length != 0) hash ^= BackgroundName.GetHashCode();
    hash ^= buttons_.GetHashCode();
    hash ^= groupControls_.GetHashCode();
    hash ^= ledItem_.GetHashCode();
    hash ^= ledDriver_.GetHashCode();
    hash ^= lightSensors_.GetHashCode();
    hash ^= environmentSensors_.GetHashCode();
    hash ^= smartPlugs_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Name);
    }
    if (home_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Home);
    }
    devices_.WriteTo(output, _repeated_devices_codec);
    switchers_.WriteTo(output, _repeated_switchers_codec);
    curtainSwitchers_.WriteTo(output, _repeated_curtainSwitchers_codec);
    remotes_.WriteTo(output, _repeated_remotes_codec);
    motions_.WriteTo(output, _repeated_motions_codec);
    homekits_.WriteTo(output, _repeated_homekits_codec);
    if (NameEn.Length != 0) {
      output.WriteRawTag(82);
      output.WriteString(NameEn);
    }
    if (BackgroundName.Length != 0) {
      output.WriteRawTag(90);
      output.WriteString(BackgroundName);
    }
    buttons_.WriteTo(output, _repeated_buttons_codec);
    groupControls_.WriteTo(output, _repeated_groupControls_codec);
    ledItem_.WriteTo(output, _repeated_ledItem_codec);
    ledDriver_.WriteTo(output, _repeated_ledDriver_codec);
    lightSensors_.WriteTo(output, _repeated_lightSensors_codec);
    environmentSensors_.WriteTo(output, _repeated_environmentSensors_codec);
    smartPlugs_.WriteTo(output, _repeated_smartPlugs_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (home_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Home);
    }
    size += devices_.CalculateSize(_repeated_devices_codec);
    size += switchers_.CalculateSize(_repeated_switchers_codec);
    size += curtainSwitchers_.CalculateSize(_repeated_curtainSwitchers_codec);
    size += remotes_.CalculateSize(_repeated_remotes_codec);
    size += motions_.CalculateSize(_repeated_motions_codec);
    size += homekits_.CalculateSize(_repeated_homekits_codec);
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (BackgroundName.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(BackgroundName);
    }
    size += buttons_.CalculateSize(_repeated_buttons_codec);
    size += groupControls_.CalculateSize(_repeated_groupControls_codec);
    size += ledItem_.CalculateSize(_repeated_ledItem_codec);
    size += ledDriver_.CalculateSize(_repeated_ledDriver_codec);
    size += lightSensors_.CalculateSize(_repeated_lightSensors_codec);
    size += environmentSensors_.CalculateSize(_repeated_environmentSensors_codec);
    size += smartPlugs_.CalculateSize(_repeated_smartPlugs_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Room other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.home_ != null) {
      if (home_ == null) {
        Home = new global::Home();
      }
      Home.MergeFrom(other.Home);
    }
    devices_.Add(other.devices_);
    switchers_.Add(other.switchers_);
    curtainSwitchers_.Add(other.curtainSwitchers_);
    remotes_.Add(other.remotes_);
    motions_.Add(other.motions_);
    homekits_.Add(other.homekits_);
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.BackgroundName.Length != 0) {
      BackgroundName = other.BackgroundName;
    }
    buttons_.Add(other.buttons_);
    groupControls_.Add(other.groupControls_);
    ledItem_.Add(other.ledItem_);
    ledDriver_.Add(other.ledDriver_);
    lightSensors_.Add(other.lightSensors_);
    environmentSensors_.Add(other.environmentSensors_);
    smartPlugs_.Add(other.smartPlugs_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Name = input.ReadString();
          break;
        }
        case 26: {
          if (home_ == null) {
            Home = new global::Home();
          }
          input.ReadMessage(Home);
          break;
        }
        case 34: {
          devices_.AddEntriesFrom(input, _repeated_devices_codec);
          break;
        }
        case 42: {
          switchers_.AddEntriesFrom(input, _repeated_switchers_codec);
          break;
        }
        case 50: {
          curtainSwitchers_.AddEntriesFrom(input, _repeated_curtainSwitchers_codec);
          break;
        }
        case 58: {
          remotes_.AddEntriesFrom(input, _repeated_remotes_codec);
          break;
        }
        case 66: {
          motions_.AddEntriesFrom(input, _repeated_motions_codec);
          break;
        }
        case 74: {
          homekits_.AddEntriesFrom(input, _repeated_homekits_codec);
          break;
        }
        case 82: {
          NameEn = input.ReadString();
          break;
        }
        case 90: {
          BackgroundName = input.ReadString();
          break;
        }
        case 98: {
          buttons_.AddEntriesFrom(input, _repeated_buttons_codec);
          break;
        }
        case 106: {
          groupControls_.AddEntriesFrom(input, _repeated_groupControls_codec);
          break;
        }
        case 114: {
          ledItem_.AddEntriesFrom(input, _repeated_ledItem_codec);
          break;
        }
        case 122: {
          ledDriver_.AddEntriesFrom(input, _repeated_ledDriver_codec);
          break;
        }
        case 130: {
          lightSensors_.AddEntriesFrom(input, _repeated_lightSensors_codec);
          break;
        }
        case 138: {
          environmentSensors_.AddEntriesFrom(input, _repeated_environmentSensors_codec);
          break;
        }
        case 146: {
          smartPlugs_.AddEntriesFrom(input, _repeated_smartPlugs_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin về lịch
/// </summary>
public sealed partial class Schedule : pb::IMessage<Schedule> {
  private static readonly pb::MessageParser<Schedule> _parser = new pb::MessageParser<Schedule>(() => new Schedule());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Schedule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schedule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schedule(Schedule other) : this() {
    datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
    repeat_ = other.repeat_;
    mon_ = other.mon_;
    tue_ = other.tue_;
    wed_ = other.wed_;
    thu_ = other.thu_;
    fri_ = other.fri_;
    sat_ = other.sat_;
    sun_ = other.sun_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Schedule Clone() {
    return new Schedule(this);
  }

  /// <summary>Field number for the "datetime" field.</summary>
  public const int DatetimeFieldNumber = 1;
  private global::DateTime datetime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DateTime Datetime {
    get { return datetime_; }
    set {
      datetime_ = value;
    }
  }

  /// <summary>Field number for the "repeat" field.</summary>
  public const int RepeatFieldNumber = 2;
  private bool repeat_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Repeat {
    get { return repeat_; }
    set {
      repeat_ = value;
    }
  }

  /// <summary>Field number for the "mon" field.</summary>
  public const int MonFieldNumber = 3;
  private bool mon_;
  /// <summary>
  /// Thứ 2
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Mon {
    get { return mon_; }
    set {
      mon_ = value;
    }
  }

  /// <summary>Field number for the "tue" field.</summary>
  public const int TueFieldNumber = 4;
  private bool tue_;
  /// <summary>
  /// Thứ 3
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Tue {
    get { return tue_; }
    set {
      tue_ = value;
    }
  }

  /// <summary>Field number for the "wed" field.</summary>
  public const int WedFieldNumber = 5;
  private bool wed_;
  /// <summary>
  /// Thứ 4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Wed {
    get { return wed_; }
    set {
      wed_ = value;
    }
  }

  /// <summary>Field number for the "thu" field.</summary>
  public const int ThuFieldNumber = 6;
  private bool thu_;
  /// <summary>
  /// Thứ 5
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Thu {
    get { return thu_; }
    set {
      thu_ = value;
    }
  }

  /// <summary>Field number for the "fri" field.</summary>
  public const int FriFieldNumber = 7;
  private bool fri_;
  /// <summary>
  /// Thứ 6
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Fri {
    get { return fri_; }
    set {
      fri_ = value;
    }
  }

  /// <summary>Field number for the "sat" field.</summary>
  public const int SatFieldNumber = 8;
  private bool sat_;
  /// <summary>
  /// Thứ 7
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Sat {
    get { return sat_; }
    set {
      sat_ = value;
    }
  }

  /// <summary>Field number for the "sun" field.</summary>
  public const int SunFieldNumber = 9;
  private bool sun_;
  /// <summary>
  /// CN
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Sun {
    get { return sun_; }
    set {
      sun_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Schedule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Schedule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Datetime, other.Datetime)) return false;
    if (Repeat != other.Repeat) return false;
    if (Mon != other.Mon) return false;
    if (Tue != other.Tue) return false;
    if (Wed != other.Wed) return false;
    if (Thu != other.Thu) return false;
    if (Fri != other.Fri) return false;
    if (Sat != other.Sat) return false;
    if (Sun != other.Sun) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (datetime_ != null) hash ^= Datetime.GetHashCode();
    if (Repeat != false) hash ^= Repeat.GetHashCode();
    if (Mon != false) hash ^= Mon.GetHashCode();
    if (Tue != false) hash ^= Tue.GetHashCode();
    if (Wed != false) hash ^= Wed.GetHashCode();
    if (Thu != false) hash ^= Thu.GetHashCode();
    if (Fri != false) hash ^= Fri.GetHashCode();
    if (Sat != false) hash ^= Sat.GetHashCode();
    if (Sun != false) hash ^= Sun.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (datetime_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Datetime);
    }
    if (Repeat != false) {
      output.WriteRawTag(16);
      output.WriteBool(Repeat);
    }
    if (Mon != false) {
      output.WriteRawTag(24);
      output.WriteBool(Mon);
    }
    if (Tue != false) {
      output.WriteRawTag(32);
      output.WriteBool(Tue);
    }
    if (Wed != false) {
      output.WriteRawTag(40);
      output.WriteBool(Wed);
    }
    if (Thu != false) {
      output.WriteRawTag(48);
      output.WriteBool(Thu);
    }
    if (Fri != false) {
      output.WriteRawTag(56);
      output.WriteBool(Fri);
    }
    if (Sat != false) {
      output.WriteRawTag(64);
      output.WriteBool(Sat);
    }
    if (Sun != false) {
      output.WriteRawTag(72);
      output.WriteBool(Sun);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (datetime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
    }
    if (Repeat != false) {
      size += 1 + 1;
    }
    if (Mon != false) {
      size += 1 + 1;
    }
    if (Tue != false) {
      size += 1 + 1;
    }
    if (Wed != false) {
      size += 1 + 1;
    }
    if (Thu != false) {
      size += 1 + 1;
    }
    if (Fri != false) {
      size += 1 + 1;
    }
    if (Sat != false) {
      size += 1 + 1;
    }
    if (Sun != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Schedule other) {
    if (other == null) {
      return;
    }
    if (other.datetime_ != null) {
      if (datetime_ == null) {
        Datetime = new global::DateTime();
      }
      Datetime.MergeFrom(other.Datetime);
    }
    if (other.Repeat != false) {
      Repeat = other.Repeat;
    }
    if (other.Mon != false) {
      Mon = other.Mon;
    }
    if (other.Tue != false) {
      Tue = other.Tue;
    }
    if (other.Wed != false) {
      Wed = other.Wed;
    }
    if (other.Thu != false) {
      Thu = other.Thu;
    }
    if (other.Fri != false) {
      Fri = other.Fri;
    }
    if (other.Sat != false) {
      Sat = other.Sat;
    }
    if (other.Sun != false) {
      Sun = other.Sun;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (datetime_ == null) {
            Datetime = new global::DateTime();
          }
          input.ReadMessage(Datetime);
          break;
        }
        case 16: {
          Repeat = input.ReadBool();
          break;
        }
        case 24: {
          Mon = input.ReadBool();
          break;
        }
        case 32: {
          Tue = input.ReadBool();
          break;
        }
        case 40: {
          Wed = input.ReadBool();
          break;
        }
        case 48: {
          Thu = input.ReadBool();
          break;
        }
        case 56: {
          Fri = input.ReadBool();
          break;
        }
        case 64: {
          Sat = input.ReadBool();
          break;
        }
        case 72: {
          Sun = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thực thi remote chung
/// </summary>
public sealed partial class RemoteScheduleAction : pb::IMessage<RemoteScheduleAction> {
  private static readonly pb::MessageParser<RemoteScheduleAction> _parser = new pb::MessageParser<RemoteScheduleAction>(() => new RemoteScheduleAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemoteScheduleAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteScheduleAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteScheduleAction(RemoteScheduleAction other) : this() {
    id_ = other.id_;
    remoteScheduleId_ = other.remoteScheduleId_;
    remoteLibraryCmdId_ = other.remoteLibraryCmdId_;
    remoteMultiLibraryCmdId_ = other.remoteMultiLibraryCmdId_;
    delay_ = other.delay_;
    order_ = other.order_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteScheduleAction Clone() {
    return new RemoteScheduleAction(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteScheduleId" field.</summary>
  public const int RemoteScheduleIdFieldNumber = 2;
  private string remoteScheduleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteScheduleId {
    get { return remoteScheduleId_; }
    set {
      remoteScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteLibraryCmdId" field.</summary>
  public const int RemoteLibraryCmdIdFieldNumber = 3;
  private string remoteLibraryCmdId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteLibraryCmdId {
    get { return remoteLibraryCmdId_; }
    set {
      remoteLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteMultiLibraryCmdId" field.</summary>
  public const int RemoteMultiLibraryCmdIdFieldNumber = 4;
  private string remoteMultiLibraryCmdId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteMultiLibraryCmdId {
    get { return remoteMultiLibraryCmdId_; }
    set {
      remoteMultiLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 5;
  private uint delay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 6;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 7;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemoteScheduleAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemoteScheduleAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (RemoteScheduleId != other.RemoteScheduleId) return false;
    if (RemoteLibraryCmdId != other.RemoteLibraryCmdId) return false;
    if (RemoteMultiLibraryCmdId != other.RemoteMultiLibraryCmdId) return false;
    if (Delay != other.Delay) return false;
    if (Order != other.Order) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (RemoteScheduleId.Length != 0) hash ^= RemoteScheduleId.GetHashCode();
    if (RemoteLibraryCmdId.Length != 0) hash ^= RemoteLibraryCmdId.GetHashCode();
    if (RemoteMultiLibraryCmdId.Length != 0) hash ^= RemoteMultiLibraryCmdId.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (RemoteScheduleId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RemoteScheduleId);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(RemoteLibraryCmdId);
    }
    if (RemoteMultiLibraryCmdId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RemoteMultiLibraryCmdId);
    }
    if (Delay != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Delay);
    }
    if (Order != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Order);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (RemoteScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteScheduleId);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteLibraryCmdId);
    }
    if (RemoteMultiLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteMultiLibraryCmdId);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Delay);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemoteScheduleAction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.RemoteScheduleId.Length != 0) {
      RemoteScheduleId = other.RemoteScheduleId;
    }
    if (other.RemoteLibraryCmdId.Length != 0) {
      RemoteLibraryCmdId = other.RemoteLibraryCmdId;
    }
    if (other.RemoteMultiLibraryCmdId.Length != 0) {
      RemoteMultiLibraryCmdId = other.RemoteMultiLibraryCmdId;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          RemoteScheduleId = input.ReadString();
          break;
        }
        case 26: {
          RemoteLibraryCmdId = input.ReadString();
          break;
        }
        case 34: {
          RemoteMultiLibraryCmdId = input.ReadString();
          break;
        }
        case 40: {
          Delay = input.ReadUInt32();
          break;
        }
        case 48: {
          Order = input.ReadUInt32();
          break;
        }
        case 58: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thực thi remote điều hòa
/// </summary>
public sealed partial class AirConditionerScheduleAction : pb::IMessage<AirConditionerScheduleAction> {
  private static readonly pb::MessageParser<AirConditionerScheduleAction> _parser = new pb::MessageParser<AirConditionerScheduleAction>(() => new AirConditionerScheduleAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerScheduleAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerScheduleAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerScheduleAction(AirConditionerScheduleAction other) : this() {
    remoteScheduleId_ = other.remoteScheduleId_;
    powerState_ = other.powerState_;
    temperature_ = other.temperature_;
    mode_ = other.mode_;
    swing_ = other.swing_;
    fan_ = other.fan_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerScheduleAction Clone() {
    return new AirConditionerScheduleAction(this);
  }

  /// <summary>Field number for the "remoteScheduleId" field.</summary>
  public const int RemoteScheduleIdFieldNumber = 1;
  private string remoteScheduleId_ = "";
  /// <summary>
  /// Id của remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteScheduleId {
    get { return remoteScheduleId_; }
    set {
      remoteScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 2;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 3;
  private float temperature_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 4;
  private global::ModeAc mode_ = global::ModeAc.AutoMode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModeAc Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "swing" field.</summary>
  public const int SwingFieldNumber = 5;
  private global::SwingAc swing_ = global::SwingAc.AutoSwing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwingAc Swing {
    get { return swing_; }
    set {
      swing_ = value;
    }
  }

  /// <summary>Field number for the "fan" field.</summary>
  public const int FanFieldNumber = 6;
  private global::FanAc fan_ = global::FanAc.AutoFan;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FanAc Fan {
    get { return fan_; }
    set {
      fan_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerScheduleAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerScheduleAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RemoteScheduleId != other.RemoteScheduleId) return false;
    if (PowerState != other.PowerState) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
    if (Mode != other.Mode) return false;
    if (Swing != other.Swing) return false;
    if (Fan != other.Fan) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RemoteScheduleId.Length != 0) hash ^= RemoteScheduleId.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
    if (Mode != global::ModeAc.AutoMode) hash ^= Mode.GetHashCode();
    if (Swing != global::SwingAc.AutoSwing) hash ^= Swing.GetHashCode();
    if (Fan != global::FanAc.AutoFan) hash ^= Fan.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RemoteScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RemoteScheduleId);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PowerState);
    }
    if (Temperature != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Temperature);
    }
    if (Mode != global::ModeAc.AutoMode) {
      output.WriteRawTag(32);
      output.WriteEnum((int) Mode);
    }
    if (Swing != global::SwingAc.AutoSwing) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Swing);
    }
    if (Fan != global::FanAc.AutoFan) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Fan);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RemoteScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteScheduleId);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (Temperature != 0F) {
      size += 1 + 4;
    }
    if (Mode != global::ModeAc.AutoMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
    }
    if (Swing != global::SwingAc.AutoSwing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Swing);
    }
    if (Fan != global::FanAc.AutoFan) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fan);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerScheduleAction other) {
    if (other == null) {
      return;
    }
    if (other.RemoteScheduleId.Length != 0) {
      RemoteScheduleId = other.RemoteScheduleId;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.Temperature != 0F) {
      Temperature = other.Temperature;
    }
    if (other.Mode != global::ModeAc.AutoMode) {
      Mode = other.Mode;
    }
    if (other.Swing != global::SwingAc.AutoSwing) {
      Swing = other.Swing;
    }
    if (other.Fan != global::FanAc.AutoFan) {
      Fan = other.Fan;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RemoteScheduleId = input.ReadString();
          break;
        }
        case 16: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 29: {
          Temperature = input.ReadFloat();
          break;
        }
        case 32: {
          Mode = (global::ModeAc) input.ReadEnum();
          break;
        }
        case 40: {
          Swing = (global::SwingAc) input.ReadEnum();
          break;
        }
        case 48: {
          Fan = (global::FanAc) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin về RemoteSchedule
/// </summary>
public sealed partial class RemoteSchedule : pb::IMessage<RemoteSchedule> {
  private static readonly pb::MessageParser<RemoteSchedule> _parser = new pb::MessageParser<RemoteSchedule>(() => new RemoteSchedule());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemoteSchedule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteSchedule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteSchedule(RemoteSchedule other) : this() {
    id_ = other.id_;
    remote_ = other.remote_ != null ? other.remote_.Clone() : null;
    schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
    airConditionerAction_ = other.airConditionerAction_ != null ? other.airConditionerAction_.Clone() : null;
    remoteActions_ = other.remoteActions_.Clone();
    active_ = other.active_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteSchedule Clone() {
    return new RemoteSchedule(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remote" field.</summary>
  public const int RemoteFieldNumber = 2;
  private global::Remote remote_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Remote Remote {
    get { return remote_; }
    set {
      remote_ = value;
    }
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 3;
  private global::Schedule schedule_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Schedule Schedule {
    get { return schedule_; }
    set {
      schedule_ = value;
    }
  }

  /// <summary>Field number for the "airConditionerAction" field.</summary>
  public const int AirConditionerActionFieldNumber = 4;
  private global::AirConditionerScheduleAction airConditionerAction_;
  /// <summary>
  /// Thực thi hẹn lịch điều hòa
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerScheduleAction AirConditionerAction {
    get { return airConditionerAction_; }
    set {
      airConditionerAction_ = value;
    }
  }

  /// <summary>Field number for the "remoteActions" field.</summary>
  public const int RemoteActionsFieldNumber = 5;
  private static readonly pb::FieldCodec<global::RemoteScheduleAction> _repeated_remoteActions_codec
      = pb::FieldCodec.ForMessage(42, global::RemoteScheduleAction.Parser);
  private readonly pbc::RepeatedField<global::RemoteScheduleAction> remoteActions_ = new pbc::RepeatedField<global::RemoteScheduleAction>();
  /// <summary>
  /// Thực thi hẹn lịch remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::RemoteScheduleAction> RemoteActions {
    get { return remoteActions_; }
  }

  /// <summary>Field number for the "active" field.</summary>
  public const int ActiveFieldNumber = 6;
  private bool active_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Active {
    get { return active_; }
    set {
      active_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemoteSchedule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemoteSchedule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(Remote, other.Remote)) return false;
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if (!object.Equals(AirConditionerAction, other.AirConditionerAction)) return false;
    if(!remoteActions_.Equals(other.remoteActions_)) return false;
    if (Active != other.Active) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (remote_ != null) hash ^= Remote.GetHashCode();
    if (schedule_ != null) hash ^= Schedule.GetHashCode();
    if (airConditionerAction_ != null) hash ^= AirConditionerAction.GetHashCode();
    hash ^= remoteActions_.GetHashCode();
    if (Active != false) hash ^= Active.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (remote_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Remote);
    }
    if (schedule_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Schedule);
    }
    if (airConditionerAction_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(AirConditionerAction);
    }
    remoteActions_.WriteTo(output, _repeated_remoteActions_codec);
    if (Active != false) {
      output.WriteRawTag(48);
      output.WriteBool(Active);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (remote_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remote);
    }
    if (schedule_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    if (airConditionerAction_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerAction);
    }
    size += remoteActions_.CalculateSize(_repeated_remoteActions_codec);
    if (Active != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemoteSchedule other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.remote_ != null) {
      if (remote_ == null) {
        Remote = new global::Remote();
      }
      Remote.MergeFrom(other.Remote);
    }
    if (other.schedule_ != null) {
      if (schedule_ == null) {
        Schedule = new global::Schedule();
      }
      Schedule.MergeFrom(other.Schedule);
    }
    if (other.airConditionerAction_ != null) {
      if (airConditionerAction_ == null) {
        AirConditionerAction = new global::AirConditionerScheduleAction();
      }
      AirConditionerAction.MergeFrom(other.AirConditionerAction);
    }
    remoteActions_.Add(other.remoteActions_);
    if (other.Active != false) {
      Active = other.Active;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          if (remote_ == null) {
            Remote = new global::Remote();
          }
          input.ReadMessage(Remote);
          break;
        }
        case 26: {
          if (schedule_ == null) {
            Schedule = new global::Schedule();
          }
          input.ReadMessage(Schedule);
          break;
        }
        case 34: {
          if (airConditionerAction_ == null) {
            AirConditionerAction = new global::AirConditionerScheduleAction();
          }
          input.ReadMessage(AirConditionerAction);
          break;
        }
        case 42: {
          remoteActions_.AddEntriesFrom(input, _repeated_remoteActions_codec);
          break;
        }
        case 48: {
          Active = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin về SwitcherSchedule
/// </summary>
public sealed partial class SwitcherSchedule : pb::IMessage<SwitcherSchedule> {
  private static readonly pb::MessageParser<SwitcherSchedule> _parser = new pb::MessageParser<SwitcherSchedule>(() => new SwitcherSchedule());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SwitcherSchedule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherSchedule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherSchedule(SwitcherSchedule other) : this() {
    id_ = other.id_;
    powerState_ = other.powerState_;
    switcher_ = other.switcher_ != null ? other.switcher_.Clone() : null;
    schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
    active_ = other.active_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherSchedule Clone() {
    return new SwitcherSchedule(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 2;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// ON/OFF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 3;
  private global::Switcher switcher_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Switcher Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 4;
  private global::Schedule schedule_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Schedule Schedule {
    get { return schedule_; }
    set {
      schedule_ = value;
    }
  }

  /// <summary>Field number for the "active" field.</summary>
  public const int ActiveFieldNumber = 5;
  private bool active_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Active {
    get { return active_; }
    set {
      active_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SwitcherSchedule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SwitcherSchedule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (PowerState != other.PowerState) return false;
    if (!object.Equals(Switcher, other.Switcher)) return false;
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if (Active != other.Active) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (switcher_ != null) hash ^= Switcher.GetHashCode();
    if (schedule_ != null) hash ^= Schedule.GetHashCode();
    if (Active != false) hash ^= Active.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PowerState);
    }
    if (switcher_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Switcher);
    }
    if (schedule_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Schedule);
    }
    if (Active != false) {
      output.WriteRawTag(40);
      output.WriteBool(Active);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (switcher_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Switcher);
    }
    if (schedule_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    if (Active != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SwitcherSchedule other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.switcher_ != null) {
      if (switcher_ == null) {
        Switcher = new global::Switcher();
      }
      Switcher.MergeFrom(other.Switcher);
    }
    if (other.schedule_ != null) {
      if (schedule_ == null) {
        Schedule = new global::Schedule();
      }
      Schedule.MergeFrom(other.Schedule);
    }
    if (other.Active != false) {
      Active = other.Active;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 16: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 26: {
          if (switcher_ == null) {
            Switcher = new global::Switcher();
          }
          input.ReadMessage(Switcher);
          break;
        }
        case 34: {
          if (schedule_ == null) {
            Schedule = new global::Schedule();
          }
          input.ReadMessage(Schedule);
          break;
        }
        case 40: {
          Active = input.ReadBool();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin về CurtainSwitcherSchedule hẹn lịch rèm cửa
/// </summary>
public sealed partial class CurtainSwitcherSchedule : pb::IMessage<CurtainSwitcherSchedule> {
  private static readonly pb::MessageParser<CurtainSwitcherSchedule> _parser = new pb::MessageParser<CurtainSwitcherSchedule>(() => new CurtainSwitcherSchedule());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurtainSwitcherSchedule> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherSchedule() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherSchedule(CurtainSwitcherSchedule other) : this() {
    id_ = other.id_;
    curtainSwitcher_ = other.curtainSwitcher_ != null ? other.curtainSwitcher_.Clone() : null;
    schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
    percentIn_ = other.percentIn_;
    percentOut_ = other.percentOut_;
    active_ = other.active_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherSchedule Clone() {
    return new CurtainSwitcherSchedule(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "curtainSwitcher" field.</summary>
  public const int CurtainSwitcherFieldNumber = 2;
  private global::CurtainSwitcher curtainSwitcher_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcher CurtainSwitcher {
    get { return curtainSwitcher_; }
    set {
      curtainSwitcher_ = value;
    }
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 3;
  private global::Schedule schedule_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Schedule Schedule {
    get { return schedule_; }
    set {
      schedule_ = value;
    }
  }

  /// <summary>Field number for the "percentIn" field.</summary>
  public const int PercentInFieldNumber = 4;
  private uint percentIn_;
  /// <summary>
  /// Phần trăm hướng trong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentIn {
    get { return percentIn_; }
    set {
      percentIn_ = value;
    }
  }

  /// <summary>Field number for the "percentOut" field.</summary>
  public const int PercentOutFieldNumber = 5;
  private uint percentOut_;
  /// <summary>
  /// Phần trăm hướng ngoài
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentOut {
    get { return percentOut_; }
    set {
      percentOut_ = value;
    }
  }

  /// <summary>Field number for the "active" field.</summary>
  public const int ActiveFieldNumber = 6;
  private bool active_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Active {
    get { return active_; }
    set {
      active_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurtainSwitcherSchedule);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurtainSwitcherSchedule other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(CurtainSwitcher, other.CurtainSwitcher)) return false;
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if (PercentIn != other.PercentIn) return false;
    if (PercentOut != other.PercentOut) return false;
    if (Active != other.Active) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (curtainSwitcher_ != null) hash ^= CurtainSwitcher.GetHashCode();
    if (schedule_ != null) hash ^= Schedule.GetHashCode();
    if (PercentIn != 0) hash ^= PercentIn.GetHashCode();
    if (PercentOut != 0) hash ^= PercentOut.GetHashCode();
    if (Active != false) hash ^= Active.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (curtainSwitcher_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CurtainSwitcher);
    }
    if (schedule_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Schedule);
    }
    if (PercentIn != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(PercentIn);
    }
    if (PercentOut != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(PercentOut);
    }
    if (Active != false) {
      output.WriteRawTag(48);
      output.WriteBool(Active);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (curtainSwitcher_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurtainSwitcher);
    }
    if (schedule_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    if (PercentIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentIn);
    }
    if (PercentOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentOut);
    }
    if (Active != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurtainSwitcherSchedule other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.curtainSwitcher_ != null) {
      if (curtainSwitcher_ == null) {
        CurtainSwitcher = new global::CurtainSwitcher();
      }
      CurtainSwitcher.MergeFrom(other.CurtainSwitcher);
    }
    if (other.schedule_ != null) {
      if (schedule_ == null) {
        Schedule = new global::Schedule();
      }
      Schedule.MergeFrom(other.Schedule);
    }
    if (other.PercentIn != 0) {
      PercentIn = other.PercentIn;
    }
    if (other.PercentOut != 0) {
      PercentOut = other.PercentOut;
    }
    if (other.Active != false) {
      Active = other.Active;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          if (curtainSwitcher_ == null) {
            CurtainSwitcher = new global::CurtainSwitcher();
          }
          input.ReadMessage(CurtainSwitcher);
          break;
        }
        case 26: {
          if (schedule_ == null) {
            Schedule = new global::Schedule();
          }
          input.ReadMessage(Schedule);
          break;
        }
        case 32: {
          PercentIn = input.ReadUInt32();
          break;
        }
        case 40: {
          PercentOut = input.ReadUInt32();
          break;
        }
        case 48: {
          Active = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class LightSensor : pb::IMessage<LightSensor> {
  private static readonly pb::MessageParser<LightSensor> _parser = new pb::MessageParser<LightSensor>(() => new LightSensor());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LightSensor> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LightSensor() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LightSensor(LightSensor other) : this() {
    id_ = other.id_;
    icon_ = other.icon_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    buttonState_ = other.buttonState_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LightSensor Clone() {
    return new LightSensor(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 2;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 4;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "buttonState" field.</summary>
  public const int ButtonStateFieldNumber = 5;
  private global::ButtonState buttonState_ = global::ButtonState.Nothing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ButtonState ButtonState {
    get { return buttonState_; }
    set {
      buttonState_ = value;
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 6;
  private bool favorite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 7;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 8;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LightSensor);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LightSensor other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Icon != other.Icon) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (ButtonState != other.ButtonState) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (ButtonState != global::ButtonState.Nothing) hash ^= ButtonState.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Icon);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(NameEn);
    }
    if (ButtonState != global::ButtonState.Nothing) {
      output.WriteRawTag(40);
      output.WriteEnum((int) ButtonState);
    }
    if (Favorite != false) {
      output.WriteRawTag(48);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Device);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (ButtonState != global::ButtonState.Nothing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ButtonState);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LightSensor other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.ButtonState != global::ButtonState.Nothing) {
      ButtonState = other.ButtonState;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Icon = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          NameEn = input.ReadString();
          break;
        }
        case 40: {
          ButtonState = (global::ButtonState) input.ReadEnum();
          break;
        }
        case 48: {
          Favorite = input.ReadBool();
          break;
        }
        case 56: {
          Order = input.ReadUInt32();
          break;
        }
        case 66: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Đồng hồ do điện/nước
/// </summary>
public sealed partial class Meter : pb::IMessage<Meter> {
  private static readonly pb::MessageParser<Meter> _parser = new pb::MessageParser<Meter>(() => new Meter());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Meter> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Meter() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Meter(Meter other) : this() {
    id_ = other.id_;
    serialNumber_ = other.serialNumber_;
    typeMeter_ = other.typeMeter_;
    deviceId_ = other.deviceId_;
    icon_ = other.icon_;
    month_ = other.month_;
    metric_ = other.metric_;
    estimate_ = other.estimate_;
    indexs_ = other.indexs_.Clone();
    estimates_ = other.estimates_.Clone();
    connectionState_ = other.connectionState_;
    limitMoney_ = other.limitMoney_;
    alertOverConsume_ = other.alertOverConsume_;
    lastUpdateIndex_ = other.lastUpdateIndex_;
    lostUpdateIndex_ = other.lostUpdateIndex_;
    lastFromDate_ = other.lastFromDate_;
    estimateMonths_ = other.estimateMonths_.Clone();
    estimateDays_ = other.estimateDays_.Clone();
    device_ = other.device_ != null ? other.device_.Clone() : null;
    lastMetricIndex_ = other.lastMetricIndex_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Meter Clone() {
    return new Meter(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "serialNumber" field.</summary>
  public const int SerialNumberFieldNumber = 2;
  private string serialNumber_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SerialNumber {
    get { return serialNumber_; }
    set {
      serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "typeMeter" field.</summary>
  public const int TypeMeterFieldNumber = 3;
  private global::TypeMeter typeMeter_ = global::TypeMeter.ElectricMeter;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeMeter TypeMeter {
    get { return typeMeter_; }
    set {
      typeMeter_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 4;
  private string deviceId_ = "";
  /// <summary>
  /// DeviceId, HardwareId giống nhau cho điện/nước
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 5;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "month" field.</summary>
  public const int MonthFieldNumber = 6;
  private uint month_;
  /// <summary>
  /// [Deprecated]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Month {
    get { return month_; }
    set {
      month_ = value;
    }
  }

  /// <summary>Field number for the "metric" field.</summary>
  public const int MetricFieldNumber = 7;
  private float metric_;
  /// <summary>
  /// Tổng chỉ số điện|nước của tháng hiện tại
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Metric {
    get { return metric_; }
    set {
      metric_ = value;
    }
  }

  /// <summary>Field number for the "estimate" field.</summary>
  public const int EstimateFieldNumber = 8;
  private uint estimate_;
  /// <summary>
  /// Tổng tiền điện|nước của tháng hiện tại
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Estimate {
    get { return estimate_; }
    set {
      estimate_ = value;
    }
  }

  /// <summary>Field number for the "indexs" field.</summary>
  public const int IndexsFieldNumber = 9;
  private static readonly pb::FieldCodec<global::MeterIndex> _repeated_indexs_codec
      = pb::FieldCodec.ForMessage(74, global::MeterIndex.Parser);
  private readonly pbc::RepeatedField<global::MeterIndex> indexs_ = new pbc::RepeatedField<global::MeterIndex>();
  /// <summary>
  /// [Deprecated]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MeterIndex> Indexs {
    get { return indexs_; }
  }

  /// <summary>Field number for the "estimates" field.</summary>
  public const int EstimatesFieldNumber = 10;
  private static readonly pb::FieldCodec<global::MeterEstimate> _repeated_estimates_codec
      = pb::FieldCodec.ForMessage(82, global::MeterEstimate.Parser);
  private readonly pbc::RepeatedField<global::MeterEstimate> estimates_ = new pbc::RepeatedField<global::MeterEstimate>();
  /// <summary>
  /// [Deprecated]
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MeterEstimate> Estimates {
    get { return estimates_; }
  }

  /// <summary>Field number for the "connectionState" field.</summary>
  public const int ConnectionStateFieldNumber = 11;
  private global::ConnectionState connectionState_ = global::ConnectionState.Offline;
  /// <summary>
  /// Offline/Online/Disconect
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConnectionState ConnectionState {
    get { return connectionState_; }
    set {
      connectionState_ = value;
    }
  }

  /// <summary>Field number for the "limitMoney" field.</summary>
  public const int LimitMoneyFieldNumber = 12;
  private uint limitMoney_;
  /// <summary>
  /// Giới hạn mức tiền/tháng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LimitMoney {
    get { return limitMoney_; }
    set {
      limitMoney_ = value;
    }
  }

  /// <summary>Field number for the "alertOverConsume" field.</summary>
  public const int AlertOverConsumeFieldNumber = 13;
  private uint alertOverConsume_;
  /// <summary>
  /// Cảnh báo vượt mức tiêu thụ 0: Không | 1:Tức thời | 2:Hàng ngày | 3:Hàng tuần
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AlertOverConsume {
    get { return alertOverConsume_; }
    set {
      alertOverConsume_ = value;
    }
  }

  /// <summary>Field number for the "lastUpdateIndex" field.</summary>
  public const int LastUpdateIndexFieldNumber = 14;
  private ulong lastUpdateIndex_;
  /// <summary>
  /// Thời gian cập nhật chỉ số lần cuối Unix Timestamp
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong LastUpdateIndex {
    get { return lastUpdateIndex_; }
    set {
      lastUpdateIndex_ = value;
    }
  }

  /// <summary>Field number for the "lostUpdateIndex" field.</summary>
  public const int LostUpdateIndexFieldNumber = 15;
  private bool lostUpdateIndex_;
  /// <summary>
  /// Đã mất kết nối cập nhật chỉ số mặc định quá 10'
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool LostUpdateIndex {
    get { return lostUpdateIndex_; }
    set {
      lostUpdateIndex_ = value;
    }
  }

  /// <summary>Field number for the "lastFromDate" field.</summary>
  public const int LastFromDateFieldNumber = 16;
  private ulong lastFromDate_;
  /// <summary>
  /// Ngày bắt đầu chốt của thàng gần nhất
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ulong LastFromDate {
    get { return lastFromDate_; }
    set {
      lastFromDate_ = value;
    }
  }

  /// <summary>Field number for the "estimateMonths" field.</summary>
  public const int EstimateMonthsFieldNumber = 17;
  private static readonly pb::FieldCodec<global::MeterEstimate> _repeated_estimateMonths_codec
      = pb::FieldCodec.ForMessage(138, global::MeterEstimate.Parser);
  private readonly pbc::RepeatedField<global::MeterEstimate> estimateMonths_ = new pbc::RepeatedField<global::MeterEstimate>();
  /// <summary>
  /// Ước tính số lượng tiêu thụ + tiền điện|nước 7 tháng gần nhất
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MeterEstimate> EstimateMonths {
    get { return estimateMonths_; }
  }

  /// <summary>Field number for the "estimateDays" field.</summary>
  public const int EstimateDaysFieldNumber = 18;
  private static readonly pb::FieldCodec<global::MeterEstimate> _repeated_estimateDays_codec
      = pb::FieldCodec.ForMessage(146, global::MeterEstimate.Parser);
  private readonly pbc::RepeatedField<global::MeterEstimate> estimateDays_ = new pbc::RepeatedField<global::MeterEstimate>();
  /// <summary>
  /// Ước tính số lượng tiêu thụ các ngày trong 1 tháng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MeterEstimate> EstimateDays {
    get { return estimateDays_; }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 19;
  private global::Device device_;
  /// <summary>
  /// Thông tin về thiết bị của đồng hồ
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "lastMetricIndex" field.</summary>
  public const int LastMetricIndexFieldNumber = 20;
  private float lastMetricIndex_;
  /// <summary>
  /// Chỉ số điện|nước cuối cùng nhận được
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float LastMetricIndex {
    get { return lastMetricIndex_; }
    set {
      lastMetricIndex_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Meter);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Meter other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SerialNumber != other.SerialNumber) return false;
    if (TypeMeter != other.TypeMeter) return false;
    if (DeviceId != other.DeviceId) return false;
    if (Icon != other.Icon) return false;
    if (Month != other.Month) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Metric, other.Metric)) return false;
    if (Estimate != other.Estimate) return false;
    if(!indexs_.Equals(other.indexs_)) return false;
    if(!estimates_.Equals(other.estimates_)) return false;
    if (ConnectionState != other.ConnectionState) return false;
    if (LimitMoney != other.LimitMoney) return false;
    if (AlertOverConsume != other.AlertOverConsume) return false;
    if (LastUpdateIndex != other.LastUpdateIndex) return false;
    if (LostUpdateIndex != other.LostUpdateIndex) return false;
    if (LastFromDate != other.LastFromDate) return false;
    if(!estimateMonths_.Equals(other.estimateMonths_)) return false;
    if(!estimateDays_.Equals(other.estimateDays_)) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(LastMetricIndex, other.LastMetricIndex)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (SerialNumber.Length != 0) hash ^= SerialNumber.GetHashCode();
    if (TypeMeter != global::TypeMeter.ElectricMeter) hash ^= TypeMeter.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Month != 0) hash ^= Month.GetHashCode();
    if (Metric != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Metric);
    if (Estimate != 0) hash ^= Estimate.GetHashCode();
    hash ^= indexs_.GetHashCode();
    hash ^= estimates_.GetHashCode();
    if (ConnectionState != global::ConnectionState.Offline) hash ^= ConnectionState.GetHashCode();
    if (LimitMoney != 0) hash ^= LimitMoney.GetHashCode();
    if (AlertOverConsume != 0) hash ^= AlertOverConsume.GetHashCode();
    if (LastUpdateIndex != 0UL) hash ^= LastUpdateIndex.GetHashCode();
    if (LostUpdateIndex != false) hash ^= LostUpdateIndex.GetHashCode();
    if (LastFromDate != 0UL) hash ^= LastFromDate.GetHashCode();
    hash ^= estimateMonths_.GetHashCode();
    hash ^= estimateDays_.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (LastMetricIndex != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(LastMetricIndex);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (SerialNumber.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SerialNumber);
    }
    if (TypeMeter != global::TypeMeter.ElectricMeter) {
      output.WriteRawTag(24);
      output.WriteEnum((int) TypeMeter);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(DeviceId);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Icon);
    }
    if (Month != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Month);
    }
    if (Metric != 0F) {
      output.WriteRawTag(61);
      output.WriteFloat(Metric);
    }
    if (Estimate != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(Estimate);
    }
    indexs_.WriteTo(output, _repeated_indexs_codec);
    estimates_.WriteTo(output, _repeated_estimates_codec);
    if (ConnectionState != global::ConnectionState.Offline) {
      output.WriteRawTag(88);
      output.WriteEnum((int) ConnectionState);
    }
    if (LimitMoney != 0) {
      output.WriteRawTag(96);
      output.WriteUInt32(LimitMoney);
    }
    if (AlertOverConsume != 0) {
      output.WriteRawTag(104);
      output.WriteUInt32(AlertOverConsume);
    }
    if (LastUpdateIndex != 0UL) {
      output.WriteRawTag(112);
      output.WriteUInt64(LastUpdateIndex);
    }
    if (LostUpdateIndex != false) {
      output.WriteRawTag(120);
      output.WriteBool(LostUpdateIndex);
    }
    if (LastFromDate != 0UL) {
      output.WriteRawTag(128, 1);
      output.WriteUInt64(LastFromDate);
    }
    estimateMonths_.WriteTo(output, _repeated_estimateMonths_codec);
    estimateDays_.WriteTo(output, _repeated_estimateDays_codec);
    if (device_ != null) {
      output.WriteRawTag(154, 1);
      output.WriteMessage(Device);
    }
    if (LastMetricIndex != 0F) {
      output.WriteRawTag(165, 1);
      output.WriteFloat(LastMetricIndex);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (SerialNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
    }
    if (TypeMeter != global::TypeMeter.ElectricMeter) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) TypeMeter);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Month != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Month);
    }
    if (Metric != 0F) {
      size += 1 + 4;
    }
    if (Estimate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Estimate);
    }
    size += indexs_.CalculateSize(_repeated_indexs_codec);
    size += estimates_.CalculateSize(_repeated_estimates_codec);
    if (ConnectionState != global::ConnectionState.Offline) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
    }
    if (LimitMoney != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LimitMoney);
    }
    if (AlertOverConsume != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AlertOverConsume);
    }
    if (LastUpdateIndex != 0UL) {
      size += 1 + pb::CodedOutputStream.ComputeUInt64Size(LastUpdateIndex);
    }
    if (LostUpdateIndex != false) {
      size += 1 + 1;
    }
    if (LastFromDate != 0UL) {
      size += 2 + pb::CodedOutputStream.ComputeUInt64Size(LastFromDate);
    }
    size += estimateMonths_.CalculateSize(_repeated_estimateMonths_codec);
    size += estimateDays_.CalculateSize(_repeated_estimateDays_codec);
    if (device_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (LastMetricIndex != 0F) {
      size += 2 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Meter other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.SerialNumber.Length != 0) {
      SerialNumber = other.SerialNumber;
    }
    if (other.TypeMeter != global::TypeMeter.ElectricMeter) {
      TypeMeter = other.TypeMeter;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Month != 0) {
      Month = other.Month;
    }
    if (other.Metric != 0F) {
      Metric = other.Metric;
    }
    if (other.Estimate != 0) {
      Estimate = other.Estimate;
    }
    indexs_.Add(other.indexs_);
    estimates_.Add(other.estimates_);
    if (other.ConnectionState != global::ConnectionState.Offline) {
      ConnectionState = other.ConnectionState;
    }
    if (other.LimitMoney != 0) {
      LimitMoney = other.LimitMoney;
    }
    if (other.AlertOverConsume != 0) {
      AlertOverConsume = other.AlertOverConsume;
    }
    if (other.LastUpdateIndex != 0UL) {
      LastUpdateIndex = other.LastUpdateIndex;
    }
    if (other.LostUpdateIndex != false) {
      LostUpdateIndex = other.LostUpdateIndex;
    }
    if (other.LastFromDate != 0UL) {
      LastFromDate = other.LastFromDate;
    }
    estimateMonths_.Add(other.estimateMonths_);
    estimateDays_.Add(other.estimateDays_);
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.LastMetricIndex != 0F) {
      LastMetricIndex = other.LastMetricIndex;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          SerialNumber = input.ReadString();
          break;
        }
        case 24: {
          TypeMeter = (global::TypeMeter) input.ReadEnum();
          break;
        }
        case 34: {
          DeviceId = input.ReadString();
          break;
        }
        case 42: {
          Icon = input.ReadString();
          break;
        }
        case 48: {
          Month = input.ReadUInt32();
          break;
        }
        case 61: {
          Metric = input.ReadFloat();
          break;
        }
        case 64: {
          Estimate = input.ReadUInt32();
          break;
        }
        case 74: {
          indexs_.AddEntriesFrom(input, _repeated_indexs_codec);
          break;
        }
        case 82: {
          estimates_.AddEntriesFrom(input, _repeated_estimates_codec);
          break;
        }
        case 88: {
          ConnectionState = (global::ConnectionState) input.ReadEnum();
          break;
        }
        case 96: {
          LimitMoney = input.ReadUInt32();
          break;
        }
        case 104: {
          AlertOverConsume = input.ReadUInt32();
          break;
        }
        case 112: {
          LastUpdateIndex = input.ReadUInt64();
          break;
        }
        case 120: {
          LostUpdateIndex = input.ReadBool();
          break;
        }
        case 128: {
          LastFromDate = input.ReadUInt64();
          break;
        }
        case 138: {
          estimateMonths_.AddEntriesFrom(input, _repeated_estimateMonths_codec);
          break;
        }
        case 146: {
          estimateDays_.AddEntriesFrom(input, _repeated_estimateDays_codec);
          break;
        }
        case 154: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 165: {
          LastMetricIndex = input.ReadFloat();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Chỉ số điện/nước
/// </summary>
public sealed partial class MeterIndex : pb::IMessage<MeterIndex> {
  private static readonly pb::MessageParser<MeterIndex> _parser = new pb::MessageParser<MeterIndex>(() => new MeterIndex());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterIndex> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterIndex() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterIndex(MeterIndex other) : this() {
    serialNumber_ = other.serialNumber_;
    type_ = other.type_;
    metric_ = other.metric_;
    hour_ = other.hour_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterIndex Clone() {
    return new MeterIndex(this);
  }

  /// <summary>Field number for the "serialNumber" field.</summary>
  public const int SerialNumberFieldNumber = 1;
  private string serialNumber_ = "";
  /// <summary>
  /// Số serial number của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SerialNumber {
    get { return serialNumber_; }
    set {
      serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::TypeMeter type_ = global::TypeMeter.ElectricMeter;
  /// <summary>
  /// 0: Điện, 1: Nước
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeMeter Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "metric" field.</summary>
  public const int MetricFieldNumber = 3;
  private float metric_;
  /// <summary>
  /// Chỉ số điện|nước
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Metric {
    get { return metric_; }
    set {
      metric_ = value;
    }
  }

  /// <summary>Field number for the "hour" field.</summary>
  public const int HourFieldNumber = 4;
  private int hour_;
  /// <summary>
  /// Giờ cập nhật
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Hour {
    get { return hour_; }
    set {
      hour_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterIndex);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterIndex other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SerialNumber != other.SerialNumber) return false;
    if (Type != other.Type) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Metric, other.Metric)) return false;
    if (Hour != other.Hour) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SerialNumber.Length != 0) hash ^= SerialNumber.GetHashCode();
    if (Type != global::TypeMeter.ElectricMeter) hash ^= Type.GetHashCode();
    if (Metric != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Metric);
    if (Hour != 0) hash ^= Hour.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SerialNumber.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SerialNumber);
    }
    if (Type != global::TypeMeter.ElectricMeter) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Metric != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Metric);
    }
    if (Hour != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Hour);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SerialNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
    }
    if (Type != global::TypeMeter.ElectricMeter) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Metric != 0F) {
      size += 1 + 4;
    }
    if (Hour != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Hour);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterIndex other) {
    if (other == null) {
      return;
    }
    if (other.SerialNumber.Length != 0) {
      SerialNumber = other.SerialNumber;
    }
    if (other.Type != global::TypeMeter.ElectricMeter) {
      Type = other.Type;
    }
    if (other.Metric != 0F) {
      Metric = other.Metric;
    }
    if (other.Hour != 0) {
      Hour = other.Hour;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SerialNumber = input.ReadString();
          break;
        }
        case 16: {
          Type = (global::TypeMeter) input.ReadEnum();
          break;
        }
        case 29: {
          Metric = input.ReadFloat();
          break;
        }
        case 32: {
          Hour = input.ReadInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Ước tính tiền điện/nước theo tháng
/// </summary>
public sealed partial class MeterEstimate : pb::IMessage<MeterEstimate> {
  private static readonly pb::MessageParser<MeterEstimate> _parser = new pb::MessageParser<MeterEstimate>(() => new MeterEstimate());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterEstimate> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterEstimate() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterEstimate(MeterEstimate other) : this() {
    serialNumber_ = other.serialNumber_;
    type_ = other.type_;
    month_ = other.month_;
    estimate_ = other.estimate_;
    consume_ = other.consume_;
    year_ = other.year_;
    day_ = other.day_;
    hour_ = other.hour_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterEstimate Clone() {
    return new MeterEstimate(this);
  }

  /// <summary>Field number for the "serialNumber" field.</summary>
  public const int SerialNumberFieldNumber = 1;
  private string serialNumber_ = "";
  /// <summary>
  /// Số serial number của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SerialNumber {
    get { return serialNumber_; }
    set {
      serialNumber_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::TypeMeter type_ = global::TypeMeter.ElectricMeter;
  /// <summary>
  /// 0: Điện, 1: Nước
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeMeter Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "month" field.</summary>
  public const int MonthFieldNumber = 3;
  private uint month_;
  /// <summary>
  /// Tháng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Month {
    get { return month_; }
    set {
      month_ = value;
    }
  }

  /// <summary>Field number for the "estimate" field.</summary>
  public const int EstimateFieldNumber = 4;
  private uint estimate_;
  /// <summary>
  /// Tiền điện|nước
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Estimate {
    get { return estimate_; }
    set {
      estimate_ = value;
    }
  }

  /// <summary>Field number for the "consume" field.</summary>
  public const int ConsumeFieldNumber = 5;
  private float consume_;
  /// <summary>
  /// Số lượng tiêu thụ điện|nước
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Consume {
    get { return consume_; }
    set {
      consume_ = value;
    }
  }

  /// <summary>Field number for the "year" field.</summary>
  public const int YearFieldNumber = 6;
  private uint year_;
  /// <summary>
  /// Năm
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Year {
    get { return year_; }
    set {
      year_ = value;
    }
  }

  /// <summary>Field number for the "day" field.</summary>
  public const int DayFieldNumber = 7;
  private uint day_;
  /// <summary>
  /// Ngày
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Day {
    get { return day_; }
    set {
      day_ = value;
    }
  }

  /// <summary>Field number for the "hour" field.</summary>
  public const int HourFieldNumber = 8;
  private uint hour_;
  /// <summary>
  /// Giờ
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Hour {
    get { return hour_; }
    set {
      hour_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterEstimate);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterEstimate other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SerialNumber != other.SerialNumber) return false;
    if (Type != other.Type) return false;
    if (Month != other.Month) return false;
    if (Estimate != other.Estimate) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Consume, other.Consume)) return false;
    if (Year != other.Year) return false;
    if (Day != other.Day) return false;
    if (Hour != other.Hour) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SerialNumber.Length != 0) hash ^= SerialNumber.GetHashCode();
    if (Type != global::TypeMeter.ElectricMeter) hash ^= Type.GetHashCode();
    if (Month != 0) hash ^= Month.GetHashCode();
    if (Estimate != 0) hash ^= Estimate.GetHashCode();
    if (Consume != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Consume);
    if (Year != 0) hash ^= Year.GetHashCode();
    if (Day != 0) hash ^= Day.GetHashCode();
    if (Hour != 0) hash ^= Hour.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SerialNumber.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SerialNumber);
    }
    if (Type != global::TypeMeter.ElectricMeter) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (Month != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Month);
    }
    if (Estimate != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Estimate);
    }
    if (Consume != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Consume);
    }
    if (Year != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Year);
    }
    if (Day != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Day);
    }
    if (Hour != 0) {
      output.WriteRawTag(64);
      output.WriteUInt32(Hour);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SerialNumber.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SerialNumber);
    }
    if (Type != global::TypeMeter.ElectricMeter) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Month != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Month);
    }
    if (Estimate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Estimate);
    }
    if (Consume != 0F) {
      size += 1 + 4;
    }
    if (Year != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Year);
    }
    if (Day != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Day);
    }
    if (Hour != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Hour);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterEstimate other) {
    if (other == null) {
      return;
    }
    if (other.SerialNumber.Length != 0) {
      SerialNumber = other.SerialNumber;
    }
    if (other.Type != global::TypeMeter.ElectricMeter) {
      Type = other.Type;
    }
    if (other.Month != 0) {
      Month = other.Month;
    }
    if (other.Estimate != 0) {
      Estimate = other.Estimate;
    }
    if (other.Consume != 0F) {
      Consume = other.Consume;
    }
    if (other.Year != 0) {
      Year = other.Year;
    }
    if (other.Day != 0) {
      Day = other.Day;
    }
    if (other.Hour != 0) {
      Hour = other.Hour;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SerialNumber = input.ReadString();
          break;
        }
        case 16: {
          Type = (global::TypeMeter) input.ReadEnum();
          break;
        }
        case 24: {
          Month = input.ReadUInt32();
          break;
        }
        case 32: {
          Estimate = input.ReadUInt32();
          break;
        }
        case 45: {
          Consume = input.ReadFloat();
          break;
        }
        case 48: {
          Year = input.ReadUInt32();
          break;
        }
        case 56: {
          Day = input.ReadUInt32();
          break;
        }
        case 64: {
          Hour = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class ActiveTime : pb::IMessage<ActiveTime> {
  private static readonly pb::MessageParser<ActiveTime> _parser = new pb::MessageParser<ActiveTime>(() => new ActiveTime());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ActiveTime> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActiveTime() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActiveTime(ActiveTime other) : this() {
    enableFullTime_ = other.enableFullTime_;
    enableStart_ = other.enableStart_;
    enableEnd_ = other.enableEnd_;
    enableDayMap_ = other.enableDayMap_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ActiveTime Clone() {
    return new ActiveTime(this);
  }

  /// <summary>Field number for the "enableFullTime" field.</summary>
  public const int EnableFullTimeFieldNumber = 1;
  private bool enableFullTime_;
  /// <summary>
  /// Cho phép toàn thời gian
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool EnableFullTime {
    get { return enableFullTime_; }
    set {
      enableFullTime_ = value;
    }
  }

  /// <summary>Field number for the "enableStart" field.</summary>
  public const int EnableStartFieldNumber = 2;
  private uint enableStart_;
  /// <summary>
  /// Thời gian bắt đầu kích hoạt kịch bản, quy thành phút VD: 13h10 -> 13*60+10,
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnableStart {
    get { return enableStart_; }
    set {
      enableStart_ = value;
    }
  }

  /// <summary>Field number for the "enableEnd" field.</summary>
  public const int EnableEndFieldNumber = 3;
  private uint enableEnd_;
  /// <summary>
  /// Thời gian kết thúc cho phép kịch bản hoạt động, quy thành phút.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnableEnd {
    get { return enableEnd_; }
    set {
      enableEnd_ = value;
    }
  }

  /// <summary>Field number for the "enableDayMap" field.</summary>
  public const int EnableDayMapFieldNumber = 4;
  private uint enableDayMap_;
  /// <summary>
  /// Những ngày cho phép ngữ cảnh hoạt động trong tuần: bit thấp nhất tương ứng với enable/disable cho thứ 2,...
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint EnableDayMap {
    get { return enableDayMap_; }
    set {
      enableDayMap_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ActiveTime);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ActiveTime other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (EnableFullTime != other.EnableFullTime) return false;
    if (EnableStart != other.EnableStart) return false;
    if (EnableEnd != other.EnableEnd) return false;
    if (EnableDayMap != other.EnableDayMap) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (EnableFullTime != false) hash ^= EnableFullTime.GetHashCode();
    if (EnableStart != 0) hash ^= EnableStart.GetHashCode();
    if (EnableEnd != 0) hash ^= EnableEnd.GetHashCode();
    if (EnableDayMap != 0) hash ^= EnableDayMap.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (EnableFullTime != false) {
      output.WriteRawTag(8);
      output.WriteBool(EnableFullTime);
    }
    if (EnableStart != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(EnableStart);
    }
    if (EnableEnd != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(EnableEnd);
    }
    if (EnableDayMap != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(EnableDayMap);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (EnableFullTime != false) {
      size += 1 + 1;
    }
    if (EnableStart != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnableStart);
    }
    if (EnableEnd != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnableEnd);
    }
    if (EnableDayMap != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(EnableDayMap);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ActiveTime other) {
    if (other == null) {
      return;
    }
    if (other.EnableFullTime != false) {
      EnableFullTime = other.EnableFullTime;
    }
    if (other.EnableStart != 0) {
      EnableStart = other.EnableStart;
    }
    if (other.EnableEnd != 0) {
      EnableEnd = other.EnableEnd;
    }
    if (other.EnableDayMap != 0) {
      EnableDayMap = other.EnableDayMap;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          EnableFullTime = input.ReadBool();
          break;
        }
        case 16: {
          EnableStart = input.ReadUInt32();
          break;
        }
        case 24: {
          EnableEnd = input.ReadUInt32();
          break;
        }
        case 32: {
          EnableDayMap = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin kịch bản
/// </summary>
public sealed partial class Scene : pb::IMessage<Scene> {
  private static readonly pb::MessageParser<Scene> _parser = new pb::MessageParser<Scene>(() => new Scene());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<Scene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene(Scene other) : this() {
    id_ = other.id_;
    homeId_ = other.homeId_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    icon_ = other.icon_;
    favorite_ = other.favorite_;
    condition_ = other.condition_;
    switcherCondition_ = other.switcherCondition_ != null ? other.switcherCondition_.Clone() : null;
    powerState_ = other.powerState_;
    sceneSwitcherActions_ = other.sceneSwitcherActions_.Clone();
    curtainSwitcherActions_ = other.curtainSwitcherActions_.Clone();
    airConditionerActions_ = other.airConditionerActions_.Clone();
    sceneRemoteActions_ = other.sceneRemoteActions_.Clone();
    sceneMotionActions_ = other.sceneMotionActions_.Clone();
    type_ = other.type_;
    confirmed_ = other.confirmed_;
    motionCondition_ = other.motionCondition_ != null ? other.motionCondition_.Clone() : null;
    activeTime_ = other.activeTime_ != null ? other.activeTime_.Clone() : null;
    isDisable_ = other.isDisable_;
    actionListIcon_ = other.actionListIcon_;
    schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
    sceneLedDriverActions_ = other.sceneLedDriverActions_.Clone();
    buttonCondition_ = other.buttonCondition_ != null ? other.buttonCondition_.Clone() : null;
    ledDriverCondition_ = other.ledDriverCondition_ != null ? other.ledDriverCondition_.Clone() : null;
    environmentSensorsCondition_ = other.environmentSensorsCondition_ != null ? other.environmentSensorsCondition_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public Scene Clone() {
    return new Scene(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  /// <summary>
  /// Id
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "homeId" field.</summary>
  public const int HomeIdFieldNumber = 2;
  private string homeId_ = "";
  /// <summary>
  /// HomeId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HomeId {
    get { return homeId_; }
    set {
      homeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  /// <summary>
  /// Tên
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 4;
  private string nameEn_ = "";
  /// <summary>
  /// Tên tiếng anh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 5;
  private string icon_ = "";
  /// <summary>
  /// Icon
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 6;
  private bool favorite_;
  /// <summary>
  /// Yêu thích
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "condition" field.</summary>
  public const int ConditionFieldNumber = 7;
  private global::ConditionScene condition_ = global::ConditionScene.AutoCondition;
  /// <summary>
  /// AUTO/MANUAL/Timeline enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConditionScene Condition {
    get { return condition_; }
    set {
      condition_ = value;
    }
  }

  /// <summary>Field number for the "switcherCondition" field.</summary>
  public const int SwitcherConditionFieldNumber = 8;
  private global::Switcher switcherCondition_;
  /// <summary>
  /// Công tắc thực hiện điều kiện
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Switcher SwitcherCondition {
    get { return switcherCondition_; }
    set {
      switcherCondition_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 9;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Điều kiệu công tắc là Đóng hay Mở
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "sceneSwitcherActions" field.</summary>
  public const int SceneSwitcherActionsFieldNumber = 10;
  private static readonly pb::FieldCodec<global::SceneSwitcherAction> _repeated_sceneSwitcherActions_codec
      = pb::FieldCodec.ForMessage(82, global::SceneSwitcherAction.Parser);
  private readonly pbc::RepeatedField<global::SceneSwitcherAction> sceneSwitcherActions_ = new pbc::RepeatedField<global::SceneSwitcherAction>();
  /// <summary>
  /// Thực thi Công tắc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneSwitcherAction> SceneSwitcherActions {
    get { return sceneSwitcherActions_; }
  }

  /// <summary>Field number for the "curtainSwitcherActions" field.</summary>
  public const int CurtainSwitcherActionsFieldNumber = 11;
  private static readonly pb::FieldCodec<global::SceneCurtainSwitcherAction> _repeated_curtainSwitcherActions_codec
      = pb::FieldCodec.ForMessage(90, global::SceneCurtainSwitcherAction.Parser);
  private readonly pbc::RepeatedField<global::SceneCurtainSwitcherAction> curtainSwitcherActions_ = new pbc::RepeatedField<global::SceneCurtainSwitcherAction>();
  /// <summary>
  /// Thực thi rèm cửa
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneCurtainSwitcherAction> CurtainSwitcherActions {
    get { return curtainSwitcherActions_; }
  }

  /// <summary>Field number for the "airConditionerActions" field.</summary>
  public const int AirConditionerActionsFieldNumber = 12;
  private static readonly pb::FieldCodec<global::SceneAirConditionerAction> _repeated_airConditionerActions_codec
      = pb::FieldCodec.ForMessage(98, global::SceneAirConditionerAction.Parser);
  private readonly pbc::RepeatedField<global::SceneAirConditionerAction> airConditionerActions_ = new pbc::RepeatedField<global::SceneAirConditionerAction>();
  /// <summary>
  /// Thực thi Điều hòa
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneAirConditionerAction> AirConditionerActions {
    get { return airConditionerActions_; }
  }

  /// <summary>Field number for the "sceneRemoteActions" field.</summary>
  public const int SceneRemoteActionsFieldNumber = 13;
  private static readonly pb::FieldCodec<global::SceneRemoteAction> _repeated_sceneRemoteActions_codec
      = pb::FieldCodec.ForMessage(106, global::SceneRemoteAction.Parser);
  private readonly pbc::RepeatedField<global::SceneRemoteAction> sceneRemoteActions_ = new pbc::RepeatedField<global::SceneRemoteAction>();
  /// <summary>
  /// Thực thi Remote chung
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneRemoteAction> SceneRemoteActions {
    get { return sceneRemoteActions_; }
  }

  /// <summary>Field number for the "sceneMotionActions" field.</summary>
  public const int SceneMotionActionsFieldNumber = 14;
  private static readonly pb::FieldCodec<global::SceneMotionAction> _repeated_sceneMotionActions_codec
      = pb::FieldCodec.ForMessage(114, global::SceneMotionAction.Parser);
  private readonly pbc::RepeatedField<global::SceneMotionAction> sceneMotionActions_ = new pbc::RepeatedField<global::SceneMotionAction>();
  /// <summary>
  /// Thực thi PIR
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneMotionAction> SceneMotionActions {
    get { return sceneMotionActions_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 15;
  private uint type_;
  /// <summary>
  /// 0: Kịch bản thường, 1: Công tắc cùng On/Off, 2: Công tắc đảo ngược, 3: Cảm biến điều khiển, 4: Timeline, 5: Smart button, 6: Thiết bị điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "confirmed" field.</summary>
  public const int ConfirmedFieldNumber = 16;
  private bool confirmed_;
  /// <summary>
  /// Thiết bị đã xác nhận việc Bridge đã xong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Confirmed {
    get { return confirmed_; }
    set {
      confirmed_ = value;
    }
  }

  /// <summary>Field number for the "motionCondition" field.</summary>
  public const int MotionConditionFieldNumber = 17;
  private global::Motion motionCondition_;
  /// <summary>
  /// Điều khiện khi motion sensor active
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Motion MotionCondition {
    get { return motionCondition_; }
    set {
      motionCondition_ = value;
    }
  }

  /// <summary>Field number for the "activeTime" field.</summary>
  public const int ActiveTimeFieldNumber = 18;
  private global::ActiveTime activeTime_;
  /// <summary>
  /// Khoảng thời gian active ngữ cảnh.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActiveTime ActiveTime {
    get { return activeTime_; }
    set {
      activeTime_ = value;
    }
  }

  /// <summary>Field number for the "isDisable" field.</summary>
  public const int IsDisableFieldNumber = 19;
  private bool isDisable_;
  /// <summary>
  /// Disable/Enable kịch bản, mặc định là enable để tương thích với version cũ.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool IsDisable {
    get { return isDisable_; }
    set {
      isDisable_ = value;
    }
  }

  /// <summary>Field number for the "actionListIcon" field.</summary>
  public const int ActionListIconFieldNumber = 20;
  private string actionListIcon_ = "";
  /// <summary>
  /// Danh sách icon thiết bị thực thi.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string ActionListIcon {
    get { return actionListIcon_; }
    set {
      actionListIcon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 21;
  private global::Schedule schedule_;
  /// <summary>
  /// Điều khiển theo lịch
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Schedule Schedule {
    get { return schedule_; }
    set {
      schedule_ = value;
    }
  }

  /// <summary>Field number for the "sceneLedDriverActions" field.</summary>
  public const int SceneLedDriverActionsFieldNumber = 22;
  private static readonly pb::FieldCodec<global::SceneLedDriverAction> _repeated_sceneLedDriverActions_codec
      = pb::FieldCodec.ForMessage(178, global::SceneLedDriverAction.Parser);
  private readonly pbc::RepeatedField<global::SceneLedDriverAction> sceneLedDriverActions_ = new pbc::RepeatedField<global::SceneLedDriverAction>();
  /// <summary>
  /// Thực thi channel của led driver
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SceneLedDriverAction> SceneLedDriverActions {
    get { return sceneLedDriverActions_; }
  }

  /// <summary>Field number for the "buttonCondition" field.</summary>
  public const int ButtonConditionFieldNumber = 23;
  private global::Button buttonCondition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Button ButtonCondition {
    get { return buttonCondition_; }
    set {
      buttonCondition_ = value;
    }
  }

  /// <summary>Field number for the "ledDriverCondition" field.</summary>
  public const int LedDriverConditionFieldNumber = 24;
  private global::LedDriver ledDriverCondition_;
  /// <summary>
  /// Bổ sung Điều kiện khi device trigger trong kịch bản thiết bị điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LedDriver LedDriverCondition {
    get { return ledDriverCondition_; }
    set {
      ledDriverCondition_ = value;
    }
  }

  /// <summary>Field number for the "environmentSensorsCondition" field.</summary>
  public const int EnvironmentSensorsConditionFieldNumber = 25;
  private global::EnvironmentSensor environmentSensorsCondition_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentSensor EnvironmentSensorsCondition {
    get { return environmentSensorsCondition_; }
    set {
      environmentSensorsCondition_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as Scene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(Scene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (HomeId != other.HomeId) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (Icon != other.Icon) return false;
    if (Favorite != other.Favorite) return false;
    if (Condition != other.Condition) return false;
    if (!object.Equals(SwitcherCondition, other.SwitcherCondition)) return false;
    if (PowerState != other.PowerState) return false;
    if(!sceneSwitcherActions_.Equals(other.sceneSwitcherActions_)) return false;
    if(!curtainSwitcherActions_.Equals(other.curtainSwitcherActions_)) return false;
    if(!airConditionerActions_.Equals(other.airConditionerActions_)) return false;
    if(!sceneRemoteActions_.Equals(other.sceneRemoteActions_)) return false;
    if(!sceneMotionActions_.Equals(other.sceneMotionActions_)) return false;
    if (Type != other.Type) return false;
    if (Confirmed != other.Confirmed) return false;
    if (!object.Equals(MotionCondition, other.MotionCondition)) return false;
    if (!object.Equals(ActiveTime, other.ActiveTime)) return false;
    if (IsDisable != other.IsDisable) return false;
    if (ActionListIcon != other.ActionListIcon) return false;
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if(!sceneLedDriverActions_.Equals(other.sceneLedDriverActions_)) return false;
    if (!object.Equals(ButtonCondition, other.ButtonCondition)) return false;
    if (!object.Equals(LedDriverCondition, other.LedDriverCondition)) return false;
    if (!object.Equals(EnvironmentSensorsCondition, other.EnvironmentSensorsCondition)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (HomeId.Length != 0) hash ^= HomeId.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Condition != global::ConditionScene.AutoCondition) hash ^= Condition.GetHashCode();
    if (switcherCondition_ != null) hash ^= SwitcherCondition.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    hash ^= sceneSwitcherActions_.GetHashCode();
    hash ^= curtainSwitcherActions_.GetHashCode();
    hash ^= airConditionerActions_.GetHashCode();
    hash ^= sceneRemoteActions_.GetHashCode();
    hash ^= sceneMotionActions_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Confirmed != false) hash ^= Confirmed.GetHashCode();
    if (motionCondition_ != null) hash ^= MotionCondition.GetHashCode();
    if (activeTime_ != null) hash ^= ActiveTime.GetHashCode();
    if (IsDisable != false) hash ^= IsDisable.GetHashCode();
    if (ActionListIcon.Length != 0) hash ^= ActionListIcon.GetHashCode();
    if (schedule_ != null) hash ^= Schedule.GetHashCode();
    hash ^= sceneLedDriverActions_.GetHashCode();
    if (buttonCondition_ != null) hash ^= ButtonCondition.GetHashCode();
    if (ledDriverCondition_ != null) hash ^= LedDriverCondition.GetHashCode();
    if (environmentSensorsCondition_ != null) hash ^= EnvironmentSensorsCondition.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (HomeId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HomeId);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(NameEn);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(Icon);
    }
    if (Favorite != false) {
      output.WriteRawTag(48);
      output.WriteBool(Favorite);
    }
    if (Condition != global::ConditionScene.AutoCondition) {
      output.WriteRawTag(56);
      output.WriteEnum((int) Condition);
    }
    if (switcherCondition_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(SwitcherCondition);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(72);
      output.WriteEnum((int) PowerState);
    }
    sceneSwitcherActions_.WriteTo(output, _repeated_sceneSwitcherActions_codec);
    curtainSwitcherActions_.WriteTo(output, _repeated_curtainSwitcherActions_codec);
    airConditionerActions_.WriteTo(output, _repeated_airConditionerActions_codec);
    sceneRemoteActions_.WriteTo(output, _repeated_sceneRemoteActions_codec);
    sceneMotionActions_.WriteTo(output, _repeated_sceneMotionActions_codec);
    if (Type != 0) {
      output.WriteRawTag(120);
      output.WriteUInt32(Type);
    }
    if (Confirmed != false) {
      output.WriteRawTag(128, 1);
      output.WriteBool(Confirmed);
    }
    if (motionCondition_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(MotionCondition);
    }
    if (activeTime_ != null) {
      output.WriteRawTag(146, 1);
      output.WriteMessage(ActiveTime);
    }
    if (IsDisable != false) {
      output.WriteRawTag(152, 1);
      output.WriteBool(IsDisable);
    }
    if (ActionListIcon.Length != 0) {
      output.WriteRawTag(162, 1);
      output.WriteString(ActionListIcon);
    }
    if (schedule_ != null) {
      output.WriteRawTag(170, 1);
      output.WriteMessage(Schedule);
    }
    sceneLedDriverActions_.WriteTo(output, _repeated_sceneLedDriverActions_codec);
    if (buttonCondition_ != null) {
      output.WriteRawTag(186, 1);
      output.WriteMessage(ButtonCondition);
    }
    if (ledDriverCondition_ != null) {
      output.WriteRawTag(194, 1);
      output.WriteMessage(LedDriverCondition);
    }
    if (environmentSensorsCondition_ != null) {
      output.WriteRawTag(202, 1);
      output.WriteMessage(EnvironmentSensorsCondition);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (HomeId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HomeId);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Condition != global::ConditionScene.AutoCondition) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Condition);
    }
    if (switcherCondition_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitcherCondition);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    size += sceneSwitcherActions_.CalculateSize(_repeated_sceneSwitcherActions_codec);
    size += curtainSwitcherActions_.CalculateSize(_repeated_curtainSwitcherActions_codec);
    size += airConditionerActions_.CalculateSize(_repeated_airConditionerActions_codec);
    size += sceneRemoteActions_.CalculateSize(_repeated_sceneRemoteActions_codec);
    size += sceneMotionActions_.CalculateSize(_repeated_sceneMotionActions_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
    }
    if (Confirmed != false) {
      size += 2 + 1;
    }
    if (motionCondition_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(MotionCondition);
    }
    if (activeTime_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ActiveTime);
    }
    if (IsDisable != false) {
      size += 2 + 1;
    }
    if (ActionListIcon.Length != 0) {
      size += 2 + pb::CodedOutputStream.ComputeStringSize(ActionListIcon);
    }
    if (schedule_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    size += sceneLedDriverActions_.CalculateSize(_repeated_sceneLedDriverActions_codec);
    if (buttonCondition_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(ButtonCondition);
    }
    if (ledDriverCondition_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(LedDriverCondition);
    }
    if (environmentSensorsCondition_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(EnvironmentSensorsCondition);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(Scene other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.HomeId.Length != 0) {
      HomeId = other.HomeId;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Condition != global::ConditionScene.AutoCondition) {
      Condition = other.Condition;
    }
    if (other.switcherCondition_ != null) {
      if (switcherCondition_ == null) {
        SwitcherCondition = new global::Switcher();
      }
      SwitcherCondition.MergeFrom(other.SwitcherCondition);
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    sceneSwitcherActions_.Add(other.sceneSwitcherActions_);
    curtainSwitcherActions_.Add(other.curtainSwitcherActions_);
    airConditionerActions_.Add(other.airConditionerActions_);
    sceneRemoteActions_.Add(other.sceneRemoteActions_);
    sceneMotionActions_.Add(other.sceneMotionActions_);
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Confirmed != false) {
      Confirmed = other.Confirmed;
    }
    if (other.motionCondition_ != null) {
      if (motionCondition_ == null) {
        MotionCondition = new global::Motion();
      }
      MotionCondition.MergeFrom(other.MotionCondition);
    }
    if (other.activeTime_ != null) {
      if (activeTime_ == null) {
        ActiveTime = new global::ActiveTime();
      }
      ActiveTime.MergeFrom(other.ActiveTime);
    }
    if (other.IsDisable != false) {
      IsDisable = other.IsDisable;
    }
    if (other.ActionListIcon.Length != 0) {
      ActionListIcon = other.ActionListIcon;
    }
    if (other.schedule_ != null) {
      if (schedule_ == null) {
        Schedule = new global::Schedule();
      }
      Schedule.MergeFrom(other.Schedule);
    }
    sceneLedDriverActions_.Add(other.sceneLedDriverActions_);
    if (other.buttonCondition_ != null) {
      if (buttonCondition_ == null) {
        ButtonCondition = new global::Button();
      }
      ButtonCondition.MergeFrom(other.ButtonCondition);
    }
    if (other.ledDriverCondition_ != null) {
      if (ledDriverCondition_ == null) {
        LedDriverCondition = new global::LedDriver();
      }
      LedDriverCondition.MergeFrom(other.LedDriverCondition);
    }
    if (other.environmentSensorsCondition_ != null) {
      if (environmentSensorsCondition_ == null) {
        EnvironmentSensorsCondition = new global::EnvironmentSensor();
      }
      EnvironmentSensorsCondition.MergeFrom(other.EnvironmentSensorsCondition);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          HomeId = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          NameEn = input.ReadString();
          break;
        }
        case 42: {
          Icon = input.ReadString();
          break;
        }
        case 48: {
          Favorite = input.ReadBool();
          break;
        }
        case 56: {
          Condition = (global::ConditionScene) input.ReadEnum();
          break;
        }
        case 66: {
          if (switcherCondition_ == null) {
            SwitcherCondition = new global::Switcher();
          }
          input.ReadMessage(SwitcherCondition);
          break;
        }
        case 72: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 82: {
          sceneSwitcherActions_.AddEntriesFrom(input, _repeated_sceneSwitcherActions_codec);
          break;
        }
        case 90: {
          curtainSwitcherActions_.AddEntriesFrom(input, _repeated_curtainSwitcherActions_codec);
          break;
        }
        case 98: {
          airConditionerActions_.AddEntriesFrom(input, _repeated_airConditionerActions_codec);
          break;
        }
        case 106: {
          sceneRemoteActions_.AddEntriesFrom(input, _repeated_sceneRemoteActions_codec);
          break;
        }
        case 114: {
          sceneMotionActions_.AddEntriesFrom(input, _repeated_sceneMotionActions_codec);
          break;
        }
        case 120: {
          Type = input.ReadUInt32();
          break;
        }
        case 128: {
          Confirmed = input.ReadBool();
          break;
        }
        case 138: {
          if (motionCondition_ == null) {
            MotionCondition = new global::Motion();
          }
          input.ReadMessage(MotionCondition);
          break;
        }
        case 146: {
          if (activeTime_ == null) {
            ActiveTime = new global::ActiveTime();
          }
          input.ReadMessage(ActiveTime);
          break;
        }
        case 152: {
          IsDisable = input.ReadBool();
          break;
        }
        case 162: {
          ActionListIcon = input.ReadString();
          break;
        }
        case 170: {
          if (schedule_ == null) {
            Schedule = new global::Schedule();
          }
          input.ReadMessage(Schedule);
          break;
        }
        case 178: {
          sceneLedDriverActions_.AddEntriesFrom(input, _repeated_sceneLedDriverActions_codec);
          break;
        }
        case 186: {
          if (buttonCondition_ == null) {
            ButtonCondition = new global::Button();
          }
          input.ReadMessage(ButtonCondition);
          break;
        }
        case 194: {
          if (ledDriverCondition_ == null) {
            LedDriverCondition = new global::LedDriver();
          }
          input.ReadMessage(LedDriverCondition);
          break;
        }
        case 202: {
          if (environmentSensorsCondition_ == null) {
            EnvironmentSensorsCondition = new global::EnvironmentSensor();
          }
          input.ReadMessage(EnvironmentSensorsCondition);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin kịch bản thực thi công tắc
/// </summary>
public sealed partial class SceneSwitcherAction : pb::IMessage<SceneSwitcherAction> {
  private static readonly pb::MessageParser<SceneSwitcherAction> _parser = new pb::MessageParser<SceneSwitcherAction>(() => new SceneSwitcherAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneSwitcherAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneSwitcherAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneSwitcherAction(SceneSwitcherAction other) : this() {
    id_ = other.id_;
    sceneId_ = other.sceneId_;
    switcher_ = other.switcher_ != null ? other.switcher_.Clone() : null;
    powerState_ = other.powerState_;
    order_ = other.order_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneSwitcherAction Clone() {
    return new SceneSwitcherAction(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private string sceneId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 3;
  private global::Switcher switcher_;
  /// <summary>
  /// Công tắc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Switcher Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 4;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Trạng thái On/Off
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 5;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneSwitcherAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneSwitcherAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(Switcher, other.Switcher)) return false;
    if (PowerState != other.PowerState) return false;
    if (Order != other.Order) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (switcher_ != null) hash ^= Switcher.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (SceneId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SceneId);
    }
    if (switcher_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PowerState);
    }
    if (Order != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Order);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (switcher_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneSwitcherAction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.switcher_ != null) {
      if (switcher_ == null) {
        Switcher = new global::Switcher();
      }
      Switcher.MergeFrom(other.Switcher);
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          SceneId = input.ReadString();
          break;
        }
        case 26: {
          if (switcher_ == null) {
            Switcher = new global::Switcher();
          }
          input.ReadMessage(Switcher);
          break;
        }
        case 32: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 40: {
          Order = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin kịch bản thực thi điều hòa
/// </summary>
public sealed partial class SceneAirConditionerAction : pb::IMessage<SceneAirConditionerAction> {
  private static readonly pb::MessageParser<SceneAirConditionerAction> _parser = new pb::MessageParser<SceneAirConditionerAction>(() => new SceneAirConditionerAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneAirConditionerAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneAirConditionerAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneAirConditionerAction(SceneAirConditionerAction other) : this() {
    id_ = other.id_;
    sceneId_ = other.sceneId_;
    remote_ = other.remote_ != null ? other.remote_.Clone() : null;
    powerState_ = other.powerState_;
    temperature_ = other.temperature_;
    mode_ = other.mode_;
    swing_ = other.swing_;
    fan_ = other.fan_;
    order_ = other.order_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneAirConditionerAction Clone() {
    return new SceneAirConditionerAction(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private string sceneId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remote" field.</summary>
  public const int RemoteFieldNumber = 3;
  private global::Remote remote_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Remote Remote {
    get { return remote_; }
    set {
      remote_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 4;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Trạng thái On/Off enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "temperature" field.</summary>
  public const int TemperatureFieldNumber = 5;
  private float temperature_;
  /// <summary>
  /// Nhiệt độ cool
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Temperature {
    get { return temperature_; }
    set {
      temperature_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 6;
  private global::ModeAc mode_ = global::ModeAc.AutoMode;
  /// <summary>
  /// Enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ModeAc Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "swing" field.</summary>
  public const int SwingFieldNumber = 7;
  private global::SwingAc swing_ = global::SwingAc.AutoSwing;
  /// <summary>
  /// Enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwingAc Swing {
    get { return swing_; }
    set {
      swing_ = value;
    }
  }

  /// <summary>Field number for the "fan" field.</summary>
  public const int FanFieldNumber = 8;
  private global::FanAc fan_ = global::FanAc.AutoFan;
  /// <summary>
  /// Enum
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::FanAc Fan {
    get { return fan_; }
    set {
      fan_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 9;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneAirConditionerAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneAirConditionerAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(Remote, other.Remote)) return false;
    if (PowerState != other.PowerState) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Temperature, other.Temperature)) return false;
    if (Mode != other.Mode) return false;
    if (Swing != other.Swing) return false;
    if (Fan != other.Fan) return false;
    if (Order != other.Order) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (remote_ != null) hash ^= Remote.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (Temperature != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Temperature);
    if (Mode != global::ModeAc.AutoMode) hash ^= Mode.GetHashCode();
    if (Swing != global::SwingAc.AutoSwing) hash ^= Swing.GetHashCode();
    if (Fan != global::FanAc.AutoFan) hash ^= Fan.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (SceneId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SceneId);
    }
    if (remote_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Remote);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PowerState);
    }
    if (Temperature != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Temperature);
    }
    if (Mode != global::ModeAc.AutoMode) {
      output.WriteRawTag(48);
      output.WriteEnum((int) Mode);
    }
    if (Swing != global::SwingAc.AutoSwing) {
      output.WriteRawTag(56);
      output.WriteEnum((int) Swing);
    }
    if (Fan != global::FanAc.AutoFan) {
      output.WriteRawTag(64);
      output.WriteEnum((int) Fan);
    }
    if (Order != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(Order);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (remote_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remote);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (Temperature != 0F) {
      size += 1 + 4;
    }
    if (Mode != global::ModeAc.AutoMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Mode);
    }
    if (Swing != global::SwingAc.AutoSwing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Swing);
    }
    if (Fan != global::FanAc.AutoFan) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Fan);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneAirConditionerAction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.remote_ != null) {
      if (remote_ == null) {
        Remote = new global::Remote();
      }
      Remote.MergeFrom(other.Remote);
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.Temperature != 0F) {
      Temperature = other.Temperature;
    }
    if (other.Mode != global::ModeAc.AutoMode) {
      Mode = other.Mode;
    }
    if (other.Swing != global::SwingAc.AutoSwing) {
      Swing = other.Swing;
    }
    if (other.Fan != global::FanAc.AutoFan) {
      Fan = other.Fan;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          SceneId = input.ReadString();
          break;
        }
        case 26: {
          if (remote_ == null) {
            Remote = new global::Remote();
          }
          input.ReadMessage(Remote);
          break;
        }
        case 32: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 45: {
          Temperature = input.ReadFloat();
          break;
        }
        case 48: {
          Mode = (global::ModeAc) input.ReadEnum();
          break;
        }
        case 56: {
          Swing = (global::SwingAc) input.ReadEnum();
          break;
        }
        case 64: {
          Fan = (global::FanAc) input.ReadEnum();
          break;
        }
        case 72: {
          Order = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin kịch bản thực thi công tắc rèm cửa
/// </summary>
public sealed partial class SceneCurtainSwitcherAction : pb::IMessage<SceneCurtainSwitcherAction> {
  private static readonly pb::MessageParser<SceneCurtainSwitcherAction> _parser = new pb::MessageParser<SceneCurtainSwitcherAction>(() => new SceneCurtainSwitcherAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneCurtainSwitcherAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneCurtainSwitcherAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneCurtainSwitcherAction(SceneCurtainSwitcherAction other) : this() {
    id_ = other.id_;
    sceneId_ = other.sceneId_;
    curtainSwitcher_ = other.curtainSwitcher_ != null ? other.curtainSwitcher_.Clone() : null;
    percentIn_ = other.percentIn_;
    percentOut_ = other.percentOut_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneCurtainSwitcherAction Clone() {
    return new SceneCurtainSwitcherAction(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private string sceneId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "curtainSwitcher" field.</summary>
  public const int CurtainSwitcherFieldNumber = 3;
  private global::CurtainSwitcher curtainSwitcher_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcher CurtainSwitcher {
    get { return curtainSwitcher_; }
    set {
      curtainSwitcher_ = value;
    }
  }

  /// <summary>Field number for the "percentIn" field.</summary>
  public const int PercentInFieldNumber = 4;
  private uint percentIn_;
  /// <summary>
  /// Phần trăm hướng trong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentIn {
    get { return percentIn_; }
    set {
      percentIn_ = value;
    }
  }

  /// <summary>Field number for the "percentOut" field.</summary>
  public const int PercentOutFieldNumber = 5;
  private uint percentOut_;
  /// <summary>
  /// Phần trăm hướng ngoài
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentOut {
    get { return percentOut_; }
    set {
      percentOut_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneCurtainSwitcherAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneCurtainSwitcherAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(CurtainSwitcher, other.CurtainSwitcher)) return false;
    if (PercentIn != other.PercentIn) return false;
    if (PercentOut != other.PercentOut) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (curtainSwitcher_ != null) hash ^= CurtainSwitcher.GetHashCode();
    if (PercentIn != 0) hash ^= PercentIn.GetHashCode();
    if (PercentOut != 0) hash ^= PercentOut.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (SceneId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SceneId);
    }
    if (curtainSwitcher_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(CurtainSwitcher);
    }
    if (PercentIn != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(PercentIn);
    }
    if (PercentOut != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(PercentOut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (curtainSwitcher_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurtainSwitcher);
    }
    if (PercentIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentIn);
    }
    if (PercentOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentOut);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneCurtainSwitcherAction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.curtainSwitcher_ != null) {
      if (curtainSwitcher_ == null) {
        CurtainSwitcher = new global::CurtainSwitcher();
      }
      CurtainSwitcher.MergeFrom(other.CurtainSwitcher);
    }
    if (other.PercentIn != 0) {
      PercentIn = other.PercentIn;
    }
    if (other.PercentOut != 0) {
      PercentOut = other.PercentOut;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          SceneId = input.ReadString();
          break;
        }
        case 26: {
          if (curtainSwitcher_ == null) {
            CurtainSwitcher = new global::CurtainSwitcher();
          }
          input.ReadMessage(CurtainSwitcher);
          break;
        }
        case 32: {
          PercentIn = input.ReadUInt32();
          break;
        }
        case 40: {
          PercentOut = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin thực thi remote chung remote đơn năng/đa năng trừ công tắc/điều hòa
/// </summary>
public sealed partial class SceneRemoteAction : pb::IMessage<SceneRemoteAction> {
  private static readonly pb::MessageParser<SceneRemoteAction> _parser = new pb::MessageParser<SceneRemoteAction>(() => new SceneRemoteAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneRemoteAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneRemoteAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneRemoteAction(SceneRemoteAction other) : this() {
    id_ = other.id_;
    sceneId_ = other.sceneId_;
    remote_ = other.remote_ != null ? other.remote_.Clone() : null;
    remoteLibraryCmdId_ = other.remoteLibraryCmdId_;
    remoteMultiLibraryCmdId_ = other.remoteMultiLibraryCmdId_;
    delay_ = other.delay_;
    order_ = other.order_;
    name_ = other.name_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneRemoteAction Clone() {
    return new SceneRemoteAction(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private string sceneId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remote" field.</summary>
  public const int RemoteFieldNumber = 3;
  private global::Remote remote_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Remote Remote {
    get { return remote_; }
    set {
      remote_ = value;
    }
  }

  /// <summary>Field number for the "RemoteLibraryCmdId" field.</summary>
  public const int RemoteLibraryCmdIdFieldNumber = 4;
  private string remoteLibraryCmdId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteLibraryCmdId {
    get { return remoteLibraryCmdId_; }
    set {
      remoteLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RemoteMultiLibraryCmdId" field.</summary>
  public const int RemoteMultiLibraryCmdIdFieldNumber = 5;
  private string remoteMultiLibraryCmdId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteMultiLibraryCmdId {
    get { return remoteMultiLibraryCmdId_; }
    set {
      remoteMultiLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "delay" field.</summary>
  public const int DelayFieldNumber = 6;
  private uint delay_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Delay {
    get { return delay_; }
    set {
      delay_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 7;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 8;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneRemoteAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneRemoteAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(Remote, other.Remote)) return false;
    if (RemoteLibraryCmdId != other.RemoteLibraryCmdId) return false;
    if (RemoteMultiLibraryCmdId != other.RemoteMultiLibraryCmdId) return false;
    if (Delay != other.Delay) return false;
    if (Order != other.Order) return false;
    if (Name != other.Name) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (remote_ != null) hash ^= Remote.GetHashCode();
    if (RemoteLibraryCmdId.Length != 0) hash ^= RemoteLibraryCmdId.GetHashCode();
    if (RemoteMultiLibraryCmdId.Length != 0) hash ^= RemoteMultiLibraryCmdId.GetHashCode();
    if (Delay != 0) hash ^= Delay.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (SceneId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SceneId);
    }
    if (remote_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Remote);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(RemoteLibraryCmdId);
    }
    if (RemoteMultiLibraryCmdId.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(RemoteMultiLibraryCmdId);
    }
    if (Delay != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(Delay);
    }
    if (Order != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Order);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(66);
      output.WriteString(Name);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (remote_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Remote);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteLibraryCmdId);
    }
    if (RemoteMultiLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteMultiLibraryCmdId);
    }
    if (Delay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Delay);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneRemoteAction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.remote_ != null) {
      if (remote_ == null) {
        Remote = new global::Remote();
      }
      Remote.MergeFrom(other.Remote);
    }
    if (other.RemoteLibraryCmdId.Length != 0) {
      RemoteLibraryCmdId = other.RemoteLibraryCmdId;
    }
    if (other.RemoteMultiLibraryCmdId.Length != 0) {
      RemoteMultiLibraryCmdId = other.RemoteMultiLibraryCmdId;
    }
    if (other.Delay != 0) {
      Delay = other.Delay;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          SceneId = input.ReadString();
          break;
        }
        case 26: {
          if (remote_ == null) {
            Remote = new global::Remote();
          }
          input.ReadMessage(Remote);
          break;
        }
        case 34: {
          RemoteLibraryCmdId = input.ReadString();
          break;
        }
        case 42: {
          RemoteMultiLibraryCmdId = input.ReadString();
          break;
        }
        case 48: {
          Delay = input.ReadUInt32();
          break;
        }
        case 56: {
          Order = input.ReadUInt32();
          break;
        }
        case 66: {
          Name = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin kịch bản thực thi motion
/// </summary>
public sealed partial class SceneMotionAction : pb::IMessage<SceneMotionAction> {
  private static readonly pb::MessageParser<SceneMotionAction> _parser = new pb::MessageParser<SceneMotionAction>(() => new SceneMotionAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneMotionAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneMotionAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneMotionAction(SceneMotionAction other) : this() {
    id_ = other.id_;
    sceneId_ = other.sceneId_;
    motion_ = other.motion_ != null ? other.motion_.Clone() : null;
    state_ = other.state_;
    order_ = other.order_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneMotionAction Clone() {
    return new SceneMotionAction(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private string sceneId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "motion" field.</summary>
  public const int MotionFieldNumber = 3;
  private global::Motion motion_;
  /// <summary>
  /// Công tắc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Motion Motion {
    get { return motion_; }
    set {
      motion_ = value;
    }
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 4;
  private global::MotionState state_ = global::MotionState.MotionNone;
  /// <summary>
  /// Trạng thái PIR
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 5;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneMotionAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneMotionAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(Motion, other.Motion)) return false;
    if (State != other.State) return false;
    if (Order != other.Order) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (motion_ != null) hash ^= Motion.GetHashCode();
    if (State != global::MotionState.MotionNone) hash ^= State.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (SceneId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SceneId);
    }
    if (motion_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Motion);
    }
    if (State != global::MotionState.MotionNone) {
      output.WriteRawTag(32);
      output.WriteEnum((int) State);
    }
    if (Order != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Order);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (motion_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Motion);
    }
    if (State != global::MotionState.MotionNone) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) State);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneMotionAction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.motion_ != null) {
      if (motion_ == null) {
        Motion = new global::Motion();
      }
      Motion.MergeFrom(other.Motion);
    }
    if (other.State != global::MotionState.MotionNone) {
      State = other.State;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          SceneId = input.ReadString();
          break;
        }
        case 26: {
          if (motion_ == null) {
            Motion = new global::Motion();
          }
          input.ReadMessage(Motion);
          break;
        }
        case 32: {
          State = (global::MotionState) input.ReadEnum();
          break;
        }
        case 40: {
          Order = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin kịch bản thực thi led driver
/// </summary>
public sealed partial class SceneLedDriverAction : pb::IMessage<SceneLedDriverAction> {
  private static readonly pb::MessageParser<SceneLedDriverAction> _parser = new pb::MessageParser<SceneLedDriverAction>(() => new SceneLedDriverAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneLedDriverAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneLedDriverAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneLedDriverAction(SceneLedDriverAction other) : this() {
    id_ = other.id_;
    sceneId_ = other.sceneId_;
    ledDriver_ = other.ledDriver_ != null ? other.ledDriver_.Clone() : null;
    powerState_ = other.powerState_;
    brightnessPercent_ = other.brightnessPercent_;
    icon_ = other.icon_;
    order_ = other.order_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneLedDriverAction Clone() {
    return new SceneLedDriverAction(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private string sceneId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ledDriver" field.</summary>
  public const int LedDriverFieldNumber = 3;
  private global::LedDriver ledDriver_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LedDriver LedDriver {
    get { return ledDriver_; }
    set {
      ledDriver_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 4;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "brightnessPercent" field.</summary>
  public const int BrightnessPercentFieldNumber = 5;
  private int brightnessPercent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BrightnessPercent {
    get { return brightnessPercent_; }
    set {
      brightnessPercent_ = value;
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 6;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 7;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneLedDriverAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneLedDriverAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(LedDriver, other.LedDriver)) return false;
    if (PowerState != other.PowerState) return false;
    if (BrightnessPercent != other.BrightnessPercent) return false;
    if (Icon != other.Icon) return false;
    if (Order != other.Order) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (ledDriver_ != null) hash ^= LedDriver.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (BrightnessPercent != 0) hash ^= BrightnessPercent.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (SceneId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SceneId);
    }
    if (ledDriver_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LedDriver);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PowerState);
    }
    if (BrightnessPercent != 0) {
      output.WriteRawTag(40);
      output.WriteInt32(BrightnessPercent);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(Icon);
    }
    if (Order != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Order);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (ledDriver_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedDriver);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (BrightnessPercent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrightnessPercent);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneLedDriverAction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.ledDriver_ != null) {
      if (ledDriver_ == null) {
        LedDriver = new global::LedDriver();
      }
      LedDriver.MergeFrom(other.LedDriver);
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.BrightnessPercent != 0) {
      BrightnessPercent = other.BrightnessPercent;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          SceneId = input.ReadString();
          break;
        }
        case 26: {
          if (ledDriver_ == null) {
            LedDriver = new global::LedDriver();
          }
          input.ReadMessage(LedDriver);
          break;
        }
        case 32: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 40: {
          BrightnessPercent = input.ReadInt32();
          break;
        }
        case 50: {
          Icon = input.ReadString();
          break;
        }
        case 56: {
          Order = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class SceneButtonAction : pb::IMessage<SceneButtonAction> {
  private static readonly pb::MessageParser<SceneButtonAction> _parser = new pb::MessageParser<SceneButtonAction>(() => new SceneButtonAction());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneButtonAction> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneButtonAction() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneButtonAction(SceneButtonAction other) : this() {
    id_ = other.id_;
    sceneId_ = other.sceneId_;
    button_ = other.button_ != null ? other.button_.Clone() : null;
    buttonState_ = other.buttonState_;
    order_ = other.order_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneButtonAction Clone() {
    return new SceneButtonAction(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 2;
  private string sceneId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "button" field.</summary>
  public const int ButtonFieldNumber = 3;
  private global::Button button_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Button Button {
    get { return button_; }
    set {
      button_ = value;
    }
  }

  /// <summary>Field number for the "buttonState" field.</summary>
  public const int ButtonStateFieldNumber = 4;
  private global::ButtonState buttonState_ = global::ButtonState.Nothing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ButtonState ButtonState {
    get { return buttonState_; }
    set {
      buttonState_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 5;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneButtonAction);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneButtonAction other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(Button, other.Button)) return false;
    if (ButtonState != other.ButtonState) return false;
    if (Order != other.Order) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (button_ != null) hash ^= Button.GetHashCode();
    if (ButtonState != global::ButtonState.Nothing) hash ^= ButtonState.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (SceneId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(SceneId);
    }
    if (button_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Button);
    }
    if (ButtonState != global::ButtonState.Nothing) {
      output.WriteRawTag(32);
      output.WriteEnum((int) ButtonState);
    }
    if (Order != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Order);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (button_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Button);
    }
    if (ButtonState != global::ButtonState.Nothing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ButtonState);
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneButtonAction other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.button_ != null) {
      if (button_ == null) {
        Button = new global::Button();
      }
      Button.MergeFrom(other.Button);
    }
    if (other.ButtonState != global::ButtonState.Nothing) {
      ButtonState = other.ButtonState;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          SceneId = input.ReadString();
          break;
        }
        case 26: {
          if (button_ == null) {
            Button = new global::Button();
          }
          input.ReadMessage(Button);
          break;
        }
        case 32: {
          ButtonState = (global::ButtonState) input.ReadEnum();
          break;
        }
        case 40: {
          Order = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin nút lệnh điều khiển remote
/// </summary>
public sealed partial class RemoteCommand : pb::IMessage<RemoteCommand> {
  private static readonly pb::MessageParser<RemoteCommand> _parser = new pb::MessageParser<RemoteCommand>(() => new RemoteCommand());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemoteCommand> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteCommand() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteCommand(RemoteCommand other) : this() {
    name_ = other.name_;
    remoteLibraryCmdId_ = other.remoteLibraryCmdId_;
    remoteMultiLibraryCmdId_ = other.remoteMultiLibraryCmdId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteCommand Clone() {
    return new RemoteCommand(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  /// <summary>
  /// Tên nút lệnh, khớp ở app
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RemoteLibraryCmdId" field.</summary>
  public const int RemoteLibraryCmdIdFieldNumber = 2;
  private string remoteLibraryCmdId_ = "";
  /// <summary>
  /// Id của nút lệnh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteLibraryCmdId {
    get { return remoteLibraryCmdId_; }
    set {
      remoteLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "RemoteMultiLibraryCmdId" field.</summary>
  public const int RemoteMultiLibraryCmdIdFieldNumber = 3;
  private string remoteMultiLibraryCmdId_ = "";
  /// <summary>
  /// Id của nút lệnh đa năng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteMultiLibraryCmdId {
    get { return remoteMultiLibraryCmdId_; }
    set {
      remoteMultiLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemoteCommand);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemoteCommand other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (RemoteLibraryCmdId != other.RemoteLibraryCmdId) return false;
    if (RemoteMultiLibraryCmdId != other.RemoteMultiLibraryCmdId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (RemoteLibraryCmdId.Length != 0) hash ^= RemoteLibraryCmdId.GetHashCode();
    if (RemoteMultiLibraryCmdId.Length != 0) hash ^= RemoteMultiLibraryCmdId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RemoteLibraryCmdId);
    }
    if (RemoteMultiLibraryCmdId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(RemoteMultiLibraryCmdId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteLibraryCmdId);
    }
    if (RemoteMultiLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteMultiLibraryCmdId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemoteCommand other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.RemoteLibraryCmdId.Length != 0) {
      RemoteLibraryCmdId = other.RemoteLibraryCmdId;
    }
    if (other.RemoteMultiLibraryCmdId.Length != 0) {
      RemoteMultiLibraryCmdId = other.RemoteMultiLibraryCmdId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          RemoteLibraryCmdId = input.ReadString();
          break;
        }
        case 26: {
          RemoteMultiLibraryCmdId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thông tin phản hồi mã lỗi từ server
/// </summary>
public sealed partial class StatusCode : pb::IMessage<StatusCode> {
  private static readonly pb::MessageParser<StatusCode> _parser = new pb::MessageParser<StatusCode>(() => new StatusCode());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<StatusCode> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusCode() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusCode(StatusCode other) : this() {
    code_ = other.code_;
    message_ = other.message_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public StatusCode Clone() {
    return new StatusCode(this);
  }

  /// <summary>Field number for the "code" field.</summary>
  public const int CodeFieldNumber = 1;
  private uint code_;
  /// <summary>
  /// Mã lỗi trả về 0: Thành công, &lt;>0: Lỗi
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Code {
    get { return code_; }
    set {
      code_ = value;
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 2;
  private string message_ = "";
  /// <summary>
  /// Thông báo lỗi nếu có
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as StatusCode);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(StatusCode other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Code != other.Code) return false;
    if (Message != other.Message) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Code != 0) hash ^= Code.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Code != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Code);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Message);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Code != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Code);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(StatusCode other) {
    if (other == null) {
      return;
    }
    if (other.Code != 0) {
      Code = other.Code;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Code = input.ReadUInt32();
          break;
        }
        case 18: {
          Message = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị sử dụng trong kịch bản bắt cầu
/// </summary>
public sealed partial class DeviceInScene : pb::IMessage<DeviceInScene> {
  private static readonly pb::MessageParser<DeviceInScene> _parser = new pb::MessageParser<DeviceInScene>(() => new DeviceInScene());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeviceInScene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceInScene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceInScene(DeviceInScene other) : this() {
    switcher_ = other.switcher_ != null ? other.switcher_.Clone() : null;
    motion_ = other.motion_ != null ? other.motion_.Clone() : null;
    ledDriver_ = other.ledDriver_ != null ? other.ledDriver_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceInScene Clone() {
    return new DeviceInScene(this);
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 1;
  private global::Switcher switcher_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Switcher Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "motion" field.</summary>
  public const int MotionFieldNumber = 2;
  private global::Motion motion_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Motion Motion {
    get { return motion_; }
    set {
      motion_ = value;
    }
  }

  /// <summary>Field number for the "ledDriver" field.</summary>
  public const int LedDriverFieldNumber = 3;
  private global::LedDriver ledDriver_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LedDriver LedDriver {
    get { return ledDriver_; }
    set {
      ledDriver_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeviceInScene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeviceInScene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Switcher, other.Switcher)) return false;
    if (!object.Equals(Motion, other.Motion)) return false;
    if (!object.Equals(LedDriver, other.LedDriver)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (switcher_ != null) hash ^= Switcher.GetHashCode();
    if (motion_ != null) hash ^= Motion.GetHashCode();
    if (ledDriver_ != null) hash ^= LedDriver.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (switcher_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Switcher);
    }
    if (motion_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Motion);
    }
    if (ledDriver_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LedDriver);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (switcher_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Switcher);
    }
    if (motion_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Motion);
    }
    if (ledDriver_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedDriver);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeviceInScene other) {
    if (other == null) {
      return;
    }
    if (other.switcher_ != null) {
      if (switcher_ == null) {
        Switcher = new global::Switcher();
      }
      Switcher.MergeFrom(other.Switcher);
    }
    if (other.motion_ != null) {
      if (motion_ == null) {
        Motion = new global::Motion();
      }
      Motion.MergeFrom(other.Motion);
    }
    if (other.ledDriver_ != null) {
      if (ledDriver_ == null) {
        LedDriver = new global::LedDriver();
      }
      LedDriver.MergeFrom(other.LedDriver);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (switcher_ == null) {
            Switcher = new global::Switcher();
          }
          input.ReadMessage(Switcher);
          break;
        }
        case 18: {
          if (motion_ == null) {
            Motion = new global::Motion();
          }
          input.ReadMessage(Motion);
          break;
        }
        case 26: {
          if (ledDriver_ == null) {
            LedDriver = new global::LedDriver();
          }
          input.ReadMessage(LedDriver);
          break;
        }
      }
    }
  }

}

/// <summary>
/// State của rèm cửa (hiện tại chỉ dùng để gửi xuống device trong kịch bản trigger)
/// </summary>
public sealed partial class CurtainSwitcherState : pb::IMessage<CurtainSwitcherState> {
  private static readonly pb::MessageParser<CurtainSwitcherState> _parser = new pb::MessageParser<CurtainSwitcherState>(() => new CurtainSwitcherState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurtainSwitcherState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherState(CurtainSwitcherState other) : this() {
    percentIn_ = other.percentIn_;
    percentOut_ = other.percentOut_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherState Clone() {
    return new CurtainSwitcherState(this);
  }

  /// <summary>Field number for the "percentIn" field.</summary>
  public const int PercentInFieldNumber = 1;
  private uint percentIn_;
  /// <summary>
  /// Phần trăm hướng trong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentIn {
    get { return percentIn_; }
    set {
      percentIn_ = value;
    }
  }

  /// <summary>Field number for the "percentOut" field.</summary>
  public const int PercentOutFieldNumber = 2;
  private uint percentOut_;
  /// <summary>
  /// Phần trăm hướng ngoài
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentOut {
    get { return percentOut_; }
    set {
      percentOut_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurtainSwitcherState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurtainSwitcherState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PercentIn != other.PercentIn) return false;
    if (PercentOut != other.PercentOut) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PercentIn != 0) hash ^= PercentIn.GetHashCode();
    if (PercentOut != 0) hash ^= PercentOut.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PercentIn != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PercentIn);
    }
    if (PercentOut != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PercentOut);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PercentIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentIn);
    }
    if (PercentOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentOut);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurtainSwitcherState other) {
    if (other == null) {
      return;
    }
    if (other.PercentIn != 0) {
      PercentIn = other.PercentIn;
    }
    if (other.PercentOut != 0) {
      PercentOut = other.PercentOut;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PercentIn = input.ReadUInt32();
          break;
        }
        case 16: {
          PercentOut = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị sử dụng trong kịch bản Trigger
/// </summary>
public sealed partial class DeviceTriggerScene : pb::IMessage<DeviceTriggerScene> {
  private static readonly pb::MessageParser<DeviceTriggerScene> _parser = new pb::MessageParser<DeviceTriggerScene>(() => new DeviceTriggerScene());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeviceTriggerScene> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceTriggerScene() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceTriggerScene(DeviceTriggerScene other) : this() {
    hardwareId_ = other.hardwareId_;
    deviceIndex_ = other.deviceIndex_;
    groupControl_ = other.groupControl_;
    switch (other.ControlStateCase) {
      case ControlStateOneofCase.PowerState:
        PowerState = other.PowerState;
        break;
      case ControlStateOneofCase.MotionState:
        MotionState = other.MotionState;
        break;
      case ControlStateOneofCase.ButtonState:
        ButtonState = other.ButtonState;
        break;
      case ControlStateOneofCase.BrightnessPercent:
        BrightnessPercent = other.BrightnessPercent;
        break;
      case ControlStateOneofCase.EnvironmentValue:
        EnvironmentValue = other.EnvironmentValue;
        break;
      case ControlStateOneofCase.CurtainSwitcherState:
        CurtainSwitcherState = other.CurtainSwitcherState.Clone();
        break;
      case ControlStateOneofCase.AirConditionerState:
        AirConditionerState = other.AirConditionerState.Clone();
        break;
    }

    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceTriggerScene Clone() {
    return new DeviceTriggerScene(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceIndex" field.</summary>
  public const int DeviceIndexFieldNumber = 2;
  private uint deviceIndex_;
  /// <summary>
  /// Vị trí
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint DeviceIndex {
    get { return deviceIndex_; }
    set {
      deviceIndex_ = value;
    }
  }

  /// <summary>Field number for the "groupControl" field.</summary>
  public const int GroupControlFieldNumber = 3;
  private uint groupControl_;
  /// <summary>
  /// Nhóm điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupControl {
    get { return groupControl_; }
    set {
      groupControl_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 4;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return controlStateCase_ == ControlStateOneofCase.PowerState ? (global::PowerState) controlState_ : global::PowerState.Off; }
    set {
      controlState_ = value;
      controlStateCase_ = ControlStateOneofCase.PowerState;
    }
  }

  /// <summary>Field number for the "motionState" field.</summary>
  public const int MotionStateFieldNumber = 5;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionState MotionState {
    get { return controlStateCase_ == ControlStateOneofCase.MotionState ? (global::MotionState) controlState_ : global::MotionState.MotionNone; }
    set {
      controlState_ = value;
      controlStateCase_ = ControlStateOneofCase.MotionState;
    }
  }

  /// <summary>Field number for the "buttonState" field.</summary>
  public const int ButtonStateFieldNumber = 6;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ButtonState ButtonState {
    get { return controlStateCase_ == ControlStateOneofCase.ButtonState ? (global::ButtonState) controlState_ : global::ButtonState.Nothing; }
    set {
      controlState_ = value;
      controlStateCase_ = ControlStateOneofCase.ButtonState;
    }
  }

  /// <summary>Field number for the "brightnessPercent" field.</summary>
  public const int BrightnessPercentFieldNumber = 7;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BrightnessPercent {
    get { return controlStateCase_ == ControlStateOneofCase.BrightnessPercent ? (int) controlState_ : 0; }
    set {
      controlState_ = value;
      controlStateCase_ = ControlStateOneofCase.BrightnessPercent;
    }
  }

  /// <summary>Field number for the "environmentValue" field.</summary>
  public const int EnvironmentValueFieldNumber = 8;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float EnvironmentValue {
    get { return controlStateCase_ == ControlStateOneofCase.EnvironmentValue ? (float) controlState_ : 0F; }
    set {
      controlState_ = value;
      controlStateCase_ = ControlStateOneofCase.EnvironmentValue;
    }
  }

  /// <summary>Field number for the "curtainSwitcherState" field.</summary>
  public const int CurtainSwitcherStateFieldNumber = 9;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcherState CurtainSwitcherState {
    get { return controlStateCase_ == ControlStateOneofCase.CurtainSwitcherState ? (global::CurtainSwitcherState) controlState_ : null; }
    set {
      controlState_ = value;
      controlStateCase_ = value == null ? ControlStateOneofCase.None : ControlStateOneofCase.CurtainSwitcherState;
    }
  }

  /// <summary>Field number for the "airConditionerState" field.</summary>
  public const int AirConditionerStateFieldNumber = 10;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerState AirConditionerState {
    get { return controlStateCase_ == ControlStateOneofCase.AirConditionerState ? (global::AirConditionerState) controlState_ : null; }
    set {
      controlState_ = value;
      controlStateCase_ = value == null ? ControlStateOneofCase.None : ControlStateOneofCase.AirConditionerState;
    }
  }

  private object controlState_;
  /// <summary>Enum of possible cases for the "ControlState" oneof.</summary>
  public enum ControlStateOneofCase {
    None = 0,
    PowerState = 4,
    MotionState = 5,
    ButtonState = 6,
    BrightnessPercent = 7,
    EnvironmentValue = 8,
    CurtainSwitcherState = 9,
    AirConditionerState = 10,
  }
  private ControlStateOneofCase controlStateCase_ = ControlStateOneofCase.None;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ControlStateOneofCase ControlStateCase {
    get { return controlStateCase_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void ClearControlState() {
    controlStateCase_ = ControlStateOneofCase.None;
    controlState_ = null;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeviceTriggerScene);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeviceTriggerScene other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    if (DeviceIndex != other.DeviceIndex) return false;
    if (GroupControl != other.GroupControl) return false;
    if (PowerState != other.PowerState) return false;
    if (MotionState != other.MotionState) return false;
    if (ButtonState != other.ButtonState) return false;
    if (BrightnessPercent != other.BrightnessPercent) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(EnvironmentValue, other.EnvironmentValue)) return false;
    if (!object.Equals(CurtainSwitcherState, other.CurtainSwitcherState)) return false;
    if (!object.Equals(AirConditionerState, other.AirConditionerState)) return false;
    if (ControlStateCase != other.ControlStateCase) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (DeviceIndex != 0) hash ^= DeviceIndex.GetHashCode();
    if (GroupControl != 0) hash ^= GroupControl.GetHashCode();
    if (controlStateCase_ == ControlStateOneofCase.PowerState) hash ^= PowerState.GetHashCode();
    if (controlStateCase_ == ControlStateOneofCase.MotionState) hash ^= MotionState.GetHashCode();
    if (controlStateCase_ == ControlStateOneofCase.ButtonState) hash ^= ButtonState.GetHashCode();
    if (controlStateCase_ == ControlStateOneofCase.BrightnessPercent) hash ^= BrightnessPercent.GetHashCode();
    if (controlStateCase_ == ControlStateOneofCase.EnvironmentValue) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(EnvironmentValue);
    if (controlStateCase_ == ControlStateOneofCase.CurtainSwitcherState) hash ^= CurtainSwitcherState.GetHashCode();
    if (controlStateCase_ == ControlStateOneofCase.AirConditionerState) hash ^= AirConditionerState.GetHashCode();
    hash ^= (int) controlStateCase_;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (DeviceIndex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(DeviceIndex);
    }
    if (GroupControl != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(GroupControl);
    }
    if (controlStateCase_ == ControlStateOneofCase.PowerState) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PowerState);
    }
    if (controlStateCase_ == ControlStateOneofCase.MotionState) {
      output.WriteRawTag(40);
      output.WriteEnum((int) MotionState);
    }
    if (controlStateCase_ == ControlStateOneofCase.ButtonState) {
      output.WriteRawTag(48);
      output.WriteEnum((int) ButtonState);
    }
    if (controlStateCase_ == ControlStateOneofCase.BrightnessPercent) {
      output.WriteRawTag(56);
      output.WriteInt32(BrightnessPercent);
    }
    if (controlStateCase_ == ControlStateOneofCase.EnvironmentValue) {
      output.WriteRawTag(69);
      output.WriteFloat(EnvironmentValue);
    }
    if (controlStateCase_ == ControlStateOneofCase.CurtainSwitcherState) {
      output.WriteRawTag(74);
      output.WriteMessage(CurtainSwitcherState);
    }
    if (controlStateCase_ == ControlStateOneofCase.AirConditionerState) {
      output.WriteRawTag(82);
      output.WriteMessage(AirConditionerState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (DeviceIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(DeviceIndex);
    }
    if (GroupControl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupControl);
    }
    if (controlStateCase_ == ControlStateOneofCase.PowerState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (controlStateCase_ == ControlStateOneofCase.MotionState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotionState);
    }
    if (controlStateCase_ == ControlStateOneofCase.ButtonState) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ButtonState);
    }
    if (controlStateCase_ == ControlStateOneofCase.BrightnessPercent) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrightnessPercent);
    }
    if (controlStateCase_ == ControlStateOneofCase.EnvironmentValue) {
      size += 1 + 4;
    }
    if (controlStateCase_ == ControlStateOneofCase.CurtainSwitcherState) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurtainSwitcherState);
    }
    if (controlStateCase_ == ControlStateOneofCase.AirConditionerState) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeviceTriggerScene other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.DeviceIndex != 0) {
      DeviceIndex = other.DeviceIndex;
    }
    if (other.GroupControl != 0) {
      GroupControl = other.GroupControl;
    }
    switch (other.ControlStateCase) {
      case ControlStateOneofCase.PowerState:
        PowerState = other.PowerState;
        break;
      case ControlStateOneofCase.MotionState:
        MotionState = other.MotionState;
        break;
      case ControlStateOneofCase.ButtonState:
        ButtonState = other.ButtonState;
        break;
      case ControlStateOneofCase.BrightnessPercent:
        BrightnessPercent = other.BrightnessPercent;
        break;
      case ControlStateOneofCase.EnvironmentValue:
        EnvironmentValue = other.EnvironmentValue;
        break;
      case ControlStateOneofCase.CurtainSwitcherState:
        if (CurtainSwitcherState == null) {
          CurtainSwitcherState = new global::CurtainSwitcherState();
        }
        CurtainSwitcherState.MergeFrom(other.CurtainSwitcherState);
        break;
      case ControlStateOneofCase.AirConditionerState:
        if (AirConditionerState == null) {
          AirConditionerState = new global::AirConditionerState();
        }
        AirConditionerState.MergeFrom(other.AirConditionerState);
        break;
    }

    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
        case 16: {
          DeviceIndex = input.ReadUInt32();
          break;
        }
        case 24: {
          GroupControl = input.ReadUInt32();
          break;
        }
        case 32: {
          controlState_ = input.ReadEnum();
          controlStateCase_ = ControlStateOneofCase.PowerState;
          break;
        }
        case 40: {
          controlState_ = input.ReadEnum();
          controlStateCase_ = ControlStateOneofCase.MotionState;
          break;
        }
        case 48: {
          controlState_ = input.ReadEnum();
          controlStateCase_ = ControlStateOneofCase.ButtonState;
          break;
        }
        case 56: {
          BrightnessPercent = input.ReadInt32();
          break;
        }
        case 69: {
          EnvironmentValue = input.ReadFloat();
          break;
        }
        case 74: {
          global::CurtainSwitcherState subBuilder = new global::CurtainSwitcherState();
          if (controlStateCase_ == ControlStateOneofCase.CurtainSwitcherState) {
            subBuilder.MergeFrom(CurtainSwitcherState);
          }
          input.ReadMessage(subBuilder);
          CurtainSwitcherState = subBuilder;
          break;
        }
        case 82: {
          global::AirConditionerState subBuilder = new global::AirConditionerState();
          if (controlStateCase_ == ControlStateOneofCase.AirConditionerState) {
            subBuilder.MergeFrom(AirConditionerState);
          }
          input.ReadMessage(subBuilder);
          AirConditionerState = subBuilder;
          break;
        }
      }
    }
  }

}

public sealed partial class EnvironmentSensorReport : pb::IMessage<EnvironmentSensorReport> {
  private static readonly pb::MessageParser<EnvironmentSensorReport> _parser = new pb::MessageParser<EnvironmentSensorReport>(() => new EnvironmentSensorReport());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnvironmentSensorReport> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentSensorReport() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentSensorReport(EnvironmentSensorReport other) : this() {
    type_ = other.type_;
    value_ = other.value_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentSensorReport Clone() {
    return new EnvironmentSensorReport(this);
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 1;
  private global::EnvironmentSensorType type_ = global::EnvironmentSensorType.Unknow;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentSensorType Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "value" field.</summary>
  public const int ValueFieldNumber = 2;
  private float value_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Value {
    get { return value_; }
    set {
      value_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnvironmentSensorReport);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnvironmentSensorReport other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Type != other.Type) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Value, other.Value)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Type != global::EnvironmentSensorType.Unknow) hash ^= Type.GetHashCode();
    if (Value != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Value);
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Type != global::EnvironmentSensorType.Unknow) {
      output.WriteRawTag(8);
      output.WriteEnum((int) Type);
    }
    if (Value != 0F) {
      output.WriteRawTag(21);
      output.WriteFloat(Value);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Type != global::EnvironmentSensorType.Unknow) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (Value != 0F) {
      size += 1 + 4;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnvironmentSensorReport other) {
    if (other == null) {
      return;
    }
    if (other.Type != global::EnvironmentSensorType.Unknow) {
      Type = other.Type;
    }
    if (other.Value != 0F) {
      Value = other.Value;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Type = (global::EnvironmentSensorType) input.ReadEnum();
          break;
        }
        case 21: {
          Value = input.ReadFloat();
          break;
        }
      }
    }
  }

}

public sealed partial class EnvironmentSensor : pb::IMessage<EnvironmentSensor> {
  private static readonly pb::MessageParser<EnvironmentSensor> _parser = new pb::MessageParser<EnvironmentSensor>(() => new EnvironmentSensor());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnvironmentSensor> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentSensor() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentSensor(EnvironmentSensor other) : this() {
    id_ = other.id_;
    icon_ = other.icon_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    report_ = other.report_.Clone();
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    index_ = other.index_;
    battery_ = other.battery_;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    showHome_ = other.showHome_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentSensor Clone() {
    return new EnvironmentSensor(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 2;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 4;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "report" field.</summary>
  public const int ReportFieldNumber = 5;
  private static readonly pb::FieldCodec<global::EnvironmentSensorReport> _repeated_report_codec
      = pb::FieldCodec.ForMessage(42, global::EnvironmentSensorReport.Parser);
  private readonly pbc::RepeatedField<global::EnvironmentSensorReport> report_ = new pbc::RepeatedField<global::EnvironmentSensorReport>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::EnvironmentSensorReport> Report {
    get { return report_; }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 6;
  private bool favorite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 7;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 8;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 9;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "battery" field.</summary>
  public const int BatteryFieldNumber = 10;
  private uint battery_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Battery {
    get { return battery_; }
    set {
      battery_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 11;
  private global::Room room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Room Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "showHome" field.</summary>
  public const int ShowHomeFieldNumber = 12;
  private bool showHome_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowHome {
    get { return showHome_; }
    set {
      showHome_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnvironmentSensor);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnvironmentSensor other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Icon != other.Icon) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if(!report_.Equals(other.report_)) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (Index != other.Index) return false;
    if (Battery != other.Battery) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (ShowHome != other.ShowHome) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    hash ^= report_.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Battery != 0) hash ^= Battery.GetHashCode();
    if (room_ != null) hash ^= Room.GetHashCode();
    if (ShowHome != false) hash ^= ShowHome.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Icon);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(NameEn);
    }
    report_.WriteTo(output, _repeated_report_codec);
    if (Favorite != false) {
      output.WriteRawTag(48);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Device);
    }
    if (Index != 0) {
      output.WriteRawTag(72);
      output.WriteUInt32(Index);
    }
    if (Battery != 0) {
      output.WriteRawTag(80);
      output.WriteUInt32(Battery);
    }
    if (room_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(Room);
    }
    if (ShowHome != false) {
      output.WriteRawTag(96);
      output.WriteBool(ShowHome);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    size += report_.CalculateSize(_repeated_report_codec);
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Battery != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Battery);
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (ShowHome != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnvironmentSensor other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    report_.Add(other.report_);
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Battery != 0) {
      Battery = other.Battery;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::Room();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.ShowHome != false) {
      ShowHome = other.ShowHome;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Icon = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          NameEn = input.ReadString();
          break;
        }
        case 42: {
          report_.AddEntriesFrom(input, _repeated_report_codec);
          break;
        }
        case 48: {
          Favorite = input.ReadBool();
          break;
        }
        case 56: {
          Order = input.ReadUInt32();
          break;
        }
        case 66: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 72: {
          Index = input.ReadUInt32();
          break;
        }
        case 80: {
          Battery = input.ReadUInt32();
          break;
        }
        case 90: {
          if (room_ == null) {
            Room = new global::Room();
          }
          input.ReadMessage(Room);
          break;
        }
        case 96: {
          ShowHome = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class SmartPlug : pb::IMessage<SmartPlug> {
  private static readonly pb::MessageParser<SmartPlug> _parser = new pb::MessageParser<SmartPlug>(() => new SmartPlug());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SmartPlug> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SmartPlug() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SmartPlug(SmartPlug other) : this() {
    id_ = other.id_;
    icon_ = other.icon_;
    name_ = other.name_;
    nameEn_ = other.nameEn_;
    index_ = other.index_;
    favorite_ = other.favorite_;
    order_ = other.order_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    amp_ = other.amp_;
    power_ = other.power_;
    volt_ = other.volt_;
    room_ = other.room_ != null ? other.room_.Clone() : null;
    showHome_ = other.showHome_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SmartPlug Clone() {
    return new SmartPlug(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private string id_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Id {
    get { return id_; }
    set {
      id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "icon" field.</summary>
  public const int IconFieldNumber = 2;
  private string icon_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Icon {
    get { return icon_; }
    set {
      icon_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 3;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "nameEn" field.</summary>
  public const int NameEnFieldNumber = 4;
  private string nameEn_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string NameEn {
    get { return nameEn_; }
    set {
      nameEn_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 5;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "favorite" field.</summary>
  public const int FavoriteFieldNumber = 6;
  private bool favorite_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Favorite {
    get { return favorite_; }
    set {
      favorite_ = value;
    }
  }

  /// <summary>Field number for the "order" field.</summary>
  public const int OrderFieldNumber = 7;
  private uint order_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Order {
    get { return order_; }
    set {
      order_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 8;
  private global::Device device_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "amp" field.</summary>
  public const int AmpFieldNumber = 9;
  private float amp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Amp {
    get { return amp_; }
    set {
      amp_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 10;
  private float power_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  /// <summary>Field number for the "volt" field.</summary>
  public const int VoltFieldNumber = 11;
  private float volt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Volt {
    get { return volt_; }
    set {
      volt_ = value;
    }
  }

  /// <summary>Field number for the "room" field.</summary>
  public const int RoomFieldNumber = 12;
  private global::Room room_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Room Room {
    get { return room_; }
    set {
      room_ = value;
    }
  }

  /// <summary>Field number for the "showHome" field.</summary>
  public const int ShowHomeFieldNumber = 13;
  private bool showHome_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool ShowHome {
    get { return showHome_; }
    set {
      showHome_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SmartPlug);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SmartPlug other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (Icon != other.Icon) return false;
    if (Name != other.Name) return false;
    if (NameEn != other.NameEn) return false;
    if (Index != other.Index) return false;
    if (Favorite != other.Favorite) return false;
    if (Order != other.Order) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amp, other.Amp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volt, other.Volt)) return false;
    if (!object.Equals(Room, other.Room)) return false;
    if (ShowHome != other.ShowHome) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id.Length != 0) hash ^= Id.GetHashCode();
    if (Icon.Length != 0) hash ^= Icon.GetHashCode();
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (NameEn.Length != 0) hash ^= NameEn.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Favorite != false) hash ^= Favorite.GetHashCode();
    if (Order != 0) hash ^= Order.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (Amp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amp);
    if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
    if (Volt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volt);
    if (room_ != null) hash ^= Room.GetHashCode();
    if (ShowHome != false) hash ^= ShowHome.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Id);
    }
    if (Icon.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Icon);
    }
    if (Name.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Name);
    }
    if (NameEn.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(NameEn);
    }
    if (Index != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Index);
    }
    if (Favorite != false) {
      output.WriteRawTag(48);
      output.WriteBool(Favorite);
    }
    if (Order != 0) {
      output.WriteRawTag(56);
      output.WriteUInt32(Order);
    }
    if (device_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(Device);
    }
    if (Amp != 0F) {
      output.WriteRawTag(77);
      output.WriteFloat(Amp);
    }
    if (Power != 0F) {
      output.WriteRawTag(85);
      output.WriteFloat(Power);
    }
    if (Volt != 0F) {
      output.WriteRawTag(93);
      output.WriteFloat(Volt);
    }
    if (room_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(Room);
    }
    if (ShowHome != false) {
      output.WriteRawTag(104);
      output.WriteBool(ShowHome);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
    }
    if (Icon.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Icon);
    }
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (NameEn.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(NameEn);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Favorite != false) {
      size += 1 + 1;
    }
    if (Order != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Order);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (Amp != 0F) {
      size += 1 + 4;
    }
    if (Power != 0F) {
      size += 1 + 4;
    }
    if (Volt != 0F) {
      size += 1 + 4;
    }
    if (room_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Room);
    }
    if (ShowHome != false) {
      size += 1 + 1;
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SmartPlug other) {
    if (other == null) {
      return;
    }
    if (other.Id.Length != 0) {
      Id = other.Id;
    }
    if (other.Icon.Length != 0) {
      Icon = other.Icon;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.NameEn.Length != 0) {
      NameEn = other.NameEn;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Favorite != false) {
      Favorite = other.Favorite;
    }
    if (other.Order != 0) {
      Order = other.Order;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.Amp != 0F) {
      Amp = other.Amp;
    }
    if (other.Power != 0F) {
      Power = other.Power;
    }
    if (other.Volt != 0F) {
      Volt = other.Volt;
    }
    if (other.room_ != null) {
      if (room_ == null) {
        Room = new global::Room();
      }
      Room.MergeFrom(other.Room);
    }
    if (other.ShowHome != false) {
      ShowHome = other.ShowHome;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Id = input.ReadString();
          break;
        }
        case 18: {
          Icon = input.ReadString();
          break;
        }
        case 26: {
          Name = input.ReadString();
          break;
        }
        case 34: {
          NameEn = input.ReadString();
          break;
        }
        case 40: {
          Index = input.ReadUInt32();
          break;
        }
        case 48: {
          Favorite = input.ReadBool();
          break;
        }
        case 56: {
          Order = input.ReadUInt32();
          break;
        }
        case 66: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 77: {
          Amp = input.ReadFloat();
          break;
        }
        case 85: {
          Power = input.ReadFloat();
          break;
        }
        case 93: {
          Volt = input.ReadFloat();
          break;
        }
        case 98: {
          if (room_ == null) {
            Room = new global::Room();
          }
          input.ReadMessage(Room);
          break;
        }
        case 104: {
          ShowHome = input.ReadBool();
          break;
        }
      }
    }
  }

}

public sealed partial class UserSetting : pb::IMessage<UserSetting> {
  private static readonly pb::MessageParser<UserSetting> _parser = new pb::MessageParser<UserSetting>(() => new UserSetting());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UserSetting> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserSetting() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserSetting(UserSetting other) : this() {
    defaultHomeId_ = other.defaultHomeId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UserSetting Clone() {
    return new UserSetting(this);
  }

  /// <summary>Field number for the "defaultHomeId" field.</summary>
  public const int DefaultHomeIdFieldNumber = 1;
  private string defaultHomeId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DefaultHomeId {
    get { return defaultHomeId_; }
    set {
      defaultHomeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UserSetting);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UserSetting other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DefaultHomeId != other.DefaultHomeId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DefaultHomeId.Length != 0) hash ^= DefaultHomeId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DefaultHomeId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DefaultHomeId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DefaultHomeId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DefaultHomeId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UserSetting other) {
    if (other == null) {
      return;
    }
    if (other.DefaultHomeId.Length != 0) {
      DefaultHomeId = other.DefaultHomeId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DefaultHomeId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận yêu cầu tìm kiếm user theo key
/// </summary>
public sealed partial class FileUploadForm : pb::IMessage<FileUploadForm> {
  private static readonly pb::MessageParser<FileUploadForm> _parser = new pb::MessageParser<FileUploadForm>(() => new FileUploadForm());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<FileUploadForm> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::CommonMessageReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FileUploadForm() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FileUploadForm(FileUploadForm other) : this() {
    name_ = other.name_;
    image_ = other.image_;
    sizeInByte_ = other.sizeInByte_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public FileUploadForm Clone() {
    return new FileUploadForm(this);
  }

  /// <summary>Field number for the "name" field.</summary>
  public const int NameFieldNumber = 1;
  private string name_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Name {
    get { return name_; }
    set {
      name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "image" field.</summary>
  public const int ImageFieldNumber = 2;
  private pb::ByteString image_ = pb::ByteString.Empty;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pb::ByteString Image {
    get { return image_; }
    set {
      image_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "sizeInByte" field.</summary>
  public const int SizeInByteFieldNumber = 3;
  private uint sizeInByte_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SizeInByte {
    get { return sizeInByte_; }
    set {
      sizeInByte_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as FileUploadForm);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(FileUploadForm other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Name != other.Name) return false;
    if (Image != other.Image) return false;
    if (SizeInByte != other.SizeInByte) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Name.Length != 0) hash ^= Name.GetHashCode();
    if (Image.Length != 0) hash ^= Image.GetHashCode();
    if (SizeInByte != 0) hash ^= SizeInByte.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Name.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(Name);
    }
    if (Image.Length != 0) {
      output.WriteRawTag(18);
      output.WriteBytes(Image);
    }
    if (SizeInByte != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(SizeInByte);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Name.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
    }
    if (Image.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeBytesSize(Image);
    }
    if (SizeInByte != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SizeInByte);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(FileUploadForm other) {
    if (other == null) {
      return;
    }
    if (other.Name.Length != 0) {
      Name = other.Name;
    }
    if (other.Image.Length != 0) {
      Image = other.Image;
    }
    if (other.SizeInByte != 0) {
      SizeInByte = other.SizeInByte;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          Name = input.ReadString();
          break;
        }
        case 18: {
          Image = input.ReadBytes();
          break;
        }
        case 24: {
          SizeInByte = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
