// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: client-message.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from client-message.proto</summary>
public static partial class ClientMessageReflection {

  #region Descriptor
  /// <summary>File descriptor for client-message.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static ClientMessageReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChRjbGllbnQtbWVzc2FnZS5wcm90bxoUY29tbW9uLW1lc3NhZ2UucHJvdG8i",
          "PAomRm9yY2VVcGRhdGVGaXJtd2FyZURldmljZUNsaWVudFJlcXVlc3QSEgoK",
          "aGFyZHdhcmVJZBgBIAEoCSJdCidGb3JjZVVwZGF0ZUZpcm13YXJlRGV2aWNl",
          "Q2xpZW50UmVzcG9uc2USEAoIZGV2aWNlSWQYASABKAkSIAoKc3RhdHVzQ29k",
          "ZRjoByABKAsyCy5TdGF0dXNDb2RlIpYBChlVcGRhdGVEZXZpY2VDbGllbnRS",
          "ZXF1ZXN0EhIKCnVwZGF0ZU1vZGUYASABKA0SEgoKaGFyZHdhcmVJZBgCIAEo",
          "CRISCgpyZWFjdGl2aXR5GAMgASgNEhIKCmJyaWdodG5lc3MYBCABKA0SEQoJ",
          "dGltZURlbGF5GAUgASgNEhYKDnNjZW5lQWN0aXZlTWFwGAYgASgNIlAKGlVw",
          "ZGF0ZURldmljZUNsaWVudFJlc3BvbnNlEhAKCGRldmljZUlkGAEgASgJEiAK",
          "CnN0YXR1c0NvZGUY6AcgASgLMgsuU3RhdHVzQ29kZSJECh1VcGRhdGVXU0Vu",
          "ZHBvaW50Q2xpZW50UmVxdWVzdBIQCghkZXZpY2VJZBgBIAEoCRIRCgl3c0Vu",
          "cG9pbnQYAiABKAkiQgoeVXBkYXRlV1NFbmRwb2ludENsaWVudFJlc3BvbnNl",
          "EiAKCnN0YXR1c0NvZGUY6AcgASgLMgsuU3RhdHVzQ29kZSIvChlEZWxldGVE",
          "ZXZpY2VDbGllbnRSZXF1ZXN0EhIKCmhhcmR3YXJlSWQYASABKAkiPgoaRGVs",
          "ZXRlRGV2aWNlQ2xpZW50UmVzcG9uc2USIAoKc3RhdHVzQ29kZRjoByABKAsy",
          "Cy5TdGF0dXNDb2RlIrUBCjNQcm9ncmVzc1VwZGF0ZUZpcm13YXJlT25DaGFu",
          "Z2VkRGV2aWNlQ2xpZW50UmVzcG9uc2USEAoIZGV2aWNlSWQYASABKAkSEgoK",
          "aGFyZHdhcmVJZBgCIAEoCRIQCghwYWdlU2l6ZRgDIAEoDRIRCglwYWdlSW5k",
          "ZXgYBCABKA0SEQoJdG90YWxQYWdlGAUgASgNEiAKCnN0YXR1c0NvZGUY6Acg",
          "ASgLMgsuU3RhdHVzQ29kZSKEAQojRGV2aWNlT25DaGFuZ2VkRGV2aWNlQ2xp",
          "ZW50UmVzcG9uc2USEAoIZGV2aWNlSWQYASABKAkSKQoPY29ubmVjdGlvblN0",
          "YXRlGAIgASgOMhAuQ29ubmVjdGlvblN0YXRlEiAKCnN0YXR1c0NvZGUY6Acg",
          "ASgLMgsuU3RhdHVzQ29kZSIvChlHZXRTd2l0Y2hlcnNDbGllbnRSZXF1ZXN0",
          "EhIKCmhhcmR3YXJlSWQYASABKAkibgoaR2V0U3dpdGNoZXJzQ2xpZW50UmVz",
          "cG9uc2USHAoJc3dpdGNoZXJzGAEgASgLMgkuU3dpdGNoZXISEAoIZGV2aWNl",
          "SWQYAiABKAkSIAoKc3RhdHVzQ29kZRjoByABKAsyCy5TdGF0dXNDb2RlIkAK",
          "GEdldFN3aXRjaGVyQ2xpZW50UmVxdWVzdBIQCghzd2l0Y2hlchgBIAEoDRIS",
          "CgpoYXJkd2FyZUlkGAIgASgJIrgBChlHZXRTd2l0Y2hlckNsaWVudFJlc3Bv",
          "bnNlEhAKCHN3aXRjaGVyGAEgASgNEh8KCnBvd2VyU3RhdGUYAiABKA4yCy5Q",
          "b3dlclN0YXRlEhcKBmRldmljZRgDIAEoCzIHLkRldmljZRIbCghkYXRldGlt",
          "ZRgEIAEoCzIJLkRhdGVUaW1lEhAKCGRldmljZUlkGAUgASgJEiAKCnN0YXR1",
          "c0NvZGUY6AcgASgLMgsuU3RhdHVzQ29kZSJDChtHZXRMb2dTd2l0Y2hlckNs",
          "aWVudFJlcXVlc3QSEAoIc3dpdGNoZXIYASABKA0SEgoKaGFyZHdhcmVJZBgC",
          "IAEoCSLiAQocR2V0TG9nU3dpdGNoZXJDbGllbnRSZXNwb25zZRIQCghzd2l0",
          "Y2hlchgBIAEoDRIYChB0b3RhbFRpbWVPbk9yZ2luGAIgASgNEhcKD3RvdGFs",
          "VGltZU9uWWVhchgDIAEoDRIYChB0b3RhbFRpbWVPbk1vbnRoGAQgASgNEhYK",
          "DnRpbWVPbkxhc3REYXRlGAUgASgNEhcKD3RpbWVPZmZMYXN0RGF0ZRgGIAEo",
          "DRIQCghkZXZpY2VJZBgHIAEoCRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0",
          "YXR1c0NvZGUicAoVU3dpdGNoZXJDbGllbnRSZXF1ZXN0EhAKCGRldmljZUlk",
          "GAEgASgJEhAKCHN3aXRjaGVyGAIgASgNEh8KCnBvd2VyU3RhdGUYAyABKA4y",
          "Cy5Qb3dlclN0YXRlEhIKCmhhcmR3YXJlSWQYBCABKAkifwoWU3dpdGNoZXJD",
          "bGllbnRSZXNwb25zZRIQCghzd2l0Y2hlchgBIAEoDRIfCgpwb3dlclN0YXRl",
          "GAIgASgOMgsuUG93ZXJTdGF0ZRIQCghkZXZpY2VJZBgDIAEoCRIgCgpzdGF0",
          "dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUiZwobVXBkYXRlU3dpdGNoZXJD",
          "bGllbnRSZXF1ZXN0EhAKCHN3aXRjaGVyGAEgASgNEhEKCWtlZXBTdGF0ZRgC",
          "IAEoDRISCgpoYXJkd2FyZUlkGAMgASgJEg8KB2F1dG9PZmYYBCABKA0iiAEK",
          "HFVwZGF0ZVN3aXRjaGVyQ2xpZW50UmVzcG9uc2USEAoIZGV2aWNlSWQYASAB",
          "KAkSEAoIc3dpdGNoZXIYAiABKA0SEQoJa2VlcFN0YXRlGAMgASgNEg8KB2F1",
          "dG9PZmYYBCABKA0SIAoKc3RhdHVzQ29kZRjoByABKAsyCy5TdGF0dXNDb2Rl",
          "In4KE1VwZGF0ZVN3aXRjaGVyU3RhdGUSEAoIZGV2aWNlSWQYASABKAkSEAoI",
          "c3dpdGNoZXIYAiABKA0SEQoJa2VlcFN0YXRlGAMgASgNEg8KB2F1dG9PZmYY",
          "BCABKA0SHwoKcG93ZXJTdGF0ZRgFIAEoDjILLlBvd2VyU3RhdGUiWwogQWRk",
          "U3dpdGNoZXJTY2hlZHVsZUNsaWVudFJlcXVlc3QSIwoIc2NoZWR1bGUYASAB",
          "KAsyES5Td2l0Y2hlclNjaGVkdWxlEhIKCmhhcmR3YXJlSWQYAiABKAkicwoh",
          "QWRkU3dpdGNoZXJTY2hlZHVsZUNsaWVudFJlc3BvbnNlEhoKEnN3aXRjaGVy",
          "U2NoZWR1bGVJZBgBIAEoCRIQCghkZXZpY2VJZBgCIAEoCRIgCgpzdGF0dXND",
          "b2RlGOgHIAEoCzILLlN0YXR1c0NvZGUiXgojVXBkYXRlU3dpdGNoZXJTY2hl",
          "ZHVsZUNsaWVudFJlcXVlc3QSIwoIc2NoZWR1bGUYASABKAsyES5Td2l0Y2hl",
          "clNjaGVkdWxlEhIKCmhhcmR3YXJlSWQYAiABKAkidgokVXBkYXRlU3dpdGNo",
          "ZXJTY2hlZHVsZUNsaWVudFJlc3BvbnNlEhoKEnN3aXRjaGVyU2NoZWR1bGVJ",
          "ZBgBIAEoCRIQCghkZXZpY2VJZBgCIAEoCRIgCgpzdGF0dXNDb2RlGOgHIAEo",
          "CzILLlN0YXR1c0NvZGUiVQojRGVsZXRlU3dpdGNoZXJTY2hlZHVsZUNsaWVu",
          "dFJlcXVlc3QSGgoSc3dpdGNoZXJTY2hlZHVsZUlkGAEgASgJEhIKCmhhcmR3",
          "YXJlSWQYAiABKAkidgokRGVsZXRlU3dpdGNoZXJTY2hlZHVsZUNsaWVudFJl",
          "c3BvbnNlEhoKEnN3aXRjaGVyU2NoZWR1bGVJZBgBIAEoCRIQCghkZXZpY2VJ",
          "ZBgCIAEoCRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUipQEK",
          "H1N3aXRjaGVyT25DaGFuZ2VkQ2xpZW50UmVzcG9uc2USEAoIc3dpdGNoZXIY",
          "ASABKA0SHwoKcG93ZXJTdGF0ZRgCIAEoDjILLlBvd2VyU3RhdGUSEAoIZGV2",
          "aWNlSWQYAyABKAkSGwoGYnJpZGdlGAQgASgLMgsuQnJpZGdlSW5mbxIgCgpz",
          "dGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUiWQocQ3VydGFpblN3aXRj",
          "aGVyQ2xpZW50UmVxdWVzdBIRCglwZXJjZW50SW4YASABKA0SEgoKcGVyY2Vu",
          "dE91dBgCIAEoDRISCgpoYXJkd2FyZUlkGAMgASgJImkKJ0FkZEN1cnRhaW5T",
          "d2l0Y2hlclNjaGVkdWxlQ2xpZW50UmVxdWVzdBIqCghzY2hlZHVsZRgBIAEo",
          "CzIYLkN1cnRhaW5Td2l0Y2hlclNjaGVkdWxlEhIKCmhhcmR3YXJlSWQYAiAB",
          "KAkibAoqVXBkYXRlQ3VydGFpblN3aXRjaGVyU2NoZWR1bGVDbGllbnRSZXF1",
          "ZXN0EioKCHNjaGVkdWxlGAEgASgLMhguQ3VydGFpblN3aXRjaGVyU2NoZWR1",
          "bGUSEgoKaGFyZHdhcmVJZBgCIAEoCSJjCipEZWxldGVDdXJ0YWluU3dpdGNo",
          "ZXJTY2hlZHVsZUNsaWVudFJlcXVlc3QSIQoZY3VydGFpblN3aXRjaGVyU2No",
          "ZWR1bGVJZBgBIAEoCRISCgpoYXJkd2FyZUlkGAIgASgJInoKHUN1cnRhaW5T",
          "d2l0Y2hlckNsaWVudFJlc3BvbnNlEhEKCXBlcmNlbnRJbhgBIAEoDRISCgpw",
          "ZXJjZW50T3V0GAIgASgNEhAKCGRldmljZUlkGAMgASgJEiAKCnN0YXR1c0Nv",
          "ZGUY6AcgASgLMgsuU3RhdHVzQ29kZSKDAQomQ3VydGFpblN3aXRjaGVyT25D",
          "aGFuZ2VkQ2xpZW50UmVzcG9uc2USEQoJcGVyY2VudEluGAEgASgNEhIKCnBl",
          "cmNlbnRPdXQYAiABKA0SEAoIZGV2aWNlSWQYAyABKAkSIAoKc3RhdHVzQ29k",
          "ZRjoByABKAsyCy5TdGF0dXNDb2RlIoEBCihBZGRDdXJ0YWluU3dpdGNoZXJT",
          "Y2hlZHVsZUNsaWVudFJlc3BvbnNlEiEKGWN1cnRhaW5Td2l0Y2hlclNjaGVk",
          "dWxlSWQYASABKAkSEAoIZGV2aWNlSWQYAiABKAkSIAoKc3RhdHVzQ29kZRjo",
          "ByABKAsyCy5TdGF0dXNDb2RlIoQBCitVcGRhdGVDdXJ0YWluU3dpdGNoZXJT",
          "Y2hlZHVsZUNsaWVudFJlc3BvbnNlEiEKGWN1cnRhaW5Td2l0Y2hlclNjaGVk",
          "dWxlSWQYASABKAkSEAoIZGV2aWNlSWQYAiABKAkSIAoKc3RhdHVzQ29kZRjo",
          "ByABKAsyCy5TdGF0dXNDb2RlIoQBCitEZWxldGVDdXJ0YWluU3dpdGNoZXJT",
          "Y2hlZHVsZUNsaWVudFJlc3BvbnNlEiEKGWN1cnRhaW5Td2l0Y2hlclNjaGVk",
          "dWxlSWQYASABKAkSEAoIZGV2aWNlSWQYAiABKAkSIAoKc3RhdHVzQ29kZRjo",
          "ByABKAsyCy5TdGF0dXNDb2RlIrYBChJTY2VuZUNsaWVudFJlcXVlc3QSDwoH",
          "c2NlbmVJZBgBIAEoCRIeCgZzb3VyY2UYAiABKAsyDi5EZXZpY2VJblNjZW5l",
          "Eh4KBnRhcmdldBgDIAMoCzIOLkRldmljZUluU2NlbmUSDAoEdHlwZRgEIAEo",
          "DRIMCgRtb2RlGAUgASgNEhIKCmhhcmR3YXJlSWQYBiABKAkSHwoKYWN0aXZl",
          "VGltZRgHIAEoCzILLkFjdGl2ZVRpbWUicwoTU2NlbmVDbGllbnRSZXNwb25z",
          "ZRIPCgdzY2VuZUlkGAEgASgJEhsKCHN3aXRjaGVyGAIgASgLMgkuU3dpdGNo",
          "ZXISDAoEbW9kZRgDIAEoDRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1",
          "c0NvZGUihAEKGVNjZW5lVHJpZ2dlckNsaWVudFJlcXVlc3QSDwoHc2NlbmVJ",
          "ZBgBIAEoCRIjCgZzb3VyY2UYAiABKAsyEy5EZXZpY2VUcmlnZ2VyU2NlbmUS",
          "IwoGdGFyZ2V0GAMgAygLMhMuRGV2aWNlVHJpZ2dlclNjZW5lEgwKBG1vZGUY",
          "BSABKA0iTwoaU2NlbmVUcmlnZ2VyQ2xpZW50UmVzcG9uc2USDwoHc2NlbmVJ",
          "ZBgBIAEoCRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUiTAoT",
          "TW90aW9uQ2xpZW50UmVxdWVzdBISCgpoYXJkd2FyZUlkGAEgASgJEiEKC21v",
          "dGlvblN0YXRlGAIgASgOMgwuTW90aW9uU3RhdGUibQoUTW90aW9uQ2xpZW50",
          "UmVzcG9uc2USEAoIZGV2aWNlSWQYASABKAkSIQoLbW90aW9uU3RhdGUYAiAB",
          "KA4yDC5Nb3Rpb25TdGF0ZRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1",
          "c0NvZGUi2QEKHU1vdGlvbk9uQ2hhbmdlZENsaWVudFJlc3BvbnNlEhAKCGRl",
          "dmljZUlkGAEgASgJEiEKC21vdGlvblN0YXRlGAIgASgOMgwuTW90aW9uU3Rh",
          "dGUSGwoGYnJpZGdlGAMgASgLMgsuQnJpZGdlSW5mbxIrChBtb3Rpb25TZW5z",
          "b3JUeXBlGAQgASgOMhEuTW90aW9uU2Vuc29yVHlwZRIXCg9iYXR0ZXJ5Q2Fw",
          "YWNpdHkYBSABKAISIAoKc3RhdHVzQ29kZRjoByABKAsyCy5TdGF0dXNDb2Rl",
          "IncKHkhvbWVraXRPbkNoYW5nZWRDbGllbnRSZXNwb25zZRIQCghkZXZpY2VJ",
          "ZBgBIAEoCRIhCgtob21la2l0TW9kZRgCIAEoDjIMLkhvbWVraXRNb2RlEiAK",
          "CnN0YXR1c0NvZGUY6AcgASgLMgsuU3RhdHVzQ29kZSKwAQogU21hcnRQbHVn",
          "T25jaGFuZ2VkQ2xpZW50UmVzcG9uc2USEAoIZGV2aWNlSWQYASABKAkSDQoF",
          "aW5kZXgYAiABKA0SCwoDYW1wGAMgASgCEg0KBXBvd2VyGAQgASgCEgwKBHZv",
          "bHQYBSABKAISHwoKcG93ZXJTdGF0ZRgGIAEoDjILLlBvd2VyU3RhdGUSIAoK",
          "c3RhdHVzQ29kZRjoByABKAsyCy5TdGF0dXNDb2RlIrwBCiJFbnZpcm9ubWVu",
          "dE9uY2hhbmdlZENsaWVudFJlc3BvbnNlEhAKCGRldmljZUlkGAEgASgJEigK",
          "BnJlcG9ydBgCIAEoCzIYLkVudmlyb25tZW50U2Vuc29yUmVwb3J0EhcKD2Jh",
          "dHRlcnlDYXBhY2l0eRgDIAEoAhIfCgpicmlkZ2VJbmZvGAQgASgLMgsuQnJp",
          "ZGdlSW5mbxIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUitAEK",
          "HUJ1dHRvbk9uQ2hhbmdlZENsaWVudFJlc3BvbnNlEhAKCGRldmljZUlkGAEg",
          "ASgJEiEKC2J1dHRvblN0YXRlGAIgASgOMgwuQnV0dG9uU3RhdGUSDgoGYnV0",
          "dG9uGAMgASgNEg8KB2JhdHRlcnkYBCABKAUSGwoGYnJpZGdlGAUgASgLMgsu",
          "QnJpZGdlSW5mbxIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUi",
          "XQocTWV0ZXJPbkNoYW5nZWRDbGllbnRSZXNwb25zZRIbCgZpbmRleHMYASAD",
          "KAsyCy5NZXRlckluZGV4EiAKCnN0YXR1c0NvZGUY6AcgASgLMgsuU3RhdHVz",
          "Q29kZSJqChREZWJ1Z0xvZ2dpbmdSZXNwb25zZRIQCghkZXZpY2VJZBgBIAEo",
          "CRINCgVsYWJlbBgCIAEoCRIPCgdtZXNzYWdlGAMgASgJEiAKCnN0YXR1c0Nv",
          "ZGUY6AcgASgLMgsuU3RhdHVzQ29kZSK6AQogTGVkRHJpdmVyT25DaGFuZ2Vk",
          "Q2xpZW50UmVzcG9uc2USEAoIZGV2aWNlSWQYASABKAkSEAoIbGVkSW5kZXgY",
          "AiABKA0SGQoRYnJpZ2h0bmVzc1BlcmNlbnQYAyABKAUSHwoKcG93ZXJTdGF0",
          "ZRgEIAEoDjILLlBvd2VyU3RhdGUSFAoMZ3JvdXBDb250cm9sGAUgASgNEiAK",
          "CnN0YXR1c0NvZGUY6AcgASgLMgsuU3RhdHVzQ29kZSKHAQoTTWV0ZXJDbGll",
          "bnRSZXNwb25zZRIKCgJpZBgBIAEoDRISCgpoYXJkd2FyZUlkGAIgASgJEhsK",
          "BmluZGV4cxgDIAMoCzILLk1ldGVySW5kZXgSEQoJdGltZXN0YW1wGAQgASgN",
          "EiAKCnN0YXR1c0NvZGUY6AcgASgLMgsuU3RhdHVzQ29kZSIiChJNZXRlckNs",
          "aWVudFJlcXVlc3QSDAoEZGF0ZRgBIAEoDSJCChJNZXRlckNsaWVudENvbmZp",
          "cm0SCgoCaWQYASABKA0SIAoKc3RhdHVzQ29kZRjoByABKAsyCy5TdGF0dXND",
          "b2RlIlQKG1NldEhvbWVraXRNb2RlQ2xpZW50UmVxdWVzdBISCgpoYXJkd2Fy",
          "ZUlkGAEgASgJEiEKC2hvbWVraXRNb2RlGAIgASgOMgwuSG9tZWtpdE1vZGUi",
          "QAocU2V0SG9tZWtpdE1vZGVDbGllbnRSZXNwb25zZRIgCgpzdGF0dXNDb2Rl",
          "GOgHIAEoCzILLlN0YXR1c0NvZGUiLQorQmVnaW5VcGRhdGVGaXJtd2FyZU1l",
          "dGVyRGV2aWNlQ2xpZW50UmVxdWVzdCJQCixCZWdpblVwZGF0ZUZpcm13YXJl",
          "TWV0ZXJEZXZpY2VDbGllbnRSZXNwb25zZRIgCgpzdGF0dXNDb2RlGOgHIAEo",
          "CzILLlN0YXR1c0NvZGUibQo4UHJvZ3Jlc3NVcGRhdGVGaXJtd2FyZU9uQ2hh",
          "bmdlZE1ldGVyRGV2aWNlQ2xpZW50UmVzcG9uc2USDwoHcGVyY2VudBgBIAEo",
          "DRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUiZgobQWlyQ29u",
          "ZGl0aW9uZXJDbGllbnRSZXF1ZXN0EiMKBXN0YXRlGAEgASgLMhQuQWlyQ29u",
          "ZGl0aW9uZXJTdGF0ZRISCgpoYXJkd2FyZUlkGAIgASgJEg4KBmVuY29kZRgD",
          "IAEoCSJ3ChxBaXJDb25kaXRpb25lckNsaWVudFJlc3BvbnNlEiMKBXN0YXRl",
          "GAEgASgLMhQuQWlyQ29uZGl0aW9uZXJTdGF0ZRIQCghkZXZpY2VJZBgCIAEo",
          "CRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUiRgoeR2V0QWly",
          "Q29uZGl0aW9uZXJDbGllbnRSZXF1ZXN0EhIKCmhhcmR3YXJlSWQYASABKAkS",
          "EAoIaW5kb29ySWQYAiABKA0iegofR2V0QWlyQ29uZGl0aW9uZXJDbGllbnRS",
          "ZXNwb25zZRIjCgVzdGF0ZRgBIAEoCzIULkFpckNvbmRpdGlvbmVyU3RhdGUS",
          "EAoIZGV2aWNlSWQYAiABKAkSIAoKc3RhdHVzQ29kZRjoByABKAsyCy5TdGF0",
          "dXNDb2RlIoABCiVBaXJDb25kaXRpb25lck9uQ2hhbmdlZENsaWVudFJlc3Bv",
          "bnNlEiMKBXN0YXRlGAEgASgLMhQuQWlyQ29uZGl0aW9uZXJTdGF0ZRIQCghk",
          "ZXZpY2VJZBgCIAEoCRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0Nv",
          "ZGUiRQofQWlyQ29uZGl0aW9uZXJBZGRJbmRvb3JzUmVxdWVzdBIQCghkZXZp",
          "Y2VJZBgBIAEoCRIQCghpbmRvb3JJZBgCIAMoDSJqCiBBaXJDb25kaXRpb25l",
          "ckFkZEluZG9vcnNSZXNwb25zZRISCgpoYXJkd2FyZUlkGAEgASgJEhAKCGlu",
          "ZG9vcklkGAIgAygNEiAKCnN0YXR1c0NvZGUY6AcgASgLMgsuU3RhdHVzQ29k",
          "ZSJHCiFBaXJDb25kaXRpb25lclJlbW92ZUluZG9vclJlcXVlc3QSEAoIZGV2",
          "aWNlSWQYASABKAkSEAoIaW5kb29ySWQYAiABKA0iWgoiQWlyQ29uZGl0aW9u",
          "ZXJSZW1vdmVJbmRvb3JSZXNwb25zZRISCgpoYXJkd2FyZUlkGAEgASgJEiAK",
          "CnN0YXR1c0NvZGUY6AcgASgLMgsuU3RhdHVzQ29kZSJkCh5TZW5kQ29tbWFu",
          "ZFJlbW90ZUNsaWVudFJlcXVlc3QSFAoIY29tbWFuZHMYASADKA1CAhABEhgK",
          "BHR5cGUYAiABKA4yCi5UeXBlTGVhcm4SEgoKaGFyZHdhcmVJZBgDIAEoCSKv",
          "AQofTGVhcm5Db21tYW5kUmVtb3RlQ2xpZW50UmVxdWVzdBIQCghyZW1vdGVJ",
          "ZBgBIAEoCRIaChJyZW1vdGVMaWJyYXJ5Q21kSWQYAiABKAkSHwoXcmVtb3Rl",
          "TXV0aWxMaWJyYXJ5Q21kSWQYAyABKAkSDwoHdGltZW91dBgEIAEoDRIYCgR0",
          "eXBlGAUgASgOMgouVHlwZUxlYXJuEhIKCmhhcmR3YXJlSWQYBiABKAkiVQof",
          "U2VuZENvbW1hbmRSZW1vdGVDbGllbnRSZXNwb25zZRIQCghkZXZpY2VJZBgB",
          "IAEoCRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUi1QEKIExl",
          "YXJuQ29tbWFuZFJlbW90ZUNsaWVudFJlc3BvbnNlEhAKCHJlbW90ZUlkGAEg",
          "ASgJEhoKEnJlbW90ZUxpYnJhcnlDbWRJZBgCIAEoCRIfChdyZW1vdGVNdXRp",
          "bExpYnJhcnlDbWRJZBgDIAEoCRIUCghjb21tYW5kcxgEIAMoDUICEAESGAoE",
          "dHlwZRgFIAEoDjIKLlR5cGVMZWFybhIQCghkZXZpY2VJZBgGIAEoCRIgCgpz",
          "dGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUikAEKFkxlZERyaXZlckNs",
          "aWVudFJlcXVlc3QSEgoKaGFyZHdhcmVJZBgBIAEoCRIQCghsZWRJbmRleBgC",
          "IAEoDRIZChFicmlnaHRuZXNzUGVyY2VudBgDIAEoBRIfCgpwb3dlclN0YXRl",
          "GAQgASgOMgsuUG93ZXJTdGF0ZRIUCgxncm91cENvbnRyb2wYBSABKA0isQEK",
          "F0xlZERyaXZlckNsaWVudFJlc3BvbnNlEhAKCGRldmljZUlkGAEgASgJEhAK",
          "CGxlZEluZGV4GAIgASgFEhkKEWJyaWdodG5lc3NQZXJjZW50GAMgASgFEh8K",
          "CnBvd2VyU3RhdGUYBCABKA4yCy5Qb3dlclN0YXRlEhQKDGdyb3VwQ29udHJv",
          "bBgFIAEoDRIgCgpzdGF0dXNDb2RlGOgHIAEoCzILLlN0YXR1c0NvZGUi2QQK",
          "E0RldmljZUNsaWVudE1lc3NhZ2USVwomZm9yY2VVcGRhdGVGaXJtd2FyZURl",
          "dmljZUNsaWVudFJlcXVlc3QYASABKAsyJy5Gb3JjZVVwZGF0ZUZpcm13YXJl",
          "RGV2aWNlQ2xpZW50UmVxdWVzdBJZCidmb3JjZVVwZGF0ZUZpcm13YXJlRGV2",
          "aWNlQ2xpZW50UmVzcG9uc2UYAiABKAsyKC5Gb3JjZVVwZGF0ZUZpcm13YXJl",
          "RGV2aWNlQ2xpZW50UmVzcG9uc2USPQoZdXBkYXRlRGV2aWNlQ2xpZW50UmVx",
          "dWVzdBgDIAEoCzIaLlVwZGF0ZURldmljZUNsaWVudFJlcXVlc3QSPwoadXBk",
          "YXRlRGV2aWNlQ2xpZW50UmVzcG9uc2UYBCABKAsyGy5VcGRhdGVEZXZpY2VD",
          "bGllbnRSZXNwb25zZRJFCh11cGRhdGVXU0VuZHBvaW50Q2xpZW50UmVxdWVz",
          "dBgFIAEoCzIeLlVwZGF0ZVdTRW5kcG9pbnRDbGllbnRSZXF1ZXN0EkcKHnVw",
          "ZGF0ZVdTRW5kcG9pbnRDbGllbnRSZXNwb25zZRgGIAEoCzIfLlVwZGF0ZVdT",
          "RW5kcG9pbnRDbGllbnRSZXNwb25zZRI9ChlkZWxldGVEZXZpY2VDbGllbnRS",
          "ZXF1ZXN0GAcgASgLMhouRGVsZXRlRGV2aWNlQ2xpZW50UmVxdWVzdBI/Chpk",
          "ZWxldGVEZXZpY2VDbGllbnRSZXNwb25zZRgIIAEoCzIbLkRlbGV0ZURldmlj",
          "ZUNsaWVudFJlc3BvbnNlIrIJChVTd2l0Y2hlckNsaWVudE1lc3NhZ2USPQoZ",
          "Z2V0U3dpdGNoZXJzQ2xpZW50UmVxdWVzdBgBIAEoCzIaLkdldFN3aXRjaGVy",
          "c0NsaWVudFJlcXVlc3QSPwoaZ2V0U3dpdGNoZXJzQ2xpZW50UmVzcG9uc2UY",
          "AiABKAsyGy5HZXRTd2l0Y2hlcnNDbGllbnRSZXNwb25zZRI7ChhnZXRTd2l0",
          "Y2hlckNsaWVudFJlcXVlc3QYAyABKAsyGS5HZXRTd2l0Y2hlckNsaWVudFJl",
          "cXVlc3QSPQoZZ2V0U3dpdGNoZXJDbGllbnRSZXNwb25zZRgEIAEoCzIaLkdl",
          "dFN3aXRjaGVyQ2xpZW50UmVzcG9uc2USQQobZ2V0TG9nU3dpdGNoZXJDbGll",
          "bnRSZXF1ZXN0GAUgASgLMhwuR2V0TG9nU3dpdGNoZXJDbGllbnRSZXF1ZXN0",
          "EkMKHGdldExvZ1N3aXRjaGVyQ2xpZW50UmVzcG9uc2UYBiABKAsyHS5HZXRM",
          "b2dTd2l0Y2hlckNsaWVudFJlc3BvbnNlEjUKFXN3aXRjaGVyQ2xpZW50UmVx",
          "dWVzdBgHIAEoCzIWLlN3aXRjaGVyQ2xpZW50UmVxdWVzdBI3ChZzd2l0Y2hl",
          "ckNsaWVudFJlc3BvbnNlGAggASgLMhcuU3dpdGNoZXJDbGllbnRSZXNwb25z",
          "ZRJLCiBhZGRTd2l0Y2hlclNjaGVkdWxlQ2xpZW50UmVxdWVzdBgJIAEoCzIh",
          "LkFkZFN3aXRjaGVyU2NoZWR1bGVDbGllbnRSZXF1ZXN0Ek0KIWFkZFN3aXRj",
          "aGVyU2NoZWR1bGVDbGllbnRSZXNwb25zZRgKIAEoCzIiLkFkZFN3aXRjaGVy",
          "U2NoZWR1bGVDbGllbnRSZXNwb25zZRJRCiN1cGRhdGVTd2l0Y2hlclNjaGVk",
          "dWxlQ2xpZW50UmVxdWVzdBgLIAEoCzIkLlVwZGF0ZVN3aXRjaGVyU2NoZWR1",
          "bGVDbGllbnRSZXF1ZXN0ElMKJHVwZGF0ZVN3aXRjaGVyU2NoZWR1bGVDbGll",
          "bnRSZXNwb25zZRgMIAEoCzIlLlVwZGF0ZVN3aXRjaGVyU2NoZWR1bGVDbGll",
          "bnRSZXNwb25zZRJRCiNkZWxldGVTd2l0Y2hlclNjaGVkdWxlQ2xpZW50UmVx",
          "dWVzdBgNIAEoCzIkLkRlbGV0ZVN3aXRjaGVyU2NoZWR1bGVDbGllbnRSZXF1",
          "ZXN0ElMKJGRlbGV0ZVN3aXRjaGVyU2NoZWR1bGVDbGllbnRSZXNwb25zZRgO",
          "IAEoCzIlLkRlbGV0ZVN3aXRjaGVyU2NoZWR1bGVDbGllbnRSZXNwb25zZRJB",
          "Cht1cGRhdGVTd2l0Y2hlckNsaWVudFJlcXVlc3QYDyABKAsyHC5VcGRhdGVT",
          "d2l0Y2hlckNsaWVudFJlcXVlc3QSQwocdXBkYXRlU3dpdGNoZXJDbGllbnRS",
          "ZXNwb25zZRgQIAEoCzIdLlVwZGF0ZVN3aXRjaGVyQ2xpZW50UmVzcG9uc2US",
          "MQoTdXBkYXRlU3dpdGNoZXJTdGF0ZRgRIAEoCzIULlVwZGF0ZVN3aXRjaGVy",
          "U3RhdGUi6gUKHEN1cnRhaW5Td2l0Y2hlckNsaWVudE1lc3NhZ2USQwocY3Vy",
          "dGFpblN3aXRjaGVyQ2xpZW50UmVxdWVzdBgBIAEoCzIdLkN1cnRhaW5Td2l0",
          "Y2hlckNsaWVudFJlcXVlc3QSRQodY3VydGFpblN3aXRjaGVyQ2xpZW50UmVz",
          "cG9uc2UYAiABKAsyHi5DdXJ0YWluU3dpdGNoZXJDbGllbnRSZXNwb25zZRJZ",
          "CidhZGRDdXJ0YWluU3dpdGNoZXJTY2hlZHVsZUNsaWVudFJlcXVlc3QYAyAB",
          "KAsyKC5BZGRDdXJ0YWluU3dpdGNoZXJTY2hlZHVsZUNsaWVudFJlcXVlc3QS",
          "WwooYWRkQ3VydGFpblN3aXRjaGVyU2NoZWR1bGVDbGllbnRSZXNwb25zZRgE",
          "IAEoCzIpLkFkZEN1cnRhaW5Td2l0Y2hlclNjaGVkdWxlQ2xpZW50UmVzcG9u",
          "c2USXwoqdXBkYXRlQ3VydGFpblN3aXRjaGVyU2NoZWR1bGVDbGllbnRSZXF1",
          "ZXN0GAUgASgLMisuVXBkYXRlQ3VydGFpblN3aXRjaGVyU2NoZWR1bGVDbGll",
          "bnRSZXF1ZXN0EmEKK3VwZGF0ZUN1cnRhaW5Td2l0Y2hlclNjaGVkdWxlQ2xp",
          "ZW50UmVzcG9uc2UYBiABKAsyLC5VcGRhdGVDdXJ0YWluU3dpdGNoZXJTY2hl",
          "ZHVsZUNsaWVudFJlc3BvbnNlEl8KKmRlbGV0ZUN1cnRhaW5Td2l0Y2hlclNj",
          "aGVkdWxlQ2xpZW50UmVxdWVzdBgHIAEoCzIrLkRlbGV0ZUN1cnRhaW5Td2l0",
          "Y2hlclNjaGVkdWxlQ2xpZW50UmVxdWVzdBJhCitkZWxldGVDdXJ0YWluU3dp",
          "dGNoZXJTY2hlZHVsZUNsaWVudFJlc3BvbnNlGAggASgLMiwuRGVsZXRlQ3Vy",
          "dGFpblN3aXRjaGVyU2NoZWR1bGVDbGllbnRSZXNwb25zZSKMAQoWTGVkRHJp",
          "dmVyQ2xpZW50TWVzc2FnZRI3ChZsZWREcml2ZXJDbGllbnRSZXF1ZXN0GAEg",
          "ASgLMhcuTGVkRHJpdmVyQ2xpZW50UmVxdWVzdBI5ChdsZWREcml2ZXJDbGll",
          "bnRSZXNwb25zZRgCIAEoCzIYLkxlZERyaXZlckNsaWVudFJlc3BvbnNlIn0K",
          "E01vdGlvbkNsaWVudE1lc3NhZ2USMQoTbW90aW9uQ2xpZW50UmVxdWVzdBgB",
          "IAEoCzIULk1vdGlvbkNsaWVudFJlcXVlc3QSMwoUbW90aW9uQ2xpZW50UmVz",
          "cG9uc2UYAiABKAsyFS5Nb3Rpb25DbGllbnRSZXNwb25zZSKpAQoSTWV0ZXJD",
          "bGllbnRNZXNzYWdlEi8KEm1ldGVyQ2xpZW50UmVxdWVzdBgBIAEoCzITLk1l",
          "dGVyQ2xpZW50UmVxdWVzdBIxChNtZXRlckNsaWVudFJlc3BvbnNlGAIgASgL",
          "MhQuTWV0ZXJDbGllbnRSZXNwb25zZRIvChJNZXRlckNsaWVudENvbmZpcm0Y",
          "AyABKAsyEy5NZXRlckNsaWVudENvbmZpcm0ingEKFEhvbWVraXRDbGllbnRN",
          "ZXNzYWdlEkEKG3NldEhvbWVraXRNb2RlQ2xpZW50UmVxdWVzdBgBIAEoCzIc",
          "LlNldEhvbWVraXRNb2RlQ2xpZW50UmVxdWVzdBJDChxzZXRIb21la2l0TW9k",
          "ZUNsaWVudFJlc3BvbnNlGAIgASgLMh0uU2V0SG9tZWtpdE1vZGVDbGllbnRS",
          "ZXNwb25zZSKJAQoXU2NlbmVHcm91cENsaWVudFJlcXVlc3QSNQoVc3dpdGNo",
          "ZXJDbGllbnRSZXF1ZXN0GAEgAygLMhYuU3dpdGNoZXJDbGllbnRSZXF1ZXN0",
          "EjcKFmxlZERyaXZlckNsaWVudFJlcXVlc3QYAiADKAsyFy5MZWREcml2ZXJD",
          "bGllbnRSZXF1ZXN0IrMBChJTY2VuZUNsaWVudE1lc3NhZ2USLwoSc2NlbmVD",
          "bGllbnRSZXF1ZXN0GAEgASgLMhMuU2NlbmVDbGllbnRSZXF1ZXN0EjEKE3Nj",
          "ZW5lQ2xpZW50UmVzcG9uc2UYAiABKAsyFC5TY2VuZUNsaWVudFJlc3BvbnNl",
          "EjkKF3NjZW5lR3JvdXBDbGllbnRSZXF1ZXN0GAMgASgLMhguU2NlbmVHcm91",
          "cENsaWVudFJlcXVlc3QimwEKGVNjZW5lVHJpZ2dlckNsaWVudE1lc3NhZ2US",
          "PQoZc2NlbmVUcmlnZ2VyQ2xpZW50UmVxdWVzdBgBIAEoCzIaLlNjZW5lVHJp",
          "Z2dlckNsaWVudFJlcXVlc3QSPwoac2NlbmVUcmlnZ2VyQ2xpZW50UmVzcG9u",
          "c2UYAiABKAsyGy5TY2VuZVRyaWdnZXJDbGllbnRSZXNwb25zZSKVCAoWT25D",
          "aGFuZ2VkQ2xpZW50TWVzc2FnZRJDChxtZXRlck9uQ2hhbmdlZENsaWVudFJl",
          "c3BvbnNlGAEgASgLMh0uTWV0ZXJPbkNoYW5nZWRDbGllbnRSZXNwb25zZRJJ",
          "Ch9zd2l0Y2hlck9uQ2hhbmdlZENsaWVudFJlc3BvbnNlGAIgASgLMiAuU3dp",
          "dGNoZXJPbkNoYW5nZWRDbGllbnRSZXNwb25zZRJXCiZjdXJ0YWluU3dpdGNo",
          "ZXJPbkNoYW5nZWRDbGllbnRSZXNwb25zZRgDIAEoCzInLkN1cnRhaW5Td2l0",
          "Y2hlck9uQ2hhbmdlZENsaWVudFJlc3BvbnNlElUKJWFpckNvbmRpdGlvbmVy",
          "T25DaGFuZ2VkQ2xpZW50UmVzcG9uc2UYBCABKAsyJi5BaXJDb25kaXRpb25l",
          "ck9uQ2hhbmdlZENsaWVudFJlc3BvbnNlEnEKM3Byb2dyZXNzVXBkYXRlRmly",
          "bXdhcmVPbkNoYW5nZWREZXZpY2VDbGllbnRSZXNwb25zZRgFIAEoCzI0LlBy",
          "b2dyZXNzVXBkYXRlRmlybXdhcmVPbkNoYW5nZWREZXZpY2VDbGllbnRSZXNw",
          "b25zZRJRCiNkZXZpY2VPbkNoYW5nZWREZXZpY2VDbGllbnRSZXNwb25zZRgG",
          "IAEoCzIkLkRldmljZU9uQ2hhbmdlZERldmljZUNsaWVudFJlc3BvbnNlEkUK",
          "HW1vdGlvbk9uQ2hhbmdlZENsaWVudFJlc3BvbnNlGAcgASgLMh4uTW90aW9u",
          "T25DaGFuZ2VkQ2xpZW50UmVzcG9uc2USRwoeaG9tZWtpdE9uQ2hhbmdlZENs",
          "aWVudFJlc3BvbnNlGAggASgLMh8uSG9tZWtpdE9uQ2hhbmdlZENsaWVudFJl",
          "c3BvbnNlEkUKHWJ1dHRvbk9uQ2hhbmdlZENsaWVudFJlc3BvbnNlGAkgASgL",
          "Mh4uQnV0dG9uT25DaGFuZ2VkQ2xpZW50UmVzcG9uc2USMwoUZGVidWdMb2dn",
          "aW5nUmVzcG9uc2UYCiABKAsyFS5EZWJ1Z0xvZ2dpbmdSZXNwb25zZRJLCiBs",
          "ZWREcml2ZXJPbkNoYW5nZWRDbGllbnRSZXNwb25zZRgLIAEoCzIhLkxlZERy",
          "aXZlck9uQ2hhbmdlZENsaWVudFJlc3BvbnNlEk8KImVudmlyb25tZW50T25j",
          "aGFuZ2VkQ2xpZW50UmVzcG9uc2UYDCABKAsyIy5FbnZpcm9ubWVudE9uY2hh",
          "bmdlZENsaWVudFJlc3BvbnNlEksKIHNtYXJ0UGx1Z09uY2hhbmdlZENsaWVu",
          "dFJlc3BvbnNlGA0gASgLMiEuU21hcnRQbHVnT25jaGFuZ2VkQ2xpZW50UmVz",
          "cG9uc2Ui8QQKG0FpckNvbmRpdGlvbmVyQ2xpZW50TWVzc2FnZRJBChthaXJD",
          "b25kaXRpb25lckNsaWVudFJlcXVlc3QYASABKAsyHC5BaXJDb25kaXRpb25l",
          "ckNsaWVudFJlcXVlc3QSQwocYWlyQ29uZGl0aW9uZXJDbGllbnRSZXNwb25z",
          "ZRgCIAEoCzIdLkFpckNvbmRpdGlvbmVyQ2xpZW50UmVzcG9uc2USRwoeZ2V0",
          "QWlyQ29uZGl0aW9uZXJDbGllbnRSZXF1ZXN0GAMgASgLMh8uR2V0QWlyQ29u",
          "ZGl0aW9uZXJDbGllbnRSZXF1ZXN0EkkKH2dldEFpckNvbmRpdGlvbmVyQ2xp",
          "ZW50UmVzcG9uc2UYBCABKAsyIC5HZXRBaXJDb25kaXRpb25lckNsaWVudFJl",
          "c3BvbnNlEkkKH2FpckNvbmRpdGlvbmVyQWRkSW5kb29yc1JlcXVlc3QYBSAB",
          "KAsyIC5BaXJDb25kaXRpb25lckFkZEluZG9vcnNSZXF1ZXN0EksKIGFpckNv",
          "bmRpdGlvbmVyQWRkSW5kb29yc1Jlc3BvbnNlGAYgASgLMiEuQWlyQ29uZGl0",
          "aW9uZXJBZGRJbmRvb3JzUmVzcG9uc2USTQohYWlyQ29uZGl0aW9uZXJSZW1v",
          "dmVJbmRvb3JSZXF1ZXN0GAcgASgLMiIuQWlyQ29uZGl0aW9uZXJSZW1vdmVJ",
          "bmRvb3JSZXF1ZXN0Ek8KImFpckNvbmRpdGlvbmVyUmVtb3ZlSW5kb29yUmVz",
          "cG9uc2UYCCABKAsyIy5BaXJDb25kaXRpb25lclJlbW92ZUluZG9vclJlc3Bv",
          "bnNlIsECChNSZW1vdGVDbGllbnRNZXNzYWdlEkcKHnNlbmRDb21tYW5kUmVt",
          "b3RlQ2xpZW50UmVxdWVzdBgBIAEoCzIfLlNlbmRDb21tYW5kUmVtb3RlQ2xp",
          "ZW50UmVxdWVzdBJJCh9zZW5kQ29tbWFuZFJlbW90ZUNsaWVudFJlc3BvbnNl",
          "GAIgASgLMiAuU2VuZENvbW1hbmRSZW1vdGVDbGllbnRSZXNwb25zZRJJCh9s",
          "ZWFybkNvbW1hbmRSZW1vdGVDbGllbnRSZXF1ZXN0GAMgASgLMiAuTGVhcm5D",
          "b21tYW5kUmVtb3RlQ2xpZW50UmVxdWVzdBJLCiBsZWFybkNvbW1hbmRSZW1v",
          "dGVDbGllbnRSZXNwb25zZRgEIAEoCzIhLkxlYXJuQ29tbWFuZFJlbW90ZUNs",
          "aWVudFJlc3BvbnNlIvAECg1DbGllbnRNZXNzYWdlEjEKE2RldmljZUNsaWVu",
          "dE1lc3NhZ2UYASABKAsyFC5EZXZpY2VDbGllbnRNZXNzYWdlEjUKFXN3aXRj",
          "aGVyQ2xpZW50TWVzc2FnZRgCIAEoCzIWLlN3aXRjaGVyQ2xpZW50TWVzc2Fn",
          "ZRJDChxjdXJ0YWluU3dpdGNoZXJDbGllbnRNZXNzYWdlGAMgASgLMh0uQ3Vy",
          "dGFpblN3aXRjaGVyQ2xpZW50TWVzc2FnZRJBChthaXJDb25kaXRpb25lckNs",
          "aWVudE1lc3NhZ2UYBCABKAsyHC5BaXJDb25kaXRpb25lckNsaWVudE1lc3Nh",
          "Z2USMQoTcmVtb3RlQ2xpZW50TWVzc2FnZRgFIAEoCzIULlJlbW90ZUNsaWVu",
          "dE1lc3NhZ2USNwoWb25DaGFuZ2VkQ2xpZW50TWVzc2FnZRgGIAEoCzIXLk9u",
          "Q2hhbmdlZENsaWVudE1lc3NhZ2USMQoTbW90aW9uQ2xpZW50TWVzc2FnZRgH",
          "IAEoCzIULk1vdGlvbkNsaWVudE1lc3NhZ2USLwoSc2NlbmVDbGllbnRNZXNz",
          "YWdlGAggASgLMhMuU2NlbmVDbGllbnRNZXNzYWdlEjcKFmxlZERyaXZlckNs",
          "aWVudE1lc3NhZ2UYCSABKAsyFy5MZWREcml2ZXJDbGllbnRNZXNzYWdlEi8K",
          "Em1ldGVyQ2xpZW50TWVzc2FnZRgKIAEoCzITLk1ldGVyQ2xpZW50TWVzc2Fn",
          "ZRIzChRob21la2l0Q2xpZW50TWVzc2FnZRgLIAEoCzIVLkhvbWVraXRDbGll",
          "bnRNZXNzYWdlQjsKLmNvbS5zdW5zaGluZS5zbWFydGhvbWUuc2VydmVyLm1l",
          "c3NhZ2UucHJvdG9idWZCCUNsaWVudEJ1ZmIGcHJvdG8z"));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { global::CommonMessageReflection.Descriptor, },
        new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ForceUpdateFirmwareDeviceClientRequest), global::ForceUpdateFirmwareDeviceClientRequest.Parser, new[]{ "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ForceUpdateFirmwareDeviceClientResponse), global::ForceUpdateFirmwareDeviceClientResponse.Parser, new[]{ "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateDeviceClientRequest), global::UpdateDeviceClientRequest.Parser, new[]{ "UpdateMode", "HardwareId", "Reactivity", "Brightness", "TimeDelay", "SceneActiveMap" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateDeviceClientResponse), global::UpdateDeviceClientResponse.Parser, new[]{ "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateWSEndpointClientRequest), global::UpdateWSEndpointClientRequest.Parser, new[]{ "DeviceId", "WsEnpoint" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateWSEndpointClientResponse), global::UpdateWSEndpointClientResponse.Parser, new[]{ "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteDeviceClientRequest), global::DeleteDeviceClientRequest.Parser, new[]{ "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteDeviceClientResponse), global::DeleteDeviceClientResponse.Parser, new[]{ "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProgressUpdateFirmwareOnChangedDeviceClientResponse), global::ProgressUpdateFirmwareOnChangedDeviceClientResponse.Parser, new[]{ "DeviceId", "HardwareId", "PageSize", "PageIndex", "TotalPage", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceOnChangedDeviceClientResponse), global::DeviceOnChangedDeviceClientResponse.Parser, new[]{ "DeviceId", "ConnectionState", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetSwitchersClientRequest), global::GetSwitchersClientRequest.Parser, new[]{ "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetSwitchersClientResponse), global::GetSwitchersClientResponse.Parser, new[]{ "Switchers", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetSwitcherClientRequest), global::GetSwitcherClientRequest.Parser, new[]{ "Switcher", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetSwitcherClientResponse), global::GetSwitcherClientResponse.Parser, new[]{ "Switcher", "PowerState", "Device", "Datetime", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetLogSwitcherClientRequest), global::GetLogSwitcherClientRequest.Parser, new[]{ "Switcher", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetLogSwitcherClientResponse), global::GetLogSwitcherClientResponse.Parser, new[]{ "Switcher", "TotalTimeOnOrgin", "TotalTimeOnYear", "TotalTimeOnMonth", "TimeOnLastDate", "TimeOffLastDate", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SwitcherClientRequest), global::SwitcherClientRequest.Parser, new[]{ "DeviceId", "Switcher", "PowerState", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SwitcherClientResponse), global::SwitcherClientResponse.Parser, new[]{ "Switcher", "PowerState", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateSwitcherClientRequest), global::UpdateSwitcherClientRequest.Parser, new[]{ "Switcher", "KeepState", "HardwareId", "AutoOff" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateSwitcherClientResponse), global::UpdateSwitcherClientResponse.Parser, new[]{ "DeviceId", "Switcher", "KeepState", "AutoOff", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateSwitcherState), global::UpdateSwitcherState.Parser, new[]{ "DeviceId", "Switcher", "KeepState", "AutoOff", "PowerState" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddSwitcherScheduleClientRequest), global::AddSwitcherScheduleClientRequest.Parser, new[]{ "Schedule", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddSwitcherScheduleClientResponse), global::AddSwitcherScheduleClientResponse.Parser, new[]{ "SwitcherScheduleId", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateSwitcherScheduleClientRequest), global::UpdateSwitcherScheduleClientRequest.Parser, new[]{ "Schedule", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateSwitcherScheduleClientResponse), global::UpdateSwitcherScheduleClientResponse.Parser, new[]{ "SwitcherScheduleId", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteSwitcherScheduleClientRequest), global::DeleteSwitcherScheduleClientRequest.Parser, new[]{ "SwitcherScheduleId", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteSwitcherScheduleClientResponse), global::DeleteSwitcherScheduleClientResponse.Parser, new[]{ "SwitcherScheduleId", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SwitcherOnChangedClientResponse), global::SwitcherOnChangedClientResponse.Parser, new[]{ "Switcher", "PowerState", "DeviceId", "Bridge", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurtainSwitcherClientRequest), global::CurtainSwitcherClientRequest.Parser, new[]{ "PercentIn", "PercentOut", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddCurtainSwitcherScheduleClientRequest), global::AddCurtainSwitcherScheduleClientRequest.Parser, new[]{ "Schedule", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateCurtainSwitcherScheduleClientRequest), global::UpdateCurtainSwitcherScheduleClientRequest.Parser, new[]{ "Schedule", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteCurtainSwitcherScheduleClientRequest), global::DeleteCurtainSwitcherScheduleClientRequest.Parser, new[]{ "CurtainSwitcherScheduleId", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurtainSwitcherClientResponse), global::CurtainSwitcherClientResponse.Parser, new[]{ "PercentIn", "PercentOut", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurtainSwitcherOnChangedClientResponse), global::CurtainSwitcherOnChangedClientResponse.Parser, new[]{ "PercentIn", "PercentOut", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AddCurtainSwitcherScheduleClientResponse), global::AddCurtainSwitcherScheduleClientResponse.Parser, new[]{ "CurtainSwitcherScheduleId", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::UpdateCurtainSwitcherScheduleClientResponse), global::UpdateCurtainSwitcherScheduleClientResponse.Parser, new[]{ "CurtainSwitcherScheduleId", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeleteCurtainSwitcherScheduleClientResponse), global::DeleteCurtainSwitcherScheduleClientResponse.Parser, new[]{ "CurtainSwitcherScheduleId", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneClientRequest), global::SceneClientRequest.Parser, new[]{ "SceneId", "Source", "Target", "Type", "Mode", "HardwareId", "ActiveTime" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneClientResponse), global::SceneClientResponse.Parser, new[]{ "SceneId", "Switcher", "Mode", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneTriggerClientRequest), global::SceneTriggerClientRequest.Parser, new[]{ "SceneId", "Source", "Target", "Mode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneTriggerClientResponse), global::SceneTriggerClientResponse.Parser, new[]{ "SceneId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MotionClientRequest), global::MotionClientRequest.Parser, new[]{ "HardwareId", "MotionState" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MotionClientResponse), global::MotionClientResponse.Parser, new[]{ "DeviceId", "MotionState", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MotionOnChangedClientResponse), global::MotionOnChangedClientResponse.Parser, new[]{ "DeviceId", "MotionState", "Bridge", "MotionSensorType", "BatteryCapacity", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HomekitOnChangedClientResponse), global::HomekitOnChangedClientResponse.Parser, new[]{ "DeviceId", "HomekitMode", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SmartPlugOnchangedClientResponse), global::SmartPlugOnchangedClientResponse.Parser, new[]{ "DeviceId", "Index", "Amp", "Power", "Volt", "PowerState", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::EnvironmentOnchangedClientResponse), global::EnvironmentOnchangedClientResponse.Parser, new[]{ "DeviceId", "Report", "BatteryCapacity", "BridgeInfo", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ButtonOnChangedClientResponse), global::ButtonOnChangedClientResponse.Parser, new[]{ "DeviceId", "ButtonState", "Button", "Battery", "Bridge", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterOnChangedClientResponse), global::MeterOnChangedClientResponse.Parser, new[]{ "Indexs", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DebugLoggingResponse), global::DebugLoggingResponse.Parser, new[]{ "DeviceId", "Label", "Message", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LedDriverOnChangedClientResponse), global::LedDriverOnChangedClientResponse.Parser, new[]{ "DeviceId", "LedIndex", "BrightnessPercent", "PowerState", "GroupControl", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterClientResponse), global::MeterClientResponse.Parser, new[]{ "Id", "HardwareId", "Indexs", "Timestamp", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterClientRequest), global::MeterClientRequest.Parser, new[]{ "Date" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterClientConfirm), global::MeterClientConfirm.Parser, new[]{ "Id", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetHomekitModeClientRequest), global::SetHomekitModeClientRequest.Parser, new[]{ "HardwareId", "HomekitMode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SetHomekitModeClientResponse), global::SetHomekitModeClientResponse.Parser, new[]{ "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BeginUpdateFirmwareMeterDeviceClientRequest), global::BeginUpdateFirmwareMeterDeviceClientRequest.Parser, null, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::BeginUpdateFirmwareMeterDeviceClientResponse), global::BeginUpdateFirmwareMeterDeviceClientResponse.Parser, new[]{ "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse), global::ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse.Parser, new[]{ "Percent", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerClientRequest), global::AirConditionerClientRequest.Parser, new[]{ "State", "HardwareId", "Encode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerClientResponse), global::AirConditionerClientResponse.Parser, new[]{ "State", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetAirConditionerClientRequest), global::GetAirConditionerClientRequest.Parser, new[]{ "HardwareId", "IndoorId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::GetAirConditionerClientResponse), global::GetAirConditionerClientResponse.Parser, new[]{ "State", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerOnChangedClientResponse), global::AirConditionerOnChangedClientResponse.Parser, new[]{ "State", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerAddIndoorsRequest), global::AirConditionerAddIndoorsRequest.Parser, new[]{ "DeviceId", "IndoorId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerAddIndoorsResponse), global::AirConditionerAddIndoorsResponse.Parser, new[]{ "HardwareId", "IndoorId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerRemoveIndoorRequest), global::AirConditionerRemoveIndoorRequest.Parser, new[]{ "DeviceId", "IndoorId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerRemoveIndoorResponse), global::AirConditionerRemoveIndoorResponse.Parser, new[]{ "HardwareId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SendCommandRemoteClientRequest), global::SendCommandRemoteClientRequest.Parser, new[]{ "Commands", "Type", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LearnCommandRemoteClientRequest), global::LearnCommandRemoteClientRequest.Parser, new[]{ "RemoteId", "RemoteLibraryCmdId", "RemoteMutilLibraryCmdId", "Timeout", "Type", "HardwareId" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SendCommandRemoteClientResponse), global::SendCommandRemoteClientResponse.Parser, new[]{ "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LearnCommandRemoteClientResponse), global::LearnCommandRemoteClientResponse.Parser, new[]{ "RemoteId", "RemoteLibraryCmdId", "RemoteMutilLibraryCmdId", "Commands", "Type", "DeviceId", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LedDriverClientRequest), global::LedDriverClientRequest.Parser, new[]{ "HardwareId", "LedIndex", "BrightnessPercent", "PowerState", "GroupControl" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LedDriverClientResponse), global::LedDriverClientResponse.Parser, new[]{ "DeviceId", "LedIndex", "BrightnessPercent", "PowerState", "GroupControl", "StatusCode" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::DeviceClientMessage), global::DeviceClientMessage.Parser, new[]{ "ForceUpdateFirmwareDeviceClientRequest", "ForceUpdateFirmwareDeviceClientResponse", "UpdateDeviceClientRequest", "UpdateDeviceClientResponse", "UpdateWSEndpointClientRequest", "UpdateWSEndpointClientResponse", "DeleteDeviceClientRequest", "DeleteDeviceClientResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SwitcherClientMessage), global::SwitcherClientMessage.Parser, new[]{ "GetSwitchersClientRequest", "GetSwitchersClientResponse", "GetSwitcherClientRequest", "GetSwitcherClientResponse", "GetLogSwitcherClientRequest", "GetLogSwitcherClientResponse", "SwitcherClientRequest", "SwitcherClientResponse", "AddSwitcherScheduleClientRequest", "AddSwitcherScheduleClientResponse", "UpdateSwitcherScheduleClientRequest", "UpdateSwitcherScheduleClientResponse", "DeleteSwitcherScheduleClientRequest", "DeleteSwitcherScheduleClientResponse", "UpdateSwitcherClientRequest", "UpdateSwitcherClientResponse", "UpdateSwitcherState" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::CurtainSwitcherClientMessage), global::CurtainSwitcherClientMessage.Parser, new[]{ "CurtainSwitcherClientRequest", "CurtainSwitcherClientResponse", "AddCurtainSwitcherScheduleClientRequest", "AddCurtainSwitcherScheduleClientResponse", "UpdateCurtainSwitcherScheduleClientRequest", "UpdateCurtainSwitcherScheduleClientResponse", "DeleteCurtainSwitcherScheduleClientRequest", "DeleteCurtainSwitcherScheduleClientResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::LedDriverClientMessage), global::LedDriverClientMessage.Parser, new[]{ "LedDriverClientRequest", "LedDriverClientResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MotionClientMessage), global::MotionClientMessage.Parser, new[]{ "MotionClientRequest", "MotionClientResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::MeterClientMessage), global::MeterClientMessage.Parser, new[]{ "MeterClientRequest", "MeterClientResponse", "MeterClientConfirm" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::HomekitClientMessage), global::HomekitClientMessage.Parser, new[]{ "SetHomekitModeClientRequest", "SetHomekitModeClientResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneGroupClientRequest), global::SceneGroupClientRequest.Parser, new[]{ "SwitcherClientRequest", "LedDriverClientRequest" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneClientMessage), global::SceneClientMessage.Parser, new[]{ "SceneClientRequest", "SceneClientResponse", "SceneGroupClientRequest" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::SceneTriggerClientMessage), global::SceneTriggerClientMessage.Parser, new[]{ "SceneTriggerClientRequest", "SceneTriggerClientResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::OnChangedClientMessage), global::OnChangedClientMessage.Parser, new[]{ "MeterOnChangedClientResponse", "SwitcherOnChangedClientResponse", "CurtainSwitcherOnChangedClientResponse", "AirConditionerOnChangedClientResponse", "ProgressUpdateFirmwareOnChangedDeviceClientResponse", "DeviceOnChangedDeviceClientResponse", "MotionOnChangedClientResponse", "HomekitOnChangedClientResponse", "ButtonOnChangedClientResponse", "DebugLoggingResponse", "LedDriverOnChangedClientResponse", "EnvironmentOnchangedClientResponse", "SmartPlugOnchangedClientResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::AirConditionerClientMessage), global::AirConditionerClientMessage.Parser, new[]{ "AirConditionerClientRequest", "AirConditionerClientResponse", "GetAirConditionerClientRequest", "GetAirConditionerClientResponse", "AirConditionerAddIndoorsRequest", "AirConditionerAddIndoorsResponse", "AirConditionerRemoveIndoorRequest", "AirConditionerRemoveIndoorResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::RemoteClientMessage), global::RemoteClientMessage.Parser, new[]{ "SendCommandRemoteClientRequest", "SendCommandRemoteClientResponse", "LearnCommandRemoteClientRequest", "LearnCommandRemoteClientResponse" }, null, null, null, null),
          new pbr::GeneratedClrTypeInfo(typeof(global::ClientMessage), global::ClientMessage.Parser, new[]{ "DeviceClientMessage", "SwitcherClientMessage", "CurtainSwitcherClientMessage", "AirConditionerClientMessage", "RemoteClientMessage", "OnChangedClientMessage", "MotionClientMessage", "SceneClientMessage", "LedDriverClientMessage", "MeterClientMessage", "HomekitClientMessage" }, null, null, null, null)
        }));
  }
  #endregion

}
#region Messages
/// <summary>
/// Nhận được yêu cầu cập nhật Firmware
/// </summary>
public sealed partial class ForceUpdateFirmwareDeviceClientRequest : pb::IMessage<ForceUpdateFirmwareDeviceClientRequest> {
  private static readonly pb::MessageParser<ForceUpdateFirmwareDeviceClientRequest> _parser = new pb::MessageParser<ForceUpdateFirmwareDeviceClientRequest>(() => new ForceUpdateFirmwareDeviceClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ForceUpdateFirmwareDeviceClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForceUpdateFirmwareDeviceClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForceUpdateFirmwareDeviceClientRequest(ForceUpdateFirmwareDeviceClientRequest other) : this() {
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForceUpdateFirmwareDeviceClientRequest Clone() {
    return new ForceUpdateFirmwareDeviceClientRequest(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ForceUpdateFirmwareDeviceClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ForceUpdateFirmwareDeviceClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ForceUpdateFirmwareDeviceClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thông tin cập nhật Firmware
/// </summary>
public sealed partial class ForceUpdateFirmwareDeviceClientResponse : pb::IMessage<ForceUpdateFirmwareDeviceClientResponse> {
  private static readonly pb::MessageParser<ForceUpdateFirmwareDeviceClientResponse> _parser = new pb::MessageParser<ForceUpdateFirmwareDeviceClientResponse>(() => new ForceUpdateFirmwareDeviceClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ForceUpdateFirmwareDeviceClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[1]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForceUpdateFirmwareDeviceClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForceUpdateFirmwareDeviceClientResponse(ForceUpdateFirmwareDeviceClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ForceUpdateFirmwareDeviceClientResponse Clone() {
    return new ForceUpdateFirmwareDeviceClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ForceUpdateFirmwareDeviceClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ForceUpdateFirmwareDeviceClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ForceUpdateFirmwareDeviceClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu cập nhật thiết bị
/// </summary>
public sealed partial class UpdateDeviceClientRequest : pb::IMessage<UpdateDeviceClientRequest> {
  private static readonly pb::MessageParser<UpdateDeviceClientRequest> _parser = new pb::MessageParser<UpdateDeviceClientRequest>(() => new UpdateDeviceClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateDeviceClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[2]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDeviceClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDeviceClientRequest(UpdateDeviceClientRequest other) : this() {
    updateMode_ = other.updateMode_;
    hardwareId_ = other.hardwareId_;
    reactivity_ = other.reactivity_;
    brightness_ = other.brightness_;
    timeDelay_ = other.timeDelay_;
    sceneActiveMap_ = other.sceneActiveMap_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDeviceClientRequest Clone() {
    return new UpdateDeviceClientRequest(this);
  }

  /// <summary>Field number for the "updateMode" field.</summary>
  public const int UpdateModeFieldNumber = 1;
  private uint updateMode_;
  /// <summary>
  /// Update tự động hoặc thủ công
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint UpdateMode {
    get { return updateMode_; }
    set {
      updateMode_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "reactivity" field.</summary>
  public const int ReactivityFieldNumber = 3;
  private uint reactivity_;
  /// <summary>
  /// Độ nhạy của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Reactivity {
    get { return reactivity_; }
    set {
      reactivity_ = value;
    }
  }

  /// <summary>Field number for the "brightness" field.</summary>
  public const int BrightnessFieldNumber = 4;
  private uint brightness_;
  /// <summary>
  /// Độ sáng của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Brightness {
    get { return brightness_; }
    set {
      brightness_ = value;
    }
  }

  /// <summary>Field number for the "timeDelay" field.</summary>
  public const int TimeDelayFieldNumber = 5;
  private uint timeDelay_;
  /// <summary>
  /// Thời gian chờ để tắt PIR
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeDelay {
    get { return timeDelay_; }
    set {
      timeDelay_ = value;
    }
  }

  /// <summary>Field number for the "sceneActiveMap" field.</summary>
  public const int SceneActiveMapFieldNumber = 6;
  private uint sceneActiveMap_;
  /// <summary>
  /// |0000|0000|0000|0000|0000|0000|0000|0000|,
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint SceneActiveMap {
    get { return sceneActiveMap_; }
    set {
      sceneActiveMap_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateDeviceClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateDeviceClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (UpdateMode != other.UpdateMode) return false;
    if (HardwareId != other.HardwareId) return false;
    if (Reactivity != other.Reactivity) return false;
    if (Brightness != other.Brightness) return false;
    if (TimeDelay != other.TimeDelay) return false;
    if (SceneActiveMap != other.SceneActiveMap) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (UpdateMode != 0) hash ^= UpdateMode.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (Reactivity != 0) hash ^= Reactivity.GetHashCode();
    if (Brightness != 0) hash ^= Brightness.GetHashCode();
    if (TimeDelay != 0) hash ^= TimeDelay.GetHashCode();
    if (SceneActiveMap != 0) hash ^= SceneActiveMap.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (UpdateMode != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(UpdateMode);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (Reactivity != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Reactivity);
    }
    if (Brightness != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Brightness);
    }
    if (TimeDelay != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(TimeDelay);
    }
    if (SceneActiveMap != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(SceneActiveMap);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (UpdateMode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(UpdateMode);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (Reactivity != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Reactivity);
    }
    if (Brightness != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Brightness);
    }
    if (TimeDelay != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeDelay);
    }
    if (SceneActiveMap != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(SceneActiveMap);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateDeviceClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.UpdateMode != 0) {
      UpdateMode = other.UpdateMode;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.Reactivity != 0) {
      Reactivity = other.Reactivity;
    }
    if (other.Brightness != 0) {
      Brightness = other.Brightness;
    }
    if (other.TimeDelay != 0) {
      TimeDelay = other.TimeDelay;
    }
    if (other.SceneActiveMap != 0) {
      SceneActiveMap = other.SceneActiveMap;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          UpdateMode = input.ReadUInt32();
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
        case 24: {
          Reactivity = input.ReadUInt32();
          break;
        }
        case 32: {
          Brightness = input.ReadUInt32();
          break;
        }
        case 40: {
          TimeDelay = input.ReadUInt32();
          break;
        }
        case 48: {
          SceneActiveMap = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi cập nhật thiết bị
/// </summary>
public sealed partial class UpdateDeviceClientResponse : pb::IMessage<UpdateDeviceClientResponse> {
  private static readonly pb::MessageParser<UpdateDeviceClientResponse> _parser = new pb::MessageParser<UpdateDeviceClientResponse>(() => new UpdateDeviceClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateDeviceClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[3]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDeviceClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDeviceClientResponse(UpdateDeviceClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateDeviceClientResponse Clone() {
    return new UpdateDeviceClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateDeviceClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateDeviceClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateDeviceClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateWSEndpointClientRequest : pb::IMessage<UpdateWSEndpointClientRequest> {
  private static readonly pb::MessageParser<UpdateWSEndpointClientRequest> _parser = new pb::MessageParser<UpdateWSEndpointClientRequest>(() => new UpdateWSEndpointClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateWSEndpointClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[4]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateWSEndpointClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateWSEndpointClientRequest(UpdateWSEndpointClientRequest other) : this() {
    deviceId_ = other.deviceId_;
    wsEnpoint_ = other.wsEnpoint_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateWSEndpointClientRequest Clone() {
    return new UpdateWSEndpointClientRequest(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "wsEnpoint" field.</summary>
  public const int WsEnpointFieldNumber = 2;
  private string wsEnpoint_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string WsEnpoint {
    get { return wsEnpoint_; }
    set {
      wsEnpoint_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateWSEndpointClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateWSEndpointClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (WsEnpoint != other.WsEnpoint) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (WsEnpoint.Length != 0) hash ^= WsEnpoint.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (WsEnpoint.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(WsEnpoint);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (WsEnpoint.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(WsEnpoint);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateWSEndpointClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.WsEnpoint.Length != 0) {
      WsEnpoint = other.WsEnpoint;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18: {
          WsEnpoint = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateWSEndpointClientResponse : pb::IMessage<UpdateWSEndpointClientResponse> {
  private static readonly pb::MessageParser<UpdateWSEndpointClientResponse> _parser = new pb::MessageParser<UpdateWSEndpointClientResponse>(() => new UpdateWSEndpointClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateWSEndpointClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[5]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateWSEndpointClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateWSEndpointClientResponse(UpdateWSEndpointClientResponse other) : this() {
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateWSEndpointClientResponse Clone() {
    return new UpdateWSEndpointClientResponse(this);
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateWSEndpointClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateWSEndpointClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateWSEndpointClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteDeviceClientRequest : pb::IMessage<DeleteDeviceClientRequest> {
  private static readonly pb::MessageParser<DeleteDeviceClientRequest> _parser = new pb::MessageParser<DeleteDeviceClientRequest>(() => new DeleteDeviceClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteDeviceClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[6]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteDeviceClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteDeviceClientRequest(DeleteDeviceClientRequest other) : this() {
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteDeviceClientRequest Clone() {
    return new DeleteDeviceClientRequest(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteDeviceClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteDeviceClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteDeviceClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

public sealed partial class DeleteDeviceClientResponse : pb::IMessage<DeleteDeviceClientResponse> {
  private static readonly pb::MessageParser<DeleteDeviceClientResponse> _parser = new pb::MessageParser<DeleteDeviceClientResponse>(() => new DeleteDeviceClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteDeviceClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[7]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteDeviceClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteDeviceClientResponse(DeleteDeviceClientResponse other) : this() {
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteDeviceClientResponse Clone() {
    return new DeleteDeviceClientResponse(this);
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteDeviceClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteDeviceClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteDeviceClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// [Deprecated]
/// Phản hồi thông tin phần trăm cập nhật firmware runtime
/// </summary>
public sealed partial class ProgressUpdateFirmwareOnChangedDeviceClientResponse : pb::IMessage<ProgressUpdateFirmwareOnChangedDeviceClientResponse> {
  private static readonly pb::MessageParser<ProgressUpdateFirmwareOnChangedDeviceClientResponse> _parser = new pb::MessageParser<ProgressUpdateFirmwareOnChangedDeviceClientResponse>(() => new ProgressUpdateFirmwareOnChangedDeviceClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProgressUpdateFirmwareOnChangedDeviceClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[8]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgressUpdateFirmwareOnChangedDeviceClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgressUpdateFirmwareOnChangedDeviceClientResponse(ProgressUpdateFirmwareOnChangedDeviceClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    hardwareId_ = other.hardwareId_;
    pageSize_ = other.pageSize_;
    pageIndex_ = other.pageIndex_;
    totalPage_ = other.totalPage_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgressUpdateFirmwareOnChangedDeviceClientResponse Clone() {
    return new ProgressUpdateFirmwareOnChangedDeviceClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// DeviceId cho việc đồng bộ tài khoản nhiều thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// HardwareId thiết bị khi qua Root
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "pageSize" field.</summary>
  public const int PageSizeFieldNumber = 3;
  private uint pageSize_;
  /// <summary>
  /// Để thiết bị biết max/len của buffer
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PageSize {
    get { return pageSize_; }
    set {
      pageSize_ = value;
    }
  }

  /// <summary>Field number for the "pageIndex" field.</summary>
  public const int PageIndexFieldNumber = 4;
  private uint pageIndex_;
  /// <summary>
  /// Vị trí index hiện tại bắt đầu từ 0
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PageIndex {
    get { return pageIndex_; }
    set {
      pageIndex_ = value;
    }
  }

  /// <summary>Field number for the "totalPage" field.</summary>
  public const int TotalPageFieldNumber = 5;
  private uint totalPage_;
  /// <summary>
  /// Tổng page
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TotalPage {
    get { return totalPage_; }
    set {
      totalPage_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProgressUpdateFirmwareOnChangedDeviceClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProgressUpdateFirmwareOnChangedDeviceClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (HardwareId != other.HardwareId) return false;
    if (PageSize != other.PageSize) return false;
    if (PageIndex != other.PageIndex) return false;
    if (TotalPage != other.TotalPage) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (PageSize != 0) hash ^= PageSize.GetHashCode();
    if (PageIndex != 0) hash ^= PageIndex.GetHashCode();
    if (TotalPage != 0) hash ^= TotalPage.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (PageSize != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(PageSize);
    }
    if (PageIndex != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(PageIndex);
    }
    if (TotalPage != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(TotalPage);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (PageSize != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageSize);
    }
    if (PageIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PageIndex);
    }
    if (TotalPage != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalPage);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProgressUpdateFirmwareOnChangedDeviceClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.PageSize != 0) {
      PageSize = other.PageSize;
    }
    if (other.PageIndex != 0) {
      PageIndex = other.PageIndex;
    }
    if (other.TotalPage != 0) {
      TotalPage = other.TotalPage;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
        case 24: {
          PageSize = input.ReadUInt32();
          break;
        }
        case 32: {
          PageIndex = input.ReadUInt32();
          break;
        }
        case 40: {
          TotalPage = input.ReadUInt32();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thông tin kết nối của các thiết bị runtime
/// </summary>
public sealed partial class DeviceOnChangedDeviceClientResponse : pb::IMessage<DeviceOnChangedDeviceClientResponse> {
  private static readonly pb::MessageParser<DeviceOnChangedDeviceClientResponse> _parser = new pb::MessageParser<DeviceOnChangedDeviceClientResponse>(() => new DeviceOnChangedDeviceClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeviceOnChangedDeviceClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[9]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceOnChangedDeviceClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceOnChangedDeviceClientResponse(DeviceOnChangedDeviceClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    connectionState_ = other.connectionState_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceOnChangedDeviceClientResponse Clone() {
    return new DeviceOnChangedDeviceClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// DeviceId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "connectionState" field.</summary>
  public const int ConnectionStateFieldNumber = 2;
  private global::ConnectionState connectionState_ = global::ConnectionState.Offline;
  /// <summary>
  /// Offline/Online/Disconect
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ConnectionState ConnectionState {
    get { return connectionState_; }
    set {
      connectionState_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeviceOnChangedDeviceClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeviceOnChangedDeviceClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (ConnectionState != other.ConnectionState) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (ConnectionState != global::ConnectionState.Offline) hash ^= ConnectionState.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (ConnectionState != global::ConnectionState.Offline) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ConnectionState);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (ConnectionState != global::ConnectionState.Offline) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ConnectionState);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeviceOnChangedDeviceClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.ConnectionState != global::ConnectionState.Offline) {
      ConnectionState = other.ConnectionState;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          ConnectionState = (global::ConnectionState) input.ReadEnum();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu gửi danh sách công tắc của 1 thiết bị
/// </summary>
public sealed partial class GetSwitchersClientRequest : pb::IMessage<GetSwitchersClientRequest> {
  private static readonly pb::MessageParser<GetSwitchersClientRequest> _parser = new pb::MessageParser<GetSwitchersClientRequest>(() => new GetSwitchersClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetSwitchersClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[10]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitchersClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitchersClientRequest(GetSwitchersClientRequest other) : this() {
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitchersClientRequest Clone() {
    return new GetSwitchersClientRequest(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetSwitchersClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetSwitchersClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetSwitchersClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi danh sách công tắc của 1 thiết bị
/// </summary>
public sealed partial class GetSwitchersClientResponse : pb::IMessage<GetSwitchersClientResponse> {
  private static readonly pb::MessageParser<GetSwitchersClientResponse> _parser = new pb::MessageParser<GetSwitchersClientResponse>(() => new GetSwitchersClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetSwitchersClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[11]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitchersClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitchersClientResponse(GetSwitchersClientResponse other) : this() {
    switchers_ = other.switchers_ != null ? other.switchers_.Clone() : null;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitchersClientResponse Clone() {
    return new GetSwitchersClientResponse(this);
  }

  /// <summary>Field number for the "switchers" field.</summary>
  public const int SwitchersFieldNumber = 1;
  private global::Switcher switchers_;
  /// <summary>
  /// Thông tin về thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Switcher Switchers {
    get { return switchers_; }
    set {
      switchers_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetSwitchersClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetSwitchersClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Switchers, other.Switchers)) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (switchers_ != null) hash ^= Switchers.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (switchers_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Switchers);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (switchers_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Switchers);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetSwitchersClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.switchers_ != null) {
      if (switchers_ == null) {
        Switchers = new global::Switcher();
      }
      Switchers.MergeFrom(other.Switchers);
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (switchers_ == null) {
            Switchers = new global::Switcher();
          }
          input.ReadMessage(Switchers);
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu gửi trạng thái của 1 nút của công tắc
/// </summary>
public sealed partial class GetSwitcherClientRequest : pb::IMessage<GetSwitcherClientRequest> {
  private static readonly pb::MessageParser<GetSwitcherClientRequest> _parser = new pb::MessageParser<GetSwitcherClientRequest>(() => new GetSwitcherClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetSwitcherClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[12]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitcherClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitcherClientRequest(GetSwitcherClientRequest other) : this() {
    switcher_ = other.switcher_;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitcherClientRequest Clone() {
    return new GetSwitcherClientRequest(this);
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 1;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetSwitcherClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetSwitcherClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Switcher != other.Switcher) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Switcher != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Switcher);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetSwitcherClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi trạng thái của 1 nút của công tắc
/// </summary>
public sealed partial class GetSwitcherClientResponse : pb::IMessage<GetSwitcherClientResponse> {
  private static readonly pb::MessageParser<GetSwitcherClientResponse> _parser = new pb::MessageParser<GetSwitcherClientResponse>(() => new GetSwitcherClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetSwitcherClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[13]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitcherClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitcherClientResponse(GetSwitcherClientResponse other) : this() {
    switcher_ = other.switcher_;
    powerState_ = other.powerState_;
    device_ = other.device_ != null ? other.device_.Clone() : null;
    datetime_ = other.datetime_ != null ? other.datetime_.Clone() : null;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetSwitcherClientResponse Clone() {
    return new GetSwitcherClientResponse(this);
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 1;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 2;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Trạng thái ON/OFF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "device" field.</summary>
  public const int DeviceFieldNumber = 3;
  private global::Device device_;
  /// <summary>
  /// Thông tin về thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Device Device {
    get { return device_; }
    set {
      device_ = value;
    }
  }

  /// <summary>Field number for the "datetime" field.</summary>
  public const int DatetimeFieldNumber = 4;
  private global::DateTime datetime_;
  /// <summary>
  /// Thời gian chuyển trạng thái của công tắc
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DateTime Datetime {
    get { return datetime_; }
    set {
      datetime_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 5;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetSwitcherClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetSwitcherClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Switcher != other.Switcher) return false;
    if (PowerState != other.PowerState) return false;
    if (!object.Equals(Device, other.Device)) return false;
    if (!object.Equals(Datetime, other.Datetime)) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (device_ != null) hash ^= Device.GetHashCode();
    if (datetime_ != null) hash ^= Datetime.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Switcher != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PowerState);
    }
    if (device_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Device);
    }
    if (datetime_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Datetime);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(42);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (device_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Device);
    }
    if (datetime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Datetime);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetSwitcherClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.device_ != null) {
      if (device_ == null) {
        Device = new global::Device();
      }
      Device.MergeFrom(other.Device);
    }
    if (other.datetime_ != null) {
      if (datetime_ == null) {
        Datetime = new global::DateTime();
      }
      Datetime.MergeFrom(other.Datetime);
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 16: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 26: {
          if (device_ == null) {
            Device = new global::Device();
          }
          input.ReadMessage(Device);
          break;
        }
        case 34: {
          if (datetime_ == null) {
            Datetime = new global::DateTime();
          }
          input.ReadMessage(Datetime);
          break;
        }
        case 42: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu trả về nhật ký, hành trình thiết bị
/// </summary>
public sealed partial class GetLogSwitcherClientRequest : pb::IMessage<GetLogSwitcherClientRequest> {
  private static readonly pb::MessageParser<GetLogSwitcherClientRequest> _parser = new pb::MessageParser<GetLogSwitcherClientRequest>(() => new GetLogSwitcherClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetLogSwitcherClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[14]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLogSwitcherClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLogSwitcherClientRequest(GetLogSwitcherClientRequest other) : this() {
    switcher_ = other.switcher_;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLogSwitcherClientRequest Clone() {
    return new GetLogSwitcherClientRequest(this);
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 1;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetLogSwitcherClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetLogSwitcherClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Switcher != other.Switcher) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Switcher != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Switcher);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetLogSwitcherClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi nhật ký/hành trình thiết bị
/// </summary>
public sealed partial class GetLogSwitcherClientResponse : pb::IMessage<GetLogSwitcherClientResponse> {
  private static readonly pb::MessageParser<GetLogSwitcherClientResponse> _parser = new pb::MessageParser<GetLogSwitcherClientResponse>(() => new GetLogSwitcherClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetLogSwitcherClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[15]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLogSwitcherClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLogSwitcherClientResponse(GetLogSwitcherClientResponse other) : this() {
    switcher_ = other.switcher_;
    totalTimeOnOrgin_ = other.totalTimeOnOrgin_;
    totalTimeOnYear_ = other.totalTimeOnYear_;
    totalTimeOnMonth_ = other.totalTimeOnMonth_;
    timeOnLastDate_ = other.timeOnLastDate_;
    timeOffLastDate_ = other.timeOffLastDate_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetLogSwitcherClientResponse Clone() {
    return new GetLogSwitcherClientResponse(this);
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 1;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "totalTimeOnOrgin" field.</summary>
  public const int TotalTimeOnOrginFieldNumber = 2;
  private uint totalTimeOnOrgin_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TotalTimeOnOrgin {
    get { return totalTimeOnOrgin_; }
    set {
      totalTimeOnOrgin_ = value;
    }
  }

  /// <summary>Field number for the "totalTimeOnYear" field.</summary>
  public const int TotalTimeOnYearFieldNumber = 3;
  private uint totalTimeOnYear_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TotalTimeOnYear {
    get { return totalTimeOnYear_; }
    set {
      totalTimeOnYear_ = value;
    }
  }

  /// <summary>Field number for the "totalTimeOnMonth" field.</summary>
  public const int TotalTimeOnMonthFieldNumber = 4;
  private uint totalTimeOnMonth_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TotalTimeOnMonth {
    get { return totalTimeOnMonth_; }
    set {
      totalTimeOnMonth_ = value;
    }
  }

  /// <summary>Field number for the "timeOnLastDate" field.</summary>
  public const int TimeOnLastDateFieldNumber = 5;
  private uint timeOnLastDate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeOnLastDate {
    get { return timeOnLastDate_; }
    set {
      timeOnLastDate_ = value;
    }
  }

  /// <summary>Field number for the "timeOffLastDate" field.</summary>
  public const int TimeOffLastDateFieldNumber = 6;
  private uint timeOffLastDate_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint TimeOffLastDate {
    get { return timeOffLastDate_; }
    set {
      timeOffLastDate_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 7;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetLogSwitcherClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetLogSwitcherClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Switcher != other.Switcher) return false;
    if (TotalTimeOnOrgin != other.TotalTimeOnOrgin) return false;
    if (TotalTimeOnYear != other.TotalTimeOnYear) return false;
    if (TotalTimeOnMonth != other.TotalTimeOnMonth) return false;
    if (TimeOnLastDate != other.TimeOnLastDate) return false;
    if (TimeOffLastDate != other.TimeOffLastDate) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (TotalTimeOnOrgin != 0) hash ^= TotalTimeOnOrgin.GetHashCode();
    if (TotalTimeOnYear != 0) hash ^= TotalTimeOnYear.GetHashCode();
    if (TotalTimeOnMonth != 0) hash ^= TotalTimeOnMonth.GetHashCode();
    if (TimeOnLastDate != 0) hash ^= TimeOnLastDate.GetHashCode();
    if (TimeOffLastDate != 0) hash ^= TimeOffLastDate.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Switcher != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Switcher);
    }
    if (TotalTimeOnOrgin != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(TotalTimeOnOrgin);
    }
    if (TotalTimeOnYear != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(TotalTimeOnYear);
    }
    if (TotalTimeOnMonth != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(TotalTimeOnMonth);
    }
    if (TimeOnLastDate != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(TimeOnLastDate);
    }
    if (TimeOffLastDate != 0) {
      output.WriteRawTag(48);
      output.WriteUInt32(TimeOffLastDate);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(58);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (TotalTimeOnOrgin != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTimeOnOrgin);
    }
    if (TotalTimeOnYear != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTimeOnYear);
    }
    if (TotalTimeOnMonth != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TotalTimeOnMonth);
    }
    if (TimeOnLastDate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeOnLastDate);
    }
    if (TimeOffLastDate != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeOffLastDate);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetLogSwitcherClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.TotalTimeOnOrgin != 0) {
      TotalTimeOnOrgin = other.TotalTimeOnOrgin;
    }
    if (other.TotalTimeOnYear != 0) {
      TotalTimeOnYear = other.TotalTimeOnYear;
    }
    if (other.TotalTimeOnMonth != 0) {
      TotalTimeOnMonth = other.TotalTimeOnMonth;
    }
    if (other.TimeOnLastDate != 0) {
      TimeOnLastDate = other.TimeOnLastDate;
    }
    if (other.TimeOffLastDate != 0) {
      TimeOffLastDate = other.TimeOffLastDate;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 16: {
          TotalTimeOnOrgin = input.ReadUInt32();
          break;
        }
        case 24: {
          TotalTimeOnYear = input.ReadUInt32();
          break;
        }
        case 32: {
          TotalTimeOnMonth = input.ReadUInt32();
          break;
        }
        case 40: {
          TimeOnLastDate = input.ReadUInt32();
          break;
        }
        case 48: {
          TimeOffLastDate = input.ReadUInt32();
          break;
        }
        case 58: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu thay đổi On/Off thiết bị
/// </summary>
public sealed partial class SwitcherClientRequest : pb::IMessage<SwitcherClientRequest> {
  private static readonly pb::MessageParser<SwitcherClientRequest> _parser = new pb::MessageParser<SwitcherClientRequest>(() => new SwitcherClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SwitcherClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[16]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientRequest(SwitcherClientRequest other) : this() {
    deviceId_ = other.deviceId_;
    switcher_ = other.switcher_;
    powerState_ = other.powerState_;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientRequest Clone() {
    return new SwitcherClientRequest(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// Chỉ được sử dụng khi dùng topic
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 2;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 3;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Trạng thái ON/OFF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 4;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SwitcherClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SwitcherClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (Switcher != other.Switcher) return false;
    if (PowerState != other.PowerState) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (Switcher != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(24);
      output.WriteEnum((int) PowerState);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(34);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SwitcherClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 24: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 34: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thay đổi On/Off thiết bị
/// </summary>
public sealed partial class SwitcherClientResponse : pb::IMessage<SwitcherClientResponse> {
  private static readonly pb::MessageParser<SwitcherClientResponse> _parser = new pb::MessageParser<SwitcherClientResponse>(() => new SwitcherClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SwitcherClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[17]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientResponse(SwitcherClientResponse other) : this() {
    switcher_ = other.switcher_;
    powerState_ = other.powerState_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientResponse Clone() {
    return new SwitcherClientResponse(this);
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 1;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 2;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Trạng thái ON/OFF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 3;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SwitcherClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SwitcherClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Switcher != other.Switcher) return false;
    if (PowerState != other.PowerState) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Switcher != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PowerState);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SwitcherClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 16: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 26: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu cập nhật 1 nút công tắc
/// </summary>
public sealed partial class UpdateSwitcherClientRequest : pb::IMessage<UpdateSwitcherClientRequest> {
  private static readonly pb::MessageParser<UpdateSwitcherClientRequest> _parser = new pb::MessageParser<UpdateSwitcherClientRequest>(() => new UpdateSwitcherClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateSwitcherClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[18]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherClientRequest(UpdateSwitcherClientRequest other) : this() {
    switcher_ = other.switcher_;
    keepState_ = other.keepState_;
    hardwareId_ = other.hardwareId_;
    autoOff_ = other.autoOff_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherClientRequest Clone() {
    return new UpdateSwitcherClientRequest(this);
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 1;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "keepState" field.</summary>
  public const int KeepStateFieldNumber = 2;
  private uint keepState_;
  /// <summary>
  /// 0: Off, 1: On, 2: Keep giữ trạng thái cũ
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint KeepState {
    get { return keepState_; }
    set {
      keepState_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 3;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "autoOff" field.</summary>
  public const int AutoOffFieldNumber = 4;
  private uint autoOff_;
  /// <summary>
  /// Tự tắt sau x phút hoạt động.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AutoOff {
    get { return autoOff_; }
    set {
      autoOff_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateSwitcherClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateSwitcherClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Switcher != other.Switcher) return false;
    if (KeepState != other.KeepState) return false;
    if (HardwareId != other.HardwareId) return false;
    if (AutoOff != other.AutoOff) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (KeepState != 0) hash ^= KeepState.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (AutoOff != 0) hash ^= AutoOff.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Switcher != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Switcher);
    }
    if (KeepState != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(KeepState);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HardwareId);
    }
    if (AutoOff != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(AutoOff);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (KeepState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepState);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (AutoOff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoOff);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateSwitcherClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.KeepState != 0) {
      KeepState = other.KeepState;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.AutoOff != 0) {
      AutoOff = other.AutoOff;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 16: {
          KeepState = input.ReadUInt32();
          break;
        }
        case 26: {
          HardwareId = input.ReadString();
          break;
        }
        case 32: {
          AutoOff = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu cập nhật 1 nút công tắc
/// </summary>
public sealed partial class UpdateSwitcherClientResponse : pb::IMessage<UpdateSwitcherClientResponse> {
  private static readonly pb::MessageParser<UpdateSwitcherClientResponse> _parser = new pb::MessageParser<UpdateSwitcherClientResponse>(() => new UpdateSwitcherClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateSwitcherClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[19]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherClientResponse(UpdateSwitcherClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    switcher_ = other.switcher_;
    keepState_ = other.keepState_;
    autoOff_ = other.autoOff_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherClientResponse Clone() {
    return new UpdateSwitcherClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 2;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "keepState" field.</summary>
  public const int KeepStateFieldNumber = 3;
  private uint keepState_;
  /// <summary>
  /// 0: Off, 1: On, 2: Keep giữ trạng thái cũ
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint KeepState {
    get { return keepState_; }
    set {
      keepState_ = value;
    }
  }

  /// <summary>Field number for the "autoOff" field.</summary>
  public const int AutoOffFieldNumber = 4;
  private uint autoOff_;
  /// <summary>
  /// Tự tắt sau x phút hoạt động.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AutoOff {
    get { return autoOff_; }
    set {
      autoOff_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateSwitcherClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateSwitcherClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (Switcher != other.Switcher) return false;
    if (KeepState != other.KeepState) return false;
    if (AutoOff != other.AutoOff) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (KeepState != 0) hash ^= KeepState.GetHashCode();
    if (AutoOff != 0) hash ^= AutoOff.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (Switcher != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Switcher);
    }
    if (KeepState != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(KeepState);
    }
    if (AutoOff != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(AutoOff);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (KeepState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepState);
    }
    if (AutoOff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoOff);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateSwitcherClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.KeepState != 0) {
      KeepState = other.KeepState;
    }
    if (other.AutoOff != 0) {
      AutoOff = other.AutoOff;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 24: {
          KeepState = input.ReadUInt32();
          break;
        }
        case 32: {
          AutoOff = input.ReadUInt32();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class UpdateSwitcherState : pb::IMessage<UpdateSwitcherState> {
  private static readonly pb::MessageParser<UpdateSwitcherState> _parser = new pb::MessageParser<UpdateSwitcherState>(() => new UpdateSwitcherState());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateSwitcherState> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[20]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherState() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherState(UpdateSwitcherState other) : this() {
    deviceId_ = other.deviceId_;
    switcher_ = other.switcher_;
    keepState_ = other.keepState_;
    autoOff_ = other.autoOff_;
    powerState_ = other.powerState_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherState Clone() {
    return new UpdateSwitcherState(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 2;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "keepState" field.</summary>
  public const int KeepStateFieldNumber = 3;
  private uint keepState_;
  /// <summary>
  /// 0: Off, 1: On, 2: Keep giữ trạng thái cũ
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint KeepState {
    get { return keepState_; }
    set {
      keepState_ = value;
    }
  }

  /// <summary>Field number for the "autoOff" field.</summary>
  public const int AutoOffFieldNumber = 4;
  private uint autoOff_;
  /// <summary>
  /// Tự tắt sau x phút hoạt động.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint AutoOff {
    get { return autoOff_; }
    set {
      autoOff_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 5;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Trạng thái ON/OFF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateSwitcherState);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateSwitcherState other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (Switcher != other.Switcher) return false;
    if (KeepState != other.KeepState) return false;
    if (AutoOff != other.AutoOff) return false;
    if (PowerState != other.PowerState) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (KeepState != 0) hash ^= KeepState.GetHashCode();
    if (AutoOff != 0) hash ^= AutoOff.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (Switcher != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Switcher);
    }
    if (KeepState != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(KeepState);
    }
    if (AutoOff != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(AutoOff);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(40);
      output.WriteEnum((int) PowerState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (KeepState != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(KeepState);
    }
    if (AutoOff != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(AutoOff);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateSwitcherState other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.KeepState != 0) {
      KeepState = other.KeepState;
    }
    if (other.AutoOff != 0) {
      AutoOff = other.AutoOff;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 24: {
          KeepState = input.ReadUInt32();
          break;
        }
        case 32: {
          AutoOff = input.ReadUInt32();
          break;
        }
        case 40: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu thêm mới 1 lịch của 1 công tắc
/// </summary>
public sealed partial class AddSwitcherScheduleClientRequest : pb::IMessage<AddSwitcherScheduleClientRequest> {
  private static readonly pb::MessageParser<AddSwitcherScheduleClientRequest> _parser = new pb::MessageParser<AddSwitcherScheduleClientRequest>(() => new AddSwitcherScheduleClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddSwitcherScheduleClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[21]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddSwitcherScheduleClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddSwitcherScheduleClientRequest(AddSwitcherScheduleClientRequest other) : this() {
    schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddSwitcherScheduleClientRequest Clone() {
    return new AddSwitcherScheduleClientRequest(this);
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 1;
  private global::SwitcherSchedule schedule_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwitcherSchedule Schedule {
    get { return schedule_; }
    set {
      schedule_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddSwitcherScheduleClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddSwitcherScheduleClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (schedule_ != null) hash ^= Schedule.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (schedule_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Schedule);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (schedule_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddSwitcherScheduleClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.schedule_ != null) {
      if (schedule_ == null) {
        Schedule = new global::SwitcherSchedule();
      }
      Schedule.MergeFrom(other.Schedule);
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (schedule_ == null) {
            Schedule = new global::SwitcherSchedule();
          }
          input.ReadMessage(Schedule);
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thêm mới 1 lịch của 1 công tắc
/// </summary>
public sealed partial class AddSwitcherScheduleClientResponse : pb::IMessage<AddSwitcherScheduleClientResponse> {
  private static readonly pb::MessageParser<AddSwitcherScheduleClientResponse> _parser = new pb::MessageParser<AddSwitcherScheduleClientResponse>(() => new AddSwitcherScheduleClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddSwitcherScheduleClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[22]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddSwitcherScheduleClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddSwitcherScheduleClientResponse(AddSwitcherScheduleClientResponse other) : this() {
    switcherScheduleId_ = other.switcherScheduleId_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddSwitcherScheduleClientResponse Clone() {
    return new AddSwitcherScheduleClientResponse(this);
  }

  /// <summary>Field number for the "switcherScheduleId" field.</summary>
  public const int SwitcherScheduleIdFieldNumber = 1;
  private string switcherScheduleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SwitcherScheduleId {
    get { return switcherScheduleId_; }
    set {
      switcherScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddSwitcherScheduleClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddSwitcherScheduleClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SwitcherScheduleId != other.SwitcherScheduleId) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SwitcherScheduleId.Length != 0) hash ^= SwitcherScheduleId.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SwitcherScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SwitcherScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddSwitcherScheduleClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.SwitcherScheduleId.Length != 0) {
      SwitcherScheduleId = other.SwitcherScheduleId;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SwitcherScheduleId = input.ReadString();
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu update 1 lịch của 1 công tắc
/// </summary>
public sealed partial class UpdateSwitcherScheduleClientRequest : pb::IMessage<UpdateSwitcherScheduleClientRequest> {
  private static readonly pb::MessageParser<UpdateSwitcherScheduleClientRequest> _parser = new pb::MessageParser<UpdateSwitcherScheduleClientRequest>(() => new UpdateSwitcherScheduleClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateSwitcherScheduleClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[23]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherScheduleClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherScheduleClientRequest(UpdateSwitcherScheduleClientRequest other) : this() {
    schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherScheduleClientRequest Clone() {
    return new UpdateSwitcherScheduleClientRequest(this);
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 1;
  private global::SwitcherSchedule schedule_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwitcherSchedule Schedule {
    get { return schedule_; }
    set {
      schedule_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateSwitcherScheduleClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateSwitcherScheduleClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (schedule_ != null) hash ^= Schedule.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (schedule_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Schedule);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (schedule_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateSwitcherScheduleClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.schedule_ != null) {
      if (schedule_ == null) {
        Schedule = new global::SwitcherSchedule();
      }
      Schedule.MergeFrom(other.Schedule);
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (schedule_ == null) {
            Schedule = new global::SwitcherSchedule();
          }
          input.ReadMessage(Schedule);
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi update 1 lịch của 1 công tắc
/// </summary>
public sealed partial class UpdateSwitcherScheduleClientResponse : pb::IMessage<UpdateSwitcherScheduleClientResponse> {
  private static readonly pb::MessageParser<UpdateSwitcherScheduleClientResponse> _parser = new pb::MessageParser<UpdateSwitcherScheduleClientResponse>(() => new UpdateSwitcherScheduleClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateSwitcherScheduleClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[24]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherScheduleClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherScheduleClientResponse(UpdateSwitcherScheduleClientResponse other) : this() {
    switcherScheduleId_ = other.switcherScheduleId_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateSwitcherScheduleClientResponse Clone() {
    return new UpdateSwitcherScheduleClientResponse(this);
  }

  /// <summary>Field number for the "switcherScheduleId" field.</summary>
  public const int SwitcherScheduleIdFieldNumber = 1;
  private string switcherScheduleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SwitcherScheduleId {
    get { return switcherScheduleId_; }
    set {
      switcherScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateSwitcherScheduleClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateSwitcherScheduleClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SwitcherScheduleId != other.SwitcherScheduleId) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SwitcherScheduleId.Length != 0) hash ^= SwitcherScheduleId.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SwitcherScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SwitcherScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateSwitcherScheduleClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.SwitcherScheduleId.Length != 0) {
      SwitcherScheduleId = other.SwitcherScheduleId;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SwitcherScheduleId = input.ReadString();
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu xóa 1 lịch của 1 công tắc
/// </summary>
public sealed partial class DeleteSwitcherScheduleClientRequest : pb::IMessage<DeleteSwitcherScheduleClientRequest> {
  private static readonly pb::MessageParser<DeleteSwitcherScheduleClientRequest> _parser = new pb::MessageParser<DeleteSwitcherScheduleClientRequest>(() => new DeleteSwitcherScheduleClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteSwitcherScheduleClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[25]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSwitcherScheduleClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSwitcherScheduleClientRequest(DeleteSwitcherScheduleClientRequest other) : this() {
    switcherScheduleId_ = other.switcherScheduleId_;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSwitcherScheduleClientRequest Clone() {
    return new DeleteSwitcherScheduleClientRequest(this);
  }

  /// <summary>Field number for the "switcherScheduleId" field.</summary>
  public const int SwitcherScheduleIdFieldNumber = 1;
  private string switcherScheduleId_ = "";
  /// <summary>
  /// Id của switcherScheduleId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SwitcherScheduleId {
    get { return switcherScheduleId_; }
    set {
      switcherScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteSwitcherScheduleClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteSwitcherScheduleClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SwitcherScheduleId != other.SwitcherScheduleId) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SwitcherScheduleId.Length != 0) hash ^= SwitcherScheduleId.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SwitcherScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SwitcherScheduleId);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SwitcherScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SwitcherScheduleId);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteSwitcherScheduleClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.SwitcherScheduleId.Length != 0) {
      SwitcherScheduleId = other.SwitcherScheduleId;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SwitcherScheduleId = input.ReadString();
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi xóa 1 lịch của 1 công tắc
/// </summary>
public sealed partial class DeleteSwitcherScheduleClientResponse : pb::IMessage<DeleteSwitcherScheduleClientResponse> {
  private static readonly pb::MessageParser<DeleteSwitcherScheduleClientResponse> _parser = new pb::MessageParser<DeleteSwitcherScheduleClientResponse>(() => new DeleteSwitcherScheduleClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteSwitcherScheduleClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[26]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSwitcherScheduleClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSwitcherScheduleClientResponse(DeleteSwitcherScheduleClientResponse other) : this() {
    switcherScheduleId_ = other.switcherScheduleId_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteSwitcherScheduleClientResponse Clone() {
    return new DeleteSwitcherScheduleClientResponse(this);
  }

  /// <summary>Field number for the "switcherScheduleId" field.</summary>
  public const int SwitcherScheduleIdFieldNumber = 1;
  private string switcherScheduleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SwitcherScheduleId {
    get { return switcherScheduleId_; }
    set {
      switcherScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteSwitcherScheduleClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteSwitcherScheduleClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SwitcherScheduleId != other.SwitcherScheduleId) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SwitcherScheduleId.Length != 0) hash ^= SwitcherScheduleId.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SwitcherScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SwitcherScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteSwitcherScheduleClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.SwitcherScheduleId.Length != 0) {
      SwitcherScheduleId = other.SwitcherScheduleId;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SwitcherScheduleId = input.ReadString();
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Dùng cho trường công tắc chủ động gửi On/Off lên server
/// Phản hồi thông tin thay đổi các chỉ số của thiết bị điện/nước runtime
/// </summary>
public sealed partial class SwitcherOnChangedClientResponse : pb::IMessage<SwitcherOnChangedClientResponse> {
  private static readonly pb::MessageParser<SwitcherOnChangedClientResponse> _parser = new pb::MessageParser<SwitcherOnChangedClientResponse>(() => new SwitcherOnChangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SwitcherOnChangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[27]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherOnChangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherOnChangedClientResponse(SwitcherOnChangedClientResponse other) : this() {
    switcher_ = other.switcher_;
    powerState_ = other.powerState_;
    deviceId_ = other.deviceId_;
    bridge_ = other.bridge_ != null ? other.bridge_.Clone() : null;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherOnChangedClientResponse Clone() {
    return new SwitcherOnChangedClientResponse(this);
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 1;
  private uint switcher_;
  /// <summary>
  /// Công tắc 1,2,3,4
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 2;
  private global::PowerState powerState_ = global::PowerState.Off;
  /// <summary>
  /// Trạng thái ON/OFF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 3;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "bridge" field.</summary>
  public const int BridgeFieldNumber = 4;
  private global::BridgeInfo bridge_;
  /// <summary>
  /// Thông tin về thiết bị bắc cầu
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BridgeInfo Bridge {
    get { return bridge_; }
    set {
      bridge_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SwitcherOnChangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SwitcherOnChangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Switcher != other.Switcher) return false;
    if (PowerState != other.PowerState) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(Bridge, other.Bridge)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Switcher != 0) hash ^= Switcher.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (bridge_ != null) hash ^= Bridge.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Switcher != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(16);
      output.WriteEnum((int) PowerState);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DeviceId);
    }
    if (bridge_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(Bridge);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Switcher != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Switcher);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (bridge_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bridge);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SwitcherOnChangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.Switcher != 0) {
      Switcher = other.Switcher;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.bridge_ != null) {
      if (bridge_ == null) {
        Bridge = new global::BridgeInfo();
      }
      Bridge.MergeFrom(other.Bridge);
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Switcher = input.ReadUInt32();
          break;
        }
        case 16: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 26: {
          DeviceId = input.ReadString();
          break;
        }
        case 34: {
          if (bridge_ == null) {
            Bridge = new global::BridgeInfo();
          }
          input.ReadMessage(Bridge);
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được lệnh điều khiển rèm cửa
/// </summary>
public sealed partial class CurtainSwitcherClientRequest : pb::IMessage<CurtainSwitcherClientRequest> {
  private static readonly pb::MessageParser<CurtainSwitcherClientRequest> _parser = new pb::MessageParser<CurtainSwitcherClientRequest>(() => new CurtainSwitcherClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurtainSwitcherClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[28]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientRequest(CurtainSwitcherClientRequest other) : this() {
    percentIn_ = other.percentIn_;
    percentOut_ = other.percentOut_;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientRequest Clone() {
    return new CurtainSwitcherClientRequest(this);
  }

  /// <summary>Field number for the "percentIn" field.</summary>
  public const int PercentInFieldNumber = 1;
  private uint percentIn_;
  /// <summary>
  /// Phần trăm hướng trong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentIn {
    get { return percentIn_; }
    set {
      percentIn_ = value;
    }
  }

  /// <summary>Field number for the "percentOut" field.</summary>
  public const int PercentOutFieldNumber = 2;
  private uint percentOut_;
  /// <summary>
  /// Phần trăm hướng ngoài
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentOut {
    get { return percentOut_; }
    set {
      percentOut_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 3;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurtainSwitcherClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurtainSwitcherClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PercentIn != other.PercentIn) return false;
    if (PercentOut != other.PercentOut) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PercentIn != 0) hash ^= PercentIn.GetHashCode();
    if (PercentOut != 0) hash ^= PercentOut.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PercentIn != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PercentIn);
    }
    if (PercentOut != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PercentOut);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PercentIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentIn);
    }
    if (PercentOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentOut);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurtainSwitcherClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.PercentIn != 0) {
      PercentIn = other.PercentIn;
    }
    if (other.PercentOut != 0) {
      PercentOut = other.PercentOut;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PercentIn = input.ReadUInt32();
          break;
        }
        case 16: {
          PercentOut = input.ReadUInt32();
          break;
        }
        case 26: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu thêm mới 1 lịch của rèm cửa
/// </summary>
public sealed partial class AddCurtainSwitcherScheduleClientRequest : pb::IMessage<AddCurtainSwitcherScheduleClientRequest> {
  private static readonly pb::MessageParser<AddCurtainSwitcherScheduleClientRequest> _parser = new pb::MessageParser<AddCurtainSwitcherScheduleClientRequest>(() => new AddCurtainSwitcherScheduleClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddCurtainSwitcherScheduleClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[29]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddCurtainSwitcherScheduleClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddCurtainSwitcherScheduleClientRequest(AddCurtainSwitcherScheduleClientRequest other) : this() {
    schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddCurtainSwitcherScheduleClientRequest Clone() {
    return new AddCurtainSwitcherScheduleClientRequest(this);
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 1;
  private global::CurtainSwitcherSchedule schedule_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcherSchedule Schedule {
    get { return schedule_; }
    set {
      schedule_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddCurtainSwitcherScheduleClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddCurtainSwitcherScheduleClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (schedule_ != null) hash ^= Schedule.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (schedule_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Schedule);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (schedule_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddCurtainSwitcherScheduleClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.schedule_ != null) {
      if (schedule_ == null) {
        Schedule = new global::CurtainSwitcherSchedule();
      }
      Schedule.MergeFrom(other.Schedule);
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (schedule_ == null) {
            Schedule = new global::CurtainSwitcherSchedule();
          }
          input.ReadMessage(Schedule);
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu update 1 lịch của rèm cửa
/// </summary>
public sealed partial class UpdateCurtainSwitcherScheduleClientRequest : pb::IMessage<UpdateCurtainSwitcherScheduleClientRequest> {
  private static readonly pb::MessageParser<UpdateCurtainSwitcherScheduleClientRequest> _parser = new pb::MessageParser<UpdateCurtainSwitcherScheduleClientRequest>(() => new UpdateCurtainSwitcherScheduleClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateCurtainSwitcherScheduleClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[30]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCurtainSwitcherScheduleClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCurtainSwitcherScheduleClientRequest(UpdateCurtainSwitcherScheduleClientRequest other) : this() {
    schedule_ = other.schedule_ != null ? other.schedule_.Clone() : null;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCurtainSwitcherScheduleClientRequest Clone() {
    return new UpdateCurtainSwitcherScheduleClientRequest(this);
  }

  /// <summary>Field number for the "schedule" field.</summary>
  public const int ScheduleFieldNumber = 1;
  private global::CurtainSwitcherSchedule schedule_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcherSchedule Schedule {
    get { return schedule_; }
    set {
      schedule_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateCurtainSwitcherScheduleClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateCurtainSwitcherScheduleClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(Schedule, other.Schedule)) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (schedule_ != null) hash ^= Schedule.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (schedule_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(Schedule);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (schedule_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Schedule);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateCurtainSwitcherScheduleClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.schedule_ != null) {
      if (schedule_ == null) {
        Schedule = new global::CurtainSwitcherSchedule();
      }
      Schedule.MergeFrom(other.Schedule);
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (schedule_ == null) {
            Schedule = new global::CurtainSwitcherSchedule();
          }
          input.ReadMessage(Schedule);
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu xóa 1 lịch của rèm cửa
/// </summary>
public sealed partial class DeleteCurtainSwitcherScheduleClientRequest : pb::IMessage<DeleteCurtainSwitcherScheduleClientRequest> {
  private static readonly pb::MessageParser<DeleteCurtainSwitcherScheduleClientRequest> _parser = new pb::MessageParser<DeleteCurtainSwitcherScheduleClientRequest>(() => new DeleteCurtainSwitcherScheduleClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteCurtainSwitcherScheduleClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[31]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteCurtainSwitcherScheduleClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteCurtainSwitcherScheduleClientRequest(DeleteCurtainSwitcherScheduleClientRequest other) : this() {
    curtainSwitcherScheduleId_ = other.curtainSwitcherScheduleId_;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteCurtainSwitcherScheduleClientRequest Clone() {
    return new DeleteCurtainSwitcherScheduleClientRequest(this);
  }

  /// <summary>Field number for the "curtainSwitcherScheduleId" field.</summary>
  public const int CurtainSwitcherScheduleIdFieldNumber = 1;
  private string curtainSwitcherScheduleId_ = "";
  /// <summary>
  /// Id của curtainSwitcherScheduleId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CurtainSwitcherScheduleId {
    get { return curtainSwitcherScheduleId_; }
    set {
      curtainSwitcherScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteCurtainSwitcherScheduleClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteCurtainSwitcherScheduleClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurtainSwitcherScheduleId != other.CurtainSwitcherScheduleId) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurtainSwitcherScheduleId.Length != 0) hash ^= CurtainSwitcherScheduleId.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurtainSwitcherScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(CurtainSwitcherScheduleId);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurtainSwitcherScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CurtainSwitcherScheduleId);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteCurtainSwitcherScheduleClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.CurtainSwitcherScheduleId.Length != 0) {
      CurtainSwitcherScheduleId = other.CurtainSwitcherScheduleId;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CurtainSwitcherScheduleId = input.ReadString();
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi lệnh điều khiển rèm cửa
/// </summary>
public sealed partial class CurtainSwitcherClientResponse : pb::IMessage<CurtainSwitcherClientResponse> {
  private static readonly pb::MessageParser<CurtainSwitcherClientResponse> _parser = new pb::MessageParser<CurtainSwitcherClientResponse>(() => new CurtainSwitcherClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurtainSwitcherClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[32]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientResponse(CurtainSwitcherClientResponse other) : this() {
    percentIn_ = other.percentIn_;
    percentOut_ = other.percentOut_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientResponse Clone() {
    return new CurtainSwitcherClientResponse(this);
  }

  /// <summary>Field number for the "percentIn" field.</summary>
  public const int PercentInFieldNumber = 1;
  private uint percentIn_;
  /// <summary>
  /// Phần trăm hướng trong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentIn {
    get { return percentIn_; }
    set {
      percentIn_ = value;
    }
  }

  /// <summary>Field number for the "percentOut" field.</summary>
  public const int PercentOutFieldNumber = 2;
  private uint percentOut_;
  /// <summary>
  /// Phần trăm hướng ngoài
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentOut {
    get { return percentOut_; }
    set {
      percentOut_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 3;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurtainSwitcherClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurtainSwitcherClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PercentIn != other.PercentIn) return false;
    if (PercentOut != other.PercentOut) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PercentIn != 0) hash ^= PercentIn.GetHashCode();
    if (PercentOut != 0) hash ^= PercentOut.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PercentIn != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PercentIn);
    }
    if (PercentOut != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PercentOut);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PercentIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentIn);
    }
    if (PercentOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentOut);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurtainSwitcherClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.PercentIn != 0) {
      PercentIn = other.PercentIn;
    }
    if (other.PercentOut != 0) {
      PercentOut = other.PercentOut;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PercentIn = input.ReadUInt32();
          break;
        }
        case 16: {
          PercentOut = input.ReadUInt32();
          break;
        }
        case 26: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Dùng cho trường công tắc rèm cửa chủ động gửi trạng thái lên server
/// Phản hồi thông tin thay đổi trạng thái của điều hòa runtime
/// </summary>
public sealed partial class CurtainSwitcherOnChangedClientResponse : pb::IMessage<CurtainSwitcherOnChangedClientResponse> {
  private static readonly pb::MessageParser<CurtainSwitcherOnChangedClientResponse> _parser = new pb::MessageParser<CurtainSwitcherOnChangedClientResponse>(() => new CurtainSwitcherOnChangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurtainSwitcherOnChangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[33]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherOnChangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherOnChangedClientResponse(CurtainSwitcherOnChangedClientResponse other) : this() {
    percentIn_ = other.percentIn_;
    percentOut_ = other.percentOut_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherOnChangedClientResponse Clone() {
    return new CurtainSwitcherOnChangedClientResponse(this);
  }

  /// <summary>Field number for the "percentIn" field.</summary>
  public const int PercentInFieldNumber = 1;
  private uint percentIn_;
  /// <summary>
  /// Phần trăm hướng trong
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentIn {
    get { return percentIn_; }
    set {
      percentIn_ = value;
    }
  }

  /// <summary>Field number for the "percentOut" field.</summary>
  public const int PercentOutFieldNumber = 2;
  private uint percentOut_;
  /// <summary>
  /// Phần trăm hướng ngoài
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint PercentOut {
    get { return percentOut_; }
    set {
      percentOut_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 3;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurtainSwitcherOnChangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurtainSwitcherOnChangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (PercentIn != other.PercentIn) return false;
    if (PercentOut != other.PercentOut) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (PercentIn != 0) hash ^= PercentIn.GetHashCode();
    if (PercentOut != 0) hash ^= PercentOut.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (PercentIn != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(PercentIn);
    }
    if (PercentOut != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(PercentOut);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (PercentIn != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentIn);
    }
    if (PercentOut != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PercentOut);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurtainSwitcherOnChangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.PercentIn != 0) {
      PercentIn = other.PercentIn;
    }
    if (other.PercentOut != 0) {
      PercentOut = other.PercentOut;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          PercentIn = input.ReadUInt32();
          break;
        }
        case 16: {
          PercentOut = input.ReadUInt32();
          break;
        }
        case 26: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thêm mới 1 lịch của rèm cửa
/// </summary>
public sealed partial class AddCurtainSwitcherScheduleClientResponse : pb::IMessage<AddCurtainSwitcherScheduleClientResponse> {
  private static readonly pb::MessageParser<AddCurtainSwitcherScheduleClientResponse> _parser = new pb::MessageParser<AddCurtainSwitcherScheduleClientResponse>(() => new AddCurtainSwitcherScheduleClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AddCurtainSwitcherScheduleClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[34]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddCurtainSwitcherScheduleClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddCurtainSwitcherScheduleClientResponse(AddCurtainSwitcherScheduleClientResponse other) : this() {
    curtainSwitcherScheduleId_ = other.curtainSwitcherScheduleId_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AddCurtainSwitcherScheduleClientResponse Clone() {
    return new AddCurtainSwitcherScheduleClientResponse(this);
  }

  /// <summary>Field number for the "curtainSwitcherScheduleId" field.</summary>
  public const int CurtainSwitcherScheduleIdFieldNumber = 1;
  private string curtainSwitcherScheduleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CurtainSwitcherScheduleId {
    get { return curtainSwitcherScheduleId_; }
    set {
      curtainSwitcherScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AddCurtainSwitcherScheduleClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AddCurtainSwitcherScheduleClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurtainSwitcherScheduleId != other.CurtainSwitcherScheduleId) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurtainSwitcherScheduleId.Length != 0) hash ^= CurtainSwitcherScheduleId.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurtainSwitcherScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(CurtainSwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurtainSwitcherScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CurtainSwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AddCurtainSwitcherScheduleClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.CurtainSwitcherScheduleId.Length != 0) {
      CurtainSwitcherScheduleId = other.CurtainSwitcherScheduleId;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CurtainSwitcherScheduleId = input.ReadString();
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi update 1 lịch của rèm cửa
/// </summary>
public sealed partial class UpdateCurtainSwitcherScheduleClientResponse : pb::IMessage<UpdateCurtainSwitcherScheduleClientResponse> {
  private static readonly pb::MessageParser<UpdateCurtainSwitcherScheduleClientResponse> _parser = new pb::MessageParser<UpdateCurtainSwitcherScheduleClientResponse>(() => new UpdateCurtainSwitcherScheduleClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<UpdateCurtainSwitcherScheduleClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[35]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCurtainSwitcherScheduleClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCurtainSwitcherScheduleClientResponse(UpdateCurtainSwitcherScheduleClientResponse other) : this() {
    curtainSwitcherScheduleId_ = other.curtainSwitcherScheduleId_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public UpdateCurtainSwitcherScheduleClientResponse Clone() {
    return new UpdateCurtainSwitcherScheduleClientResponse(this);
  }

  /// <summary>Field number for the "curtainSwitcherScheduleId" field.</summary>
  public const int CurtainSwitcherScheduleIdFieldNumber = 1;
  private string curtainSwitcherScheduleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CurtainSwitcherScheduleId {
    get { return curtainSwitcherScheduleId_; }
    set {
      curtainSwitcherScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as UpdateCurtainSwitcherScheduleClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(UpdateCurtainSwitcherScheduleClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurtainSwitcherScheduleId != other.CurtainSwitcherScheduleId) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurtainSwitcherScheduleId.Length != 0) hash ^= CurtainSwitcherScheduleId.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurtainSwitcherScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(CurtainSwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurtainSwitcherScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CurtainSwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(UpdateCurtainSwitcherScheduleClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.CurtainSwitcherScheduleId.Length != 0) {
      CurtainSwitcherScheduleId = other.CurtainSwitcherScheduleId;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CurtainSwitcherScheduleId = input.ReadString();
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi xóa 1 lịch của rèm cửa
/// </summary>
public sealed partial class DeleteCurtainSwitcherScheduleClientResponse : pb::IMessage<DeleteCurtainSwitcherScheduleClientResponse> {
  private static readonly pb::MessageParser<DeleteCurtainSwitcherScheduleClientResponse> _parser = new pb::MessageParser<DeleteCurtainSwitcherScheduleClientResponse>(() => new DeleteCurtainSwitcherScheduleClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeleteCurtainSwitcherScheduleClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[36]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteCurtainSwitcherScheduleClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteCurtainSwitcherScheduleClientResponse(DeleteCurtainSwitcherScheduleClientResponse other) : this() {
    curtainSwitcherScheduleId_ = other.curtainSwitcherScheduleId_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeleteCurtainSwitcherScheduleClientResponse Clone() {
    return new DeleteCurtainSwitcherScheduleClientResponse(this);
  }

  /// <summary>Field number for the "curtainSwitcherScheduleId" field.</summary>
  public const int CurtainSwitcherScheduleIdFieldNumber = 1;
  private string curtainSwitcherScheduleId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string CurtainSwitcherScheduleId {
    get { return curtainSwitcherScheduleId_; }
    set {
      curtainSwitcherScheduleId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeleteCurtainSwitcherScheduleClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeleteCurtainSwitcherScheduleClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (CurtainSwitcherScheduleId != other.CurtainSwitcherScheduleId) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (CurtainSwitcherScheduleId.Length != 0) hash ^= CurtainSwitcherScheduleId.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (CurtainSwitcherScheduleId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(CurtainSwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (CurtainSwitcherScheduleId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(CurtainSwitcherScheduleId);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeleteCurtainSwitcherScheduleClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.CurtainSwitcherScheduleId.Length != 0) {
      CurtainSwitcherScheduleId = other.CurtainSwitcherScheduleId;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          CurtainSwitcherScheduleId = input.ReadString();
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu về cầu kịch bản bắc cầu
/// </summary>
public sealed partial class SceneClientRequest : pb::IMessage<SceneClientRequest> {
  private static readonly pb::MessageParser<SceneClientRequest> _parser = new pb::MessageParser<SceneClientRequest>(() => new SceneClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[37]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientRequest(SceneClientRequest other) : this() {
    sceneId_ = other.sceneId_;
    source_ = other.source_ != null ? other.source_.Clone() : null;
    target_ = other.target_.Clone();
    type_ = other.type_;
    mode_ = other.mode_;
    hardwareId_ = other.hardwareId_;
    activeTime_ = other.activeTime_ != null ? other.activeTime_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientRequest Clone() {
    return new SceneClientRequest(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private string sceneId_ = "";
  /// <summary>
  /// sceneId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 2;
  private global::DeviceInScene source_;
  /// <summary>
  /// Thiết bị điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceInScene Source {
    get { return source_; }
    set {
      source_ = value;
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 3;
  private static readonly pb::FieldCodec<global::DeviceInScene> _repeated_target_codec
      = pb::FieldCodec.ForMessage(26, global::DeviceInScene.Parser);
  private readonly pbc::RepeatedField<global::DeviceInScene> target_ = new pbc::RepeatedField<global::DeviceInScene>();
  /// <summary>
  /// danh sách các thiết bị được điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DeviceInScene> Target {
    get { return target_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 4;
  private uint type_;
  /// <summary>
  /// 1: Cùng On/Off, 2: Đảo ngược
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 5;
  private uint mode_;
  /// <summary>
  /// 1: Add, 2: Edit, 3: Delete
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 6;
  private string hardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "activeTime" field.</summary>
  public const int ActiveTimeFieldNumber = 7;
  private global::ActiveTime activeTime_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ActiveTime ActiveTime {
    get { return activeTime_; }
    set {
      activeTime_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(Source, other.Source)) return false;
    if(!target_.Equals(other.target_)) return false;
    if (Type != other.Type) return false;
    if (Mode != other.Mode) return false;
    if (HardwareId != other.HardwareId) return false;
    if (!object.Equals(ActiveTime, other.ActiveTime)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (source_ != null) hash ^= Source.GetHashCode();
    hash ^= target_.GetHashCode();
    if (Type != 0) hash ^= Type.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (activeTime_ != null) hash ^= ActiveTime.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SceneId);
    }
    if (source_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Source);
    }
    target_.WriteTo(output, _repeated_target_codec);
    if (Type != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Type);
    }
    if (Mode != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Mode);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(HardwareId);
    }
    if (activeTime_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(ActiveTime);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (source_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
    }
    size += target_.CalculateSize(_repeated_target_codec);
    if (Type != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Type);
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mode);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (activeTime_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ActiveTime);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.source_ != null) {
      if (source_ == null) {
        Source = new global::DeviceInScene();
      }
      Source.MergeFrom(other.Source);
    }
    target_.Add(other.target_);
    if (other.Type != 0) {
      Type = other.Type;
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.activeTime_ != null) {
      if (activeTime_ == null) {
        ActiveTime = new global::ActiveTime();
      }
      ActiveTime.MergeFrom(other.ActiveTime);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SceneId = input.ReadString();
          break;
        }
        case 18: {
          if (source_ == null) {
            Source = new global::DeviceInScene();
          }
          input.ReadMessage(Source);
          break;
        }
        case 26: {
          target_.AddEntriesFrom(input, _repeated_target_codec);
          break;
        }
        case 32: {
          Type = input.ReadUInt32();
          break;
        }
        case 40: {
          Mode = input.ReadUInt32();
          break;
        }
        case 50: {
          HardwareId = input.ReadString();
          break;
        }
        case 58: {
          if (activeTime_ == null) {
            ActiveTime = new global::ActiveTime();
          }
          input.ReadMessage(ActiveTime);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi về kịch bản bắc cầu
/// </summary>
public sealed partial class SceneClientResponse : pb::IMessage<SceneClientResponse> {
  private static readonly pb::MessageParser<SceneClientResponse> _parser = new pb::MessageParser<SceneClientResponse>(() => new SceneClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[38]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientResponse(SceneClientResponse other) : this() {
    sceneId_ = other.sceneId_;
    switcher_ = other.switcher_ != null ? other.switcher_.Clone() : null;
    mode_ = other.mode_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientResponse Clone() {
    return new SceneClientResponse(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private string sceneId_ = "";
  /// <summary>
  /// sceneId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "switcher" field.</summary>
  public const int SwitcherFieldNumber = 2;
  private global::Switcher switcher_;
  /// <summary>
  /// switcher
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::Switcher Switcher {
    get { return switcher_; }
    set {
      switcher_ = value;
    }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 3;
  private uint mode_;
  /// <summary>
  /// 1: Add, 2: Edit, 3: Delete
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(Switcher, other.Switcher)) return false;
    if (Mode != other.Mode) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (switcher_ != null) hash ^= Switcher.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SceneId);
    }
    if (switcher_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Switcher);
    }
    if (Mode != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Mode);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (switcher_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Switcher);
    }
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mode);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.switcher_ != null) {
      if (switcher_ == null) {
        Switcher = new global::Switcher();
      }
      Switcher.MergeFrom(other.Switcher);
    }
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SceneId = input.ReadString();
          break;
        }
        case 18: {
          if (switcher_ == null) {
            Switcher = new global::Switcher();
          }
          input.ReadMessage(Switcher);
          break;
        }
        case 24: {
          Mode = input.ReadUInt32();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu về cầu kịch bản Trigger
/// </summary>
public sealed partial class SceneTriggerClientRequest : pb::IMessage<SceneTriggerClientRequest> {
  private static readonly pb::MessageParser<SceneTriggerClientRequest> _parser = new pb::MessageParser<SceneTriggerClientRequest>(() => new SceneTriggerClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneTriggerClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[39]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientRequest(SceneTriggerClientRequest other) : this() {
    sceneId_ = other.sceneId_;
    source_ = other.source_ != null ? other.source_.Clone() : null;
    target_ = other.target_.Clone();
    mode_ = other.mode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientRequest Clone() {
    return new SceneTriggerClientRequest(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private string sceneId_ = "";
  /// <summary>
  /// sceneId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "source" field.</summary>
  public const int SourceFieldNumber = 2;
  private global::DeviceTriggerScene source_;
  /// <summary>
  /// Thiết bị điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceTriggerScene Source {
    get { return source_; }
    set {
      source_ = value;
    }
  }

  /// <summary>Field number for the "target" field.</summary>
  public const int TargetFieldNumber = 3;
  private static readonly pb::FieldCodec<global::DeviceTriggerScene> _repeated_target_codec
      = pb::FieldCodec.ForMessage(26, global::DeviceTriggerScene.Parser);
  private readonly pbc::RepeatedField<global::DeviceTriggerScene> target_ = new pbc::RepeatedField<global::DeviceTriggerScene>();
  /// <summary>
  /// Danh sách các thiết bị được điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::DeviceTriggerScene> Target {
    get { return target_; }
  }

  /// <summary>Field number for the "mode" field.</summary>
  public const int ModeFieldNumber = 5;
  private uint mode_;
  /// <summary>
  /// 1: Add, 2: Edit, 3: Delete
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Mode {
    get { return mode_; }
    set {
      mode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneTriggerClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneTriggerClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(Source, other.Source)) return false;
    if(!target_.Equals(other.target_)) return false;
    if (Mode != other.Mode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (source_ != null) hash ^= Source.GetHashCode();
    hash ^= target_.GetHashCode();
    if (Mode != 0) hash ^= Mode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SceneId);
    }
    if (source_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Source);
    }
    target_.WriteTo(output, _repeated_target_codec);
    if (Mode != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(Mode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (source_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Source);
    }
    size += target_.CalculateSize(_repeated_target_codec);
    if (Mode != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Mode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneTriggerClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.source_ != null) {
      if (source_ == null) {
        Source = new global::DeviceTriggerScene();
      }
      Source.MergeFrom(other.Source);
    }
    target_.Add(other.target_);
    if (other.Mode != 0) {
      Mode = other.Mode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SceneId = input.ReadString();
          break;
        }
        case 18: {
          if (source_ == null) {
            Source = new global::DeviceTriggerScene();
          }
          input.ReadMessage(Source);
          break;
        }
        case 26: {
          target_.AddEntriesFrom(input, _repeated_target_codec);
          break;
        }
        case 40: {
          Mode = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi về kịch bản
/// </summary>
public sealed partial class SceneTriggerClientResponse : pb::IMessage<SceneTriggerClientResponse> {
  private static readonly pb::MessageParser<SceneTriggerClientResponse> _parser = new pb::MessageParser<SceneTriggerClientResponse>(() => new SceneTriggerClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneTriggerClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[40]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientResponse(SceneTriggerClientResponse other) : this() {
    sceneId_ = other.sceneId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientResponse Clone() {
    return new SceneTriggerClientResponse(this);
  }

  /// <summary>Field number for the "sceneId" field.</summary>
  public const int SceneIdFieldNumber = 1;
  private string sceneId_ = "";
  /// <summary>
  /// sceneId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string SceneId {
    get { return sceneId_; }
    set {
      sceneId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneTriggerClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneTriggerClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (SceneId != other.SceneId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (SceneId.Length != 0) hash ^= SceneId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (SceneId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(SceneId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (SceneId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(SceneId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneTriggerClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.SceneId.Length != 0) {
      SceneId = other.SceneId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          SceneId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu thay đổi trạng thái chuyển động
/// </summary>
public sealed partial class MotionClientRequest : pb::IMessage<MotionClientRequest> {
  private static readonly pb::MessageParser<MotionClientRequest> _parser = new pb::MessageParser<MotionClientRequest>(() => new MotionClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MotionClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[41]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientRequest(MotionClientRequest other) : this() {
    hardwareId_ = other.hardwareId_;
    motionState_ = other.motionState_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientRequest Clone() {
    return new MotionClientRequest(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "motionState" field.</summary>
  public const int MotionStateFieldNumber = 2;
  private global::MotionState motionState_ = global::MotionState.MotionNone;
  /// <summary>
  /// state
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionState MotionState {
    get { return motionState_; }
    set {
      motionState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MotionClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MotionClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    if (MotionState != other.MotionState) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (MotionState != global::MotionState.MotionNone) hash ^= MotionState.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (MotionState != global::MotionState.MotionNone) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MotionState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (MotionState != global::MotionState.MotionNone) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotionState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MotionClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.MotionState != global::MotionState.MotionNone) {
      MotionState = other.MotionState;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
        case 16: {
          MotionState = (global::MotionState) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thay đổi trạng thái thiết bị Motion|PIR
/// </summary>
public sealed partial class MotionClientResponse : pb::IMessage<MotionClientResponse> {
  private static readonly pb::MessageParser<MotionClientResponse> _parser = new pb::MessageParser<MotionClientResponse>(() => new MotionClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MotionClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[42]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientResponse(MotionClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    motionState_ = other.motionState_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientResponse Clone() {
    return new MotionClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "motionState" field.</summary>
  public const int MotionStateFieldNumber = 2;
  private global::MotionState motionState_ = global::MotionState.MotionNone;
  /// <summary>
  /// state
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionState MotionState {
    get { return motionState_; }
    set {
      motionState_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MotionClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MotionClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (MotionState != other.MotionState) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (MotionState != global::MotionState.MotionNone) hash ^= MotionState.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (MotionState != global::MotionState.MotionNone) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MotionState);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (MotionState != global::MotionState.MotionNone) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotionState);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MotionClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.MotionState != global::MotionState.MotionNone) {
      MotionState = other.MotionState;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          MotionState = (global::MotionState) input.ReadEnum();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class MotionOnChangedClientResponse : pb::IMessage<MotionOnChangedClientResponse> {
  private static readonly pb::MessageParser<MotionOnChangedClientResponse> _parser = new pb::MessageParser<MotionOnChangedClientResponse>(() => new MotionOnChangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MotionOnChangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[43]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionOnChangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionOnChangedClientResponse(MotionOnChangedClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    motionState_ = other.motionState_;
    bridge_ = other.bridge_ != null ? other.bridge_.Clone() : null;
    motionSensorType_ = other.motionSensorType_;
    batteryCapacity_ = other.batteryCapacity_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionOnChangedClientResponse Clone() {
    return new MotionOnChangedClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "motionState" field.</summary>
  public const int MotionStateFieldNumber = 2;
  private global::MotionState motionState_ = global::MotionState.MotionNone;
  /// <summary>
  /// state
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionState MotionState {
    get { return motionState_; }
    set {
      motionState_ = value;
    }
  }

  /// <summary>Field number for the "bridge" field.</summary>
  public const int BridgeFieldNumber = 3;
  private global::BridgeInfo bridge_;
  /// <summary>
  /// Thông tin về thiết bị bắc cầu
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BridgeInfo Bridge {
    get { return bridge_; }
    set {
      bridge_ = value;
    }
  }

  /// <summary>Field number for the "motionSensorType" field.</summary>
  public const int MotionSensorTypeFieldNumber = 4;
  private global::MotionSensorType motionSensorType_ = global::MotionSensorType.MotionSensor;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionSensorType MotionSensorType {
    get { return motionSensorType_; }
    set {
      motionSensorType_ = value;
    }
  }

  /// <summary>Field number for the "batteryCapacity" field.</summary>
  public const int BatteryCapacityFieldNumber = 5;
  private float batteryCapacity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float BatteryCapacity {
    get { return batteryCapacity_; }
    set {
      batteryCapacity_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MotionOnChangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MotionOnChangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (MotionState != other.MotionState) return false;
    if (!object.Equals(Bridge, other.Bridge)) return false;
    if (MotionSensorType != other.MotionSensorType) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryCapacity, other.BatteryCapacity)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (MotionState != global::MotionState.MotionNone) hash ^= MotionState.GetHashCode();
    if (bridge_ != null) hash ^= Bridge.GetHashCode();
    if (MotionSensorType != global::MotionSensorType.MotionSensor) hash ^= MotionSensorType.GetHashCode();
    if (BatteryCapacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryCapacity);
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (MotionState != global::MotionState.MotionNone) {
      output.WriteRawTag(16);
      output.WriteEnum((int) MotionState);
    }
    if (bridge_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(Bridge);
    }
    if (MotionSensorType != global::MotionSensorType.MotionSensor) {
      output.WriteRawTag(32);
      output.WriteEnum((int) MotionSensorType);
    }
    if (BatteryCapacity != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(BatteryCapacity);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (MotionState != global::MotionState.MotionNone) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotionState);
    }
    if (bridge_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bridge);
    }
    if (MotionSensorType != global::MotionSensorType.MotionSensor) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) MotionSensorType);
    }
    if (BatteryCapacity != 0F) {
      size += 1 + 4;
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MotionOnChangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.MotionState != global::MotionState.MotionNone) {
      MotionState = other.MotionState;
    }
    if (other.bridge_ != null) {
      if (bridge_ == null) {
        Bridge = new global::BridgeInfo();
      }
      Bridge.MergeFrom(other.Bridge);
    }
    if (other.MotionSensorType != global::MotionSensorType.MotionSensor) {
      MotionSensorType = other.MotionSensorType;
    }
    if (other.BatteryCapacity != 0F) {
      BatteryCapacity = other.BatteryCapacity;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          MotionState = (global::MotionState) input.ReadEnum();
          break;
        }
        case 26: {
          if (bridge_ == null) {
            Bridge = new global::BridgeInfo();
          }
          input.ReadMessage(Bridge);
          break;
        }
        case 32: {
          MotionSensorType = (global::MotionSensorType) input.ReadEnum();
          break;
        }
        case 45: {
          BatteryCapacity = input.ReadFloat();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị Homekit 
/// </summary>
public sealed partial class HomekitOnChangedClientResponse : pb::IMessage<HomekitOnChangedClientResponse> {
  private static readonly pb::MessageParser<HomekitOnChangedClientResponse> _parser = new pb::MessageParser<HomekitOnChangedClientResponse>(() => new HomekitOnChangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HomekitOnChangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[44]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HomekitOnChangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HomekitOnChangedClientResponse(HomekitOnChangedClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    homekitMode_ = other.homekitMode_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HomekitOnChangedClientResponse Clone() {
    return new HomekitOnChangedClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "homekitMode" field.</summary>
  public const int HomekitModeFieldNumber = 2;
  private global::HomekitMode homekitMode_ = global::HomekitMode.HomekitNormalMode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HomekitMode HomekitMode {
    get { return homekitMode_; }
    set {
      homekitMode_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HomekitOnChangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HomekitOnChangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (HomekitMode != other.HomekitMode) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (HomekitMode != global::HomekitMode.HomekitNormalMode) hash ^= HomekitMode.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (HomekitMode != global::HomekitMode.HomekitNormalMode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) HomekitMode);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (HomekitMode != global::HomekitMode.HomekitNormalMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HomekitMode);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HomekitOnChangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.HomekitMode != global::HomekitMode.HomekitNormalMode) {
      HomekitMode = other.HomekitMode;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          HomekitMode = (global::HomekitMode) input.ReadEnum();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class SmartPlugOnchangedClientResponse : pb::IMessage<SmartPlugOnchangedClientResponse> {
  private static readonly pb::MessageParser<SmartPlugOnchangedClientResponse> _parser = new pb::MessageParser<SmartPlugOnchangedClientResponse>(() => new SmartPlugOnchangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SmartPlugOnchangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[45]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SmartPlugOnchangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SmartPlugOnchangedClientResponse(SmartPlugOnchangedClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    index_ = other.index_;
    amp_ = other.amp_;
    power_ = other.power_;
    volt_ = other.volt_;
    powerState_ = other.powerState_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SmartPlugOnchangedClientResponse Clone() {
    return new SmartPlugOnchangedClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "index" field.</summary>
  public const int IndexFieldNumber = 2;
  private uint index_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Index {
    get { return index_; }
    set {
      index_ = value;
    }
  }

  /// <summary>Field number for the "amp" field.</summary>
  public const int AmpFieldNumber = 3;
  private float amp_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Amp {
    get { return amp_; }
    set {
      amp_ = value;
    }
  }

  /// <summary>Field number for the "power" field.</summary>
  public const int PowerFieldNumber = 4;
  private float power_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Power {
    get { return power_; }
    set {
      power_ = value;
    }
  }

  /// <summary>Field number for the "volt" field.</summary>
  public const int VoltFieldNumber = 5;
  private float volt_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float Volt {
    get { return volt_; }
    set {
      volt_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 6;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SmartPlugOnchangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SmartPlugOnchangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (Index != other.Index) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Amp, other.Amp)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Power, other.Power)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(Volt, other.Volt)) return false;
    if (PowerState != other.PowerState) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (Index != 0) hash ^= Index.GetHashCode();
    if (Amp != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Amp);
    if (Power != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Power);
    if (Volt != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(Volt);
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (Index != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(Index);
    }
    if (Amp != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(Amp);
    }
    if (Power != 0F) {
      output.WriteRawTag(37);
      output.WriteFloat(Power);
    }
    if (Volt != 0F) {
      output.WriteRawTag(45);
      output.WriteFloat(Volt);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(48);
      output.WriteEnum((int) PowerState);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (Index != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Index);
    }
    if (Amp != 0F) {
      size += 1 + 4;
    }
    if (Power != 0F) {
      size += 1 + 4;
    }
    if (Volt != 0F) {
      size += 1 + 4;
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SmartPlugOnchangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Index != 0) {
      Index = other.Index;
    }
    if (other.Amp != 0F) {
      Amp = other.Amp;
    }
    if (other.Power != 0F) {
      Power = other.Power;
    }
    if (other.Volt != 0F) {
      Volt = other.Volt;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          Index = input.ReadUInt32();
          break;
        }
        case 29: {
          Amp = input.ReadFloat();
          break;
        }
        case 37: {
          Power = input.ReadFloat();
          break;
        }
        case 45: {
          Volt = input.ReadFloat();
          break;
        }
        case 48: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class EnvironmentOnchangedClientResponse : pb::IMessage<EnvironmentOnchangedClientResponse> {
  private static readonly pb::MessageParser<EnvironmentOnchangedClientResponse> _parser = new pb::MessageParser<EnvironmentOnchangedClientResponse>(() => new EnvironmentOnchangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<EnvironmentOnchangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[46]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentOnchangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentOnchangedClientResponse(EnvironmentOnchangedClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    report_ = other.report_ != null ? other.report_.Clone() : null;
    batteryCapacity_ = other.batteryCapacity_;
    bridgeInfo_ = other.bridgeInfo_ != null ? other.bridgeInfo_.Clone() : null;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public EnvironmentOnchangedClientResponse Clone() {
    return new EnvironmentOnchangedClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "report" field.</summary>
  public const int ReportFieldNumber = 2;
  private global::EnvironmentSensorReport report_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentSensorReport Report {
    get { return report_; }
    set {
      report_ = value;
    }
  }

  /// <summary>Field number for the "batteryCapacity" field.</summary>
  public const int BatteryCapacityFieldNumber = 3;
  private float batteryCapacity_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public float BatteryCapacity {
    get { return batteryCapacity_; }
    set {
      batteryCapacity_ = value;
    }
  }

  /// <summary>Field number for the "bridgeInfo" field.</summary>
  public const int BridgeInfoFieldNumber = 4;
  private global::BridgeInfo bridgeInfo_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BridgeInfo BridgeInfo {
    get { return bridgeInfo_; }
    set {
      bridgeInfo_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as EnvironmentOnchangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(EnvironmentOnchangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(Report, other.Report)) return false;
    if (!pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.Equals(BatteryCapacity, other.BatteryCapacity)) return false;
    if (!object.Equals(BridgeInfo, other.BridgeInfo)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (report_ != null) hash ^= Report.GetHashCode();
    if (BatteryCapacity != 0F) hash ^= pbc::ProtobufEqualityComparers.BitwiseSingleEqualityComparer.GetHashCode(BatteryCapacity);
    if (bridgeInfo_ != null) hash ^= BridgeInfo.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (report_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(Report);
    }
    if (BatteryCapacity != 0F) {
      output.WriteRawTag(29);
      output.WriteFloat(BatteryCapacity);
    }
    if (bridgeInfo_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(BridgeInfo);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (report_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Report);
    }
    if (BatteryCapacity != 0F) {
      size += 1 + 4;
    }
    if (bridgeInfo_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(BridgeInfo);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(EnvironmentOnchangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.report_ != null) {
      if (report_ == null) {
        Report = new global::EnvironmentSensorReport();
      }
      Report.MergeFrom(other.Report);
    }
    if (other.BatteryCapacity != 0F) {
      BatteryCapacity = other.BatteryCapacity;
    }
    if (other.bridgeInfo_ != null) {
      if (bridgeInfo_ == null) {
        BridgeInfo = new global::BridgeInfo();
      }
      BridgeInfo.MergeFrom(other.BridgeInfo);
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18: {
          if (report_ == null) {
            Report = new global::EnvironmentSensorReport();
          }
          input.ReadMessage(Report);
          break;
        }
        case 29: {
          BatteryCapacity = input.ReadFloat();
          break;
        }
        case 34: {
          if (bridgeInfo_ == null) {
            BridgeInfo = new global::BridgeInfo();
          }
          input.ReadMessage(BridgeInfo);
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị nút nhấn 
/// </summary>
public sealed partial class ButtonOnChangedClientResponse : pb::IMessage<ButtonOnChangedClientResponse> {
  private static readonly pb::MessageParser<ButtonOnChangedClientResponse> _parser = new pb::MessageParser<ButtonOnChangedClientResponse>(() => new ButtonOnChangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ButtonOnChangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[47]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ButtonOnChangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ButtonOnChangedClientResponse(ButtonOnChangedClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    buttonState_ = other.buttonState_;
    button_ = other.button_;
    battery_ = other.battery_;
    bridge_ = other.bridge_ != null ? other.bridge_.Clone() : null;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ButtonOnChangedClientResponse Clone() {
    return new ButtonOnChangedClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "buttonState" field.</summary>
  public const int ButtonStateFieldNumber = 2;
  private global::ButtonState buttonState_ = global::ButtonState.Nothing;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ButtonState ButtonState {
    get { return buttonState_; }
    set {
      buttonState_ = value;
    }
  }

  /// <summary>Field number for the "button" field.</summary>
  public const int ButtonFieldNumber = 3;
  private uint button_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Button {
    get { return button_; }
    set {
      button_ = value;
    }
  }

  /// <summary>Field number for the "battery" field.</summary>
  public const int BatteryFieldNumber = 4;
  private int battery_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int Battery {
    get { return battery_; }
    set {
      battery_ = value;
    }
  }

  /// <summary>Field number for the "bridge" field.</summary>
  public const int BridgeFieldNumber = 5;
  private global::BridgeInfo bridge_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::BridgeInfo Bridge {
    get { return bridge_; }
    set {
      bridge_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ButtonOnChangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ButtonOnChangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (ButtonState != other.ButtonState) return false;
    if (Button != other.Button) return false;
    if (Battery != other.Battery) return false;
    if (!object.Equals(Bridge, other.Bridge)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (ButtonState != global::ButtonState.Nothing) hash ^= ButtonState.GetHashCode();
    if (Button != 0) hash ^= Button.GetHashCode();
    if (Battery != 0) hash ^= Battery.GetHashCode();
    if (bridge_ != null) hash ^= Bridge.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (ButtonState != global::ButtonState.Nothing) {
      output.WriteRawTag(16);
      output.WriteEnum((int) ButtonState);
    }
    if (Button != 0) {
      output.WriteRawTag(24);
      output.WriteUInt32(Button);
    }
    if (Battery != 0) {
      output.WriteRawTag(32);
      output.WriteInt32(Battery);
    }
    if (bridge_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(Bridge);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (ButtonState != global::ButtonState.Nothing) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) ButtonState);
    }
    if (Button != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Button);
    }
    if (Battery != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(Battery);
    }
    if (bridge_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(Bridge);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ButtonOnChangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.ButtonState != global::ButtonState.Nothing) {
      ButtonState = other.ButtonState;
    }
    if (other.Button != 0) {
      Button = other.Button;
    }
    if (other.Battery != 0) {
      Battery = other.Battery;
    }
    if (other.bridge_ != null) {
      if (bridge_ == null) {
        Bridge = new global::BridgeInfo();
      }
      Bridge.MergeFrom(other.Bridge);
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          ButtonState = (global::ButtonState) input.ReadEnum();
          break;
        }
        case 24: {
          Button = input.ReadUInt32();
          break;
        }
        case 32: {
          Battery = input.ReadInt32();
          break;
        }
        case 42: {
          if (bridge_ == null) {
            Bridge = new global::BridgeInfo();
          }
          input.ReadMessage(Bridge);
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thông tin thay đổi các chỉ số của thiết bị điện/nước runtime
/// </summary>
public sealed partial class MeterOnChangedClientResponse : pb::IMessage<MeterOnChangedClientResponse> {
  private static readonly pb::MessageParser<MeterOnChangedClientResponse> _parser = new pb::MessageParser<MeterOnChangedClientResponse>(() => new MeterOnChangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterOnChangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[48]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterOnChangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterOnChangedClientResponse(MeterOnChangedClientResponse other) : this() {
    indexs_ = other.indexs_.Clone();
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterOnChangedClientResponse Clone() {
    return new MeterOnChangedClientResponse(this);
  }

  /// <summary>Field number for the "indexs" field.</summary>
  public const int IndexsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::MeterIndex> _repeated_indexs_codec
      = pb::FieldCodec.ForMessage(10, global::MeterIndex.Parser);
  private readonly pbc::RepeatedField<global::MeterIndex> indexs_ = new pbc::RepeatedField<global::MeterIndex>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MeterIndex> Indexs {
    get { return indexs_; }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterOnChangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterOnChangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!indexs_.Equals(other.indexs_)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= indexs_.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    indexs_.WriteTo(output, _repeated_indexs_codec);
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += indexs_.CalculateSize(_repeated_indexs_codec);
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterOnChangedClientResponse other) {
    if (other == null) {
      return;
    }
    indexs_.Add(other.indexs_);
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          indexs_.AddEntriesFrom(input, _repeated_indexs_codec);
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class DebugLoggingResponse : pb::IMessage<DebugLoggingResponse> {
  private static readonly pb::MessageParser<DebugLoggingResponse> _parser = new pb::MessageParser<DebugLoggingResponse>(() => new DebugLoggingResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DebugLoggingResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[49]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DebugLoggingResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DebugLoggingResponse(DebugLoggingResponse other) : this() {
    deviceId_ = other.deviceId_;
    label_ = other.label_;
    message_ = other.message_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DebugLoggingResponse Clone() {
    return new DebugLoggingResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "label" field.</summary>
  public const int LabelFieldNumber = 2;
  private string label_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Label {
    get { return label_; }
    set {
      label_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "message" field.</summary>
  public const int MessageFieldNumber = 3;
  private string message_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Message {
    get { return message_; }
    set {
      message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DebugLoggingResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DebugLoggingResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (Label != other.Label) return false;
    if (Message != other.Message) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (Label.Length != 0) hash ^= Label.GetHashCode();
    if (Message.Length != 0) hash ^= Message.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (Label.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(Label);
    }
    if (Message.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Message);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (Label.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Label);
    }
    if (Message.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Message);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DebugLoggingResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.Label.Length != 0) {
      Label = other.Label;
    }
    if (other.Message.Length != 0) {
      Message = other.Message;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18: {
          Label = input.ReadString();
          break;
        }
        case 26: {
          Message = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

public sealed partial class LedDriverOnChangedClientResponse : pb::IMessage<LedDriverOnChangedClientResponse> {
  private static readonly pb::MessageParser<LedDriverOnChangedClientResponse> _parser = new pb::MessageParser<LedDriverOnChangedClientResponse>(() => new LedDriverOnChangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LedDriverOnChangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[50]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverOnChangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverOnChangedClientResponse(LedDriverOnChangedClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    ledIndex_ = other.ledIndex_;
    brightnessPercent_ = other.brightnessPercent_;
    powerState_ = other.powerState_;
    groupControl_ = other.groupControl_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverOnChangedClientResponse Clone() {
    return new LedDriverOnChangedClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ledIndex" field.</summary>
  public const int LedIndexFieldNumber = 2;
  private uint ledIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LedIndex {
    get { return ledIndex_; }
    set {
      ledIndex_ = value;
    }
  }

  /// <summary>Field number for the "brightnessPercent" field.</summary>
  public const int BrightnessPercentFieldNumber = 3;
  private int brightnessPercent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BrightnessPercent {
    get { return brightnessPercent_; }
    set {
      brightnessPercent_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 4;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "groupControl" field.</summary>
  public const int GroupControlFieldNumber = 5;
  private uint groupControl_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupControl {
    get { return groupControl_; }
    set {
      groupControl_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LedDriverOnChangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LedDriverOnChangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (LedIndex != other.LedIndex) return false;
    if (BrightnessPercent != other.BrightnessPercent) return false;
    if (PowerState != other.PowerState) return false;
    if (GroupControl != other.GroupControl) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (LedIndex != 0) hash ^= LedIndex.GetHashCode();
    if (BrightnessPercent != 0) hash ^= BrightnessPercent.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (GroupControl != 0) hash ^= GroupControl.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (LedIndex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(LedIndex);
    }
    if (BrightnessPercent != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BrightnessPercent);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PowerState);
    }
    if (GroupControl != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(GroupControl);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (LedIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LedIndex);
    }
    if (BrightnessPercent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrightnessPercent);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (GroupControl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupControl);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LedDriverOnChangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.LedIndex != 0) {
      LedIndex = other.LedIndex;
    }
    if (other.BrightnessPercent != 0) {
      BrightnessPercent = other.BrightnessPercent;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.GroupControl != 0) {
      GroupControl = other.GroupControl;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          LedIndex = input.ReadUInt32();
          break;
        }
        case 24: {
          BrightnessPercent = input.ReadInt32();
          break;
        }
        case 32: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 40: {
          GroupControl = input.ReadUInt32();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thông tin thay đổi các chỉ số của thiết bị điện/nước runtime
/// </summary>
public sealed partial class MeterClientResponse : pb::IMessage<MeterClientResponse> {
  private static readonly pb::MessageParser<MeterClientResponse> _parser = new pb::MessageParser<MeterClientResponse>(() => new MeterClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[51]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientResponse(MeterClientResponse other) : this() {
    id_ = other.id_;
    hardwareId_ = other.hardwareId_;
    indexs_ = other.indexs_.Clone();
    timestamp_ = other.timestamp_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientResponse Clone() {
    return new MeterClientResponse(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "indexs" field.</summary>
  public const int IndexsFieldNumber = 3;
  private static readonly pb::FieldCodec<global::MeterIndex> _repeated_indexs_codec
      = pb::FieldCodec.ForMessage(26, global::MeterIndex.Parser);
  private readonly pbc::RepeatedField<global::MeterIndex> indexs_ = new pbc::RepeatedField<global::MeterIndex>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::MeterIndex> Indexs {
    get { return indexs_; }
  }

  /// <summary>Field number for the "timestamp" field.</summary>
  public const int TimestampFieldNumber = 4;
  private uint timestamp_;
  /// <summary>
  /// Thời gian gửi lên server unixtime
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Timestamp {
    get { return timestamp_; }
    set {
      timestamp_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (HardwareId != other.HardwareId) return false;
    if(!indexs_.Equals(other.indexs_)) return false;
    if (Timestamp != other.Timestamp) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    hash ^= indexs_.GetHashCode();
    if (Timestamp != 0) hash ^= Timestamp.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    indexs_.WriteTo(output, _repeated_indexs_codec);
    if (Timestamp != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Timestamp);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    size += indexs_.CalculateSize(_repeated_indexs_codec);
    if (Timestamp != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timestamp);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    indexs_.Add(other.indexs_);
    if (other.Timestamp != 0) {
      Timestamp = other.Timestamp;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
        case 26: {
          indexs_.AddEntriesFrom(input, _repeated_indexs_codec);
          break;
        }
        case 32: {
          Timestamp = input.ReadUInt32();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Lấy giá trị điện/nước bị mất trong khoảng thời gian
/// </summary>
public sealed partial class MeterClientRequest : pb::IMessage<MeterClientRequest> {
  private static readonly pb::MessageParser<MeterClientRequest> _parser = new pb::MessageParser<MeterClientRequest>(() => new MeterClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[52]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientRequest(MeterClientRequest other) : this() {
    date_ = other.date_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientRequest Clone() {
    return new MeterClientRequest(this);
  }

  /// <summary>Field number for the "date" field.</summary>
  public const int DateFieldNumber = 1;
  private uint date_;
  /// <summary>
  /// in month
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Date {
    get { return date_; }
    set {
      date_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Date != other.Date) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Date != 0) hash ^= Date.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Date != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Date);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Date != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Date);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.Date != 0) {
      Date = other.Date;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Date = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

public sealed partial class MeterClientConfirm : pb::IMessage<MeterClientConfirm> {
  private static readonly pb::MessageParser<MeterClientConfirm> _parser = new pb::MessageParser<MeterClientConfirm>(() => new MeterClientConfirm());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterClientConfirm> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[53]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientConfirm() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientConfirm(MeterClientConfirm other) : this() {
    id_ = other.id_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientConfirm Clone() {
    return new MeterClientConfirm(this);
  }

  /// <summary>Field number for the "id" field.</summary>
  public const int IdFieldNumber = 1;
  private uint id_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Id {
    get { return id_; }
    set {
      id_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterClientConfirm);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterClientConfirm other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Id != other.Id) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Id != 0) hash ^= Id.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Id != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Id);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Id != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Id);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterClientConfirm other) {
    if (other == null) {
      return;
    }
    if (other.Id != 0) {
      Id = other.Id;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Id = input.ReadUInt32();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Yêu cầu chuyển mode homekit
/// </summary>
public sealed partial class SetHomekitModeClientRequest : pb::IMessage<SetHomekitModeClientRequest> {
  private static readonly pb::MessageParser<SetHomekitModeClientRequest> _parser = new pb::MessageParser<SetHomekitModeClientRequest>(() => new SetHomekitModeClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetHomekitModeClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[54]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetHomekitModeClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetHomekitModeClientRequest(SetHomekitModeClientRequest other) : this() {
    hardwareId_ = other.hardwareId_;
    homekitMode_ = other.homekitMode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetHomekitModeClientRequest Clone() {
    return new SetHomekitModeClientRequest(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "homekitMode" field.</summary>
  public const int HomekitModeFieldNumber = 2;
  private global::HomekitMode homekitMode_ = global::HomekitMode.HomekitNormalMode;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HomekitMode HomekitMode {
    get { return homekitMode_; }
    set {
      homekitMode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetHomekitModeClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetHomekitModeClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    if (HomekitMode != other.HomekitMode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (HomekitMode != global::HomekitMode.HomekitNormalMode) hash ^= HomekitMode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (HomekitMode != global::HomekitMode.HomekitNormalMode) {
      output.WriteRawTag(16);
      output.WriteEnum((int) HomekitMode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (HomekitMode != global::HomekitMode.HomekitNormalMode) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) HomekitMode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetHomekitModeClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.HomekitMode != global::HomekitMode.HomekitNormalMode) {
      HomekitMode = other.HomekitMode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
        case 16: {
          HomekitMode = (global::HomekitMode) input.ReadEnum();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi yêu cầu chuyển mode homekit
/// </summary>
public sealed partial class SetHomekitModeClientResponse : pb::IMessage<SetHomekitModeClientResponse> {
  private static readonly pb::MessageParser<SetHomekitModeClientResponse> _parser = new pb::MessageParser<SetHomekitModeClientResponse>(() => new SetHomekitModeClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SetHomekitModeClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[55]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetHomekitModeClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetHomekitModeClientResponse(SetHomekitModeClientResponse other) : this() {
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SetHomekitModeClientResponse Clone() {
    return new SetHomekitModeClientResponse(this);
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SetHomekitModeClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SetHomekitModeClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SetHomekitModeClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu bắt đầu cập nhật Firmware điện/nước
/// </summary>
public sealed partial class BeginUpdateFirmwareMeterDeviceClientRequest : pb::IMessage<BeginUpdateFirmwareMeterDeviceClientRequest> {
  private static readonly pb::MessageParser<BeginUpdateFirmwareMeterDeviceClientRequest> _parser = new pb::MessageParser<BeginUpdateFirmwareMeterDeviceClientRequest>(() => new BeginUpdateFirmwareMeterDeviceClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BeginUpdateFirmwareMeterDeviceClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[56]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginUpdateFirmwareMeterDeviceClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginUpdateFirmwareMeterDeviceClientRequest(BeginUpdateFirmwareMeterDeviceClientRequest other) : this() {
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginUpdateFirmwareMeterDeviceClientRequest Clone() {
    return new BeginUpdateFirmwareMeterDeviceClientRequest(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BeginUpdateFirmwareMeterDeviceClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BeginUpdateFirmwareMeterDeviceClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BeginUpdateFirmwareMeterDeviceClientRequest other) {
    if (other == null) {
      return;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
      }
    }
  }

}

/// <summary>
/// Phản hồi thông tin bắt đầu cập nhật Firmware điện/nước
/// </summary>
public sealed partial class BeginUpdateFirmwareMeterDeviceClientResponse : pb::IMessage<BeginUpdateFirmwareMeterDeviceClientResponse> {
  private static readonly pb::MessageParser<BeginUpdateFirmwareMeterDeviceClientResponse> _parser = new pb::MessageParser<BeginUpdateFirmwareMeterDeviceClientResponse>(() => new BeginUpdateFirmwareMeterDeviceClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<BeginUpdateFirmwareMeterDeviceClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[57]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginUpdateFirmwareMeterDeviceClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginUpdateFirmwareMeterDeviceClientResponse(BeginUpdateFirmwareMeterDeviceClientResponse other) : this() {
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public BeginUpdateFirmwareMeterDeviceClientResponse Clone() {
    return new BeginUpdateFirmwareMeterDeviceClientResponse(this);
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as BeginUpdateFirmwareMeterDeviceClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(BeginUpdateFirmwareMeterDeviceClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(BeginUpdateFirmwareMeterDeviceClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi thông tin phần trăm cập nhật firmware điện/nước runtime
/// </summary>
public sealed partial class ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse : pb::IMessage<ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse> {
  private static readonly pb::MessageParser<ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse> _parser = new pb::MessageParser<ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse>(() => new ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[58]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse(ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse other) : this() {
    percent_ = other.percent_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse Clone() {
    return new ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse(this);
  }

  /// <summary>Field number for the "percent" field.</summary>
  public const int PercentFieldNumber = 1;
  private uint percent_;
  /// <summary>
  /// Phần trăm tiến độ cập nhật Firmware
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Percent {
    get { return percent_; }
    set {
      percent_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (Percent != other.Percent) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (Percent != 0) hash ^= Percent.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (Percent != 0) {
      output.WriteRawTag(8);
      output.WriteUInt32(Percent);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (Percent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Percent);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ProgressUpdateFirmwareOnChangedMeterDeviceClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.Percent != 0) {
      Percent = other.Percent;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 8: {
          Percent = input.ReadUInt32();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu điều khiển điều hòa
/// </summary>
public sealed partial class AirConditionerClientRequest : pb::IMessage<AirConditionerClientRequest> {
  private static readonly pb::MessageParser<AirConditionerClientRequest> _parser = new pb::MessageParser<AirConditionerClientRequest>(() => new AirConditionerClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[59]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientRequest(AirConditionerClientRequest other) : this() {
    state_ = other.state_ != null ? other.state_.Clone() : null;
    hardwareId_ = other.hardwareId_;
    encode_ = other.encode_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientRequest Clone() {
    return new AirConditionerClientRequest(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private global::AirConditionerState state_;
  /// <summary>
  /// Dành cho điều hòa điều khiển bằng dây
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 2;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "encode" field.</summary>
  public const int EncodeFieldNumber = 3;
  private string encode_ = "";
  /// <summary>
  /// Chuỗi mã hóa dành cho điều hòa điều khiển bằng IR
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string Encode {
    get { return encode_; }
    set {
      encode_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(State, other.State)) return false;
    if (HardwareId != other.HardwareId) return false;
    if (Encode != other.Encode) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (state_ != null) hash ^= State.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (Encode.Length != 0) hash ^= Encode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (state_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(State);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(HardwareId);
    }
    if (Encode.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(Encode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (state_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (Encode.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(Encode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.state_ != null) {
      if (state_ == null) {
        State = new global::AirConditionerState();
      }
      State.MergeFrom(other.State);
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.Encode.Length != 0) {
      Encode = other.Encode;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (state_ == null) {
            State = new global::AirConditionerState();
          }
          input.ReadMessage(State);
          break;
        }
        case 18: {
          HardwareId = input.ReadString();
          break;
        }
        case 26: {
          Encode = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi yêu cầu điều khiển điều hòa
/// </summary>
public sealed partial class AirConditionerClientResponse : pb::IMessage<AirConditionerClientResponse> {
  private static readonly pb::MessageParser<AirConditionerClientResponse> _parser = new pb::MessageParser<AirConditionerClientResponse>(() => new AirConditionerClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[60]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientResponse(AirConditionerClientResponse other) : this() {
    state_ = other.state_ != null ? other.state_.Clone() : null;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientResponse Clone() {
    return new AirConditionerClientResponse(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private global::AirConditionerState state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(State, other.State)) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (state_ != null) hash ^= State.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (state_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(State);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (state_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.state_ != null) {
      if (state_ == null) {
        State = new global::AirConditionerState();
      }
      State.MergeFrom(other.State);
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (state_ == null) {
            State = new global::AirConditionerState();
          }
          input.ReadMessage(State);
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu gửi trạng thái điều hòa
/// </summary>
public sealed partial class GetAirConditionerClientRequest : pb::IMessage<GetAirConditionerClientRequest> {
  private static readonly pb::MessageParser<GetAirConditionerClientRequest> _parser = new pb::MessageParser<GetAirConditionerClientRequest>(() => new GetAirConditionerClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetAirConditionerClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[61]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetAirConditionerClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetAirConditionerClientRequest(GetAirConditionerClientRequest other) : this() {
    hardwareId_ = other.hardwareId_;
    indoorId_ = other.indoorId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetAirConditionerClientRequest Clone() {
    return new GetAirConditionerClientRequest(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "indoorId" field.</summary>
  public const int IndoorIdFieldNumber = 2;
  private uint indoorId_;
  /// <summary>
  /// Id của dàn lạnh, 0 hoặc null nếu máy lạnh chỉ quản lý 1 dàn lạnh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IndoorId {
    get { return indoorId_; }
    set {
      indoorId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetAirConditionerClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetAirConditionerClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    if (IndoorId != other.IndoorId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (IndoorId != 0) hash ^= IndoorId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (IndoorId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(IndoorId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (IndoorId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndoorId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetAirConditionerClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.IndoorId != 0) {
      IndoorId = other.IndoorId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
        case 16: {
          IndoorId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi trạng thái điều hòa mới nhất
/// </summary>
public sealed partial class GetAirConditionerClientResponse : pb::IMessage<GetAirConditionerClientResponse> {
  private static readonly pb::MessageParser<GetAirConditionerClientResponse> _parser = new pb::MessageParser<GetAirConditionerClientResponse>(() => new GetAirConditionerClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<GetAirConditionerClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[62]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetAirConditionerClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetAirConditionerClientResponse(GetAirConditionerClientResponse other) : this() {
    state_ = other.state_ != null ? other.state_.Clone() : null;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public GetAirConditionerClientResponse Clone() {
    return new GetAirConditionerClientResponse(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private global::AirConditionerState state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as GetAirConditionerClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(GetAirConditionerClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(State, other.State)) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (state_ != null) hash ^= State.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (state_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(State);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (state_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(GetAirConditionerClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.state_ != null) {
      if (state_ == null) {
        State = new global::AirConditionerState();
      }
      State.MergeFrom(other.State);
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (state_ == null) {
            State = new global::AirConditionerState();
          }
          input.ReadMessage(State);
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Dùng cho trường điều hòa chủ động gửi trạng thái lên server, runtime
/// </summary>
public sealed partial class AirConditionerOnChangedClientResponse : pb::IMessage<AirConditionerOnChangedClientResponse> {
  private static readonly pb::MessageParser<AirConditionerOnChangedClientResponse> _parser = new pb::MessageParser<AirConditionerOnChangedClientResponse>(() => new AirConditionerOnChangedClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerOnChangedClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[63]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerOnChangedClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerOnChangedClientResponse(AirConditionerOnChangedClientResponse other) : this() {
    state_ = other.state_ != null ? other.state_.Clone() : null;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerOnChangedClientResponse Clone() {
    return new AirConditionerOnChangedClientResponse(this);
  }

  /// <summary>Field number for the "state" field.</summary>
  public const int StateFieldNumber = 1;
  private global::AirConditionerState state_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerState State {
    get { return state_; }
    set {
      state_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 2;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerOnChangedClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerOnChangedClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(State, other.State)) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (state_ != null) hash ^= State.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (state_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(State);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (state_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(State);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerOnChangedClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.state_ != null) {
      if (state_ == null) {
        State = new global::AirConditionerState();
      }
      State.MergeFrom(other.State);
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (state_ == null) {
            State = new global::AirConditionerState();
          }
          input.ReadMessage(State);
          break;
        }
        case 18: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Dùng cho trường hợp điều hòa yêu cầu thêm dàn lạnh
/// </summary>
public sealed partial class AirConditionerAddIndoorsRequest : pb::IMessage<AirConditionerAddIndoorsRequest> {
  private static readonly pb::MessageParser<AirConditionerAddIndoorsRequest> _parser = new pb::MessageParser<AirConditionerAddIndoorsRequest>(() => new AirConditionerAddIndoorsRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerAddIndoorsRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[64]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerAddIndoorsRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerAddIndoorsRequest(AirConditionerAddIndoorsRequest other) : this() {
    deviceId_ = other.deviceId_;
    indoorId_ = other.indoorId_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerAddIndoorsRequest Clone() {
    return new AirConditionerAddIndoorsRequest(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "indoorId" field.</summary>
  public const int IndoorIdFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_indoorId_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> indoorId_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> IndoorId {
    get { return indoorId_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerAddIndoorsRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerAddIndoorsRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if(!indoorId_.Equals(other.indoorId_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    hash ^= indoorId_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    indoorId_.WriteTo(output, _repeated_indoorId_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    size += indoorId_.CalculateSize(_repeated_indoorId_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerAddIndoorsRequest other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    indoorId_.Add(other.indoorId_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 18:
        case 16: {
          indoorId_.AddEntriesFrom(input, _repeated_indoorId_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi yêu cầu thêm dàn lạnh mới của điều hòa
/// </summary>
public sealed partial class AirConditionerAddIndoorsResponse : pb::IMessage<AirConditionerAddIndoorsResponse> {
  private static readonly pb::MessageParser<AirConditionerAddIndoorsResponse> _parser = new pb::MessageParser<AirConditionerAddIndoorsResponse>(() => new AirConditionerAddIndoorsResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerAddIndoorsResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[65]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerAddIndoorsResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerAddIndoorsResponse(AirConditionerAddIndoorsResponse other) : this() {
    hardwareId_ = other.hardwareId_;
    indoorId_ = other.indoorId_.Clone();
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerAddIndoorsResponse Clone() {
    return new AirConditionerAddIndoorsResponse(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "indoorId" field.</summary>
  public const int IndoorIdFieldNumber = 2;
  private static readonly pb::FieldCodec<uint> _repeated_indoorId_codec
      = pb::FieldCodec.ForUInt32(18);
  private readonly pbc::RepeatedField<uint> indoorId_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> IndoorId {
    get { return indoorId_; }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerAddIndoorsResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerAddIndoorsResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    if(!indoorId_.Equals(other.indoorId_)) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    hash ^= indoorId_.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    indoorId_.WriteTo(output, _repeated_indoorId_codec);
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    size += indoorId_.CalculateSize(_repeated_indoorId_codec);
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerAddIndoorsResponse other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    indoorId_.Add(other.indoorId_);
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
        case 18:
        case 16: {
          indoorId_.AddEntriesFrom(input, _repeated_indoorId_codec);
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Dùng cho trường hợp điều hòa yêu cầu xóa dàn lạnh
/// </summary>
public sealed partial class AirConditionerRemoveIndoorRequest : pb::IMessage<AirConditionerRemoveIndoorRequest> {
  private static readonly pb::MessageParser<AirConditionerRemoveIndoorRequest> _parser = new pb::MessageParser<AirConditionerRemoveIndoorRequest>(() => new AirConditionerRemoveIndoorRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerRemoveIndoorRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[66]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerRemoveIndoorRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerRemoveIndoorRequest(AirConditionerRemoveIndoorRequest other) : this() {
    deviceId_ = other.deviceId_;
    indoorId_ = other.indoorId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerRemoveIndoorRequest Clone() {
    return new AirConditionerRemoveIndoorRequest(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "indoorId" field.</summary>
  public const int IndoorIdFieldNumber = 2;
  private uint indoorId_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint IndoorId {
    get { return indoorId_; }
    set {
      indoorId_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerRemoveIndoorRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerRemoveIndoorRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (IndoorId != other.IndoorId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (IndoorId != 0) hash ^= IndoorId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (IndoorId != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(IndoorId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (IndoorId != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(IndoorId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerRemoveIndoorRequest other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.IndoorId != 0) {
      IndoorId = other.IndoorId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          IndoorId = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi yêu cầu xóa dàn lạnh của điều hòa
/// </summary>
public sealed partial class AirConditionerRemoveIndoorResponse : pb::IMessage<AirConditionerRemoveIndoorResponse> {
  private static readonly pb::MessageParser<AirConditionerRemoveIndoorResponse> _parser = new pb::MessageParser<AirConditionerRemoveIndoorResponse>(() => new AirConditionerRemoveIndoorResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerRemoveIndoorResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[67]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerRemoveIndoorResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerRemoveIndoorResponse(AirConditionerRemoveIndoorResponse other) : this() {
    hardwareId_ = other.hardwareId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerRemoveIndoorResponse Clone() {
    return new AirConditionerRemoveIndoorResponse(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerRemoveIndoorResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerRemoveIndoorResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerRemoveIndoorResponse other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được lệnh gửi đến thiết bị
/// </summary>
public sealed partial class SendCommandRemoteClientRequest : pb::IMessage<SendCommandRemoteClientRequest> {
  private static readonly pb::MessageParser<SendCommandRemoteClientRequest> _parser = new pb::MessageParser<SendCommandRemoteClientRequest>(() => new SendCommandRemoteClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SendCommandRemoteClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[68]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SendCommandRemoteClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SendCommandRemoteClientRequest(SendCommandRemoteClientRequest other) : this() {
    commands_ = other.commands_.Clone();
    type_ = other.type_;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SendCommandRemoteClientRequest Clone() {
    return new SendCommandRemoteClientRequest(this);
  }

  /// <summary>Field number for the "commands" field.</summary>
  public const int CommandsFieldNumber = 1;
  private static readonly pb::FieldCodec<uint> _repeated_commands_codec
      = pb::FieldCodec.ForUInt32(10);
  private readonly pbc::RepeatedField<uint> commands_ = new pbc::RepeatedField<uint>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Commands {
    get { return commands_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 2;
  private global::TypeLearn type_ = global::TypeLearn.Ir;
  /// <summary>
  /// IR or RF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeLearn Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 3;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SendCommandRemoteClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SendCommandRemoteClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!commands_.Equals(other.commands_)) return false;
    if (Type != other.Type) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= commands_.GetHashCode();
    if (Type != global::TypeLearn.Ir) hash ^= Type.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    commands_.WriteTo(output, _repeated_commands_codec);
    if (Type != global::TypeLearn.Ir) {
      output.WriteRawTag(16);
      output.WriteEnum((int) Type);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += commands_.CalculateSize(_repeated_commands_codec);
    if (Type != global::TypeLearn.Ir) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SendCommandRemoteClientRequest other) {
    if (other == null) {
      return;
    }
    commands_.Add(other.commands_);
    if (other.Type != global::TypeLearn.Ir) {
      Type = other.Type;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10:
        case 8: {
          commands_.AddEntriesFrom(input, _repeated_commands_codec);
          break;
        }
        case 16: {
          Type = (global::TypeLearn) input.ReadEnum();
          break;
        }
        case 26: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Nhận được yêu cầu học lệnh
/// </summary>
public sealed partial class LearnCommandRemoteClientRequest : pb::IMessage<LearnCommandRemoteClientRequest> {
  private static readonly pb::MessageParser<LearnCommandRemoteClientRequest> _parser = new pb::MessageParser<LearnCommandRemoteClientRequest>(() => new LearnCommandRemoteClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LearnCommandRemoteClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[69]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LearnCommandRemoteClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LearnCommandRemoteClientRequest(LearnCommandRemoteClientRequest other) : this() {
    remoteId_ = other.remoteId_;
    remoteLibraryCmdId_ = other.remoteLibraryCmdId_;
    remoteMutilLibraryCmdId_ = other.remoteMutilLibraryCmdId_;
    timeout_ = other.timeout_;
    type_ = other.type_;
    hardwareId_ = other.hardwareId_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LearnCommandRemoteClientRequest Clone() {
    return new LearnCommandRemoteClientRequest(this);
  }

  /// <summary>Field number for the "remoteId" field.</summary>
  public const int RemoteIdFieldNumber = 1;
  private string remoteId_ = "";
  /// <summary>
  /// Id của remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteId {
    get { return remoteId_; }
    set {
      remoteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteLibraryCmdId" field.</summary>
  public const int RemoteLibraryCmdIdFieldNumber = 2;
  private string remoteLibraryCmdId_ = "";
  /// <summary>
  /// Id của lệnh từ thư viện
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteLibraryCmdId {
    get { return remoteLibraryCmdId_; }
    set {
      remoteLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteMutilLibraryCmdId" field.</summary>
  public const int RemoteMutilLibraryCmdIdFieldNumber = 3;
  private string remoteMutilLibraryCmdId_ = "";
  /// <summary>
  /// Id của lệnh từ remote đa năng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteMutilLibraryCmdId {
    get { return remoteMutilLibraryCmdId_; }
    set {
      remoteMutilLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "timeout" field.</summary>
  public const int TimeoutFieldNumber = 4;
  private uint timeout_;
  /// <summary>
  /// Thiết lập timout cho client khi học lệnh
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint Timeout {
    get { return timeout_; }
    set {
      timeout_ = value;
    }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 5;
  private global::TypeLearn type_ = global::TypeLearn.Ir;
  /// <summary>
  /// IR or RF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeLearn Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 6;
  private string hardwareId_ = "";
  /// <summary>
  /// hardwareId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LearnCommandRemoteClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LearnCommandRemoteClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RemoteId != other.RemoteId) return false;
    if (RemoteLibraryCmdId != other.RemoteLibraryCmdId) return false;
    if (RemoteMutilLibraryCmdId != other.RemoteMutilLibraryCmdId) return false;
    if (Timeout != other.Timeout) return false;
    if (Type != other.Type) return false;
    if (HardwareId != other.HardwareId) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RemoteId.Length != 0) hash ^= RemoteId.GetHashCode();
    if (RemoteLibraryCmdId.Length != 0) hash ^= RemoteLibraryCmdId.GetHashCode();
    if (RemoteMutilLibraryCmdId.Length != 0) hash ^= RemoteMutilLibraryCmdId.GetHashCode();
    if (Timeout != 0) hash ^= Timeout.GetHashCode();
    if (Type != global::TypeLearn.Ir) hash ^= Type.GetHashCode();
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RemoteId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RemoteId);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RemoteLibraryCmdId);
    }
    if (RemoteMutilLibraryCmdId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(RemoteMutilLibraryCmdId);
    }
    if (Timeout != 0) {
      output.WriteRawTag(32);
      output.WriteUInt32(Timeout);
    }
    if (Type != global::TypeLearn.Ir) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Type);
    }
    if (HardwareId.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(HardwareId);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RemoteId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteId);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteLibraryCmdId);
    }
    if (RemoteMutilLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteMutilLibraryCmdId);
    }
    if (Timeout != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Timeout);
    }
    if (Type != global::TypeLearn.Ir) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LearnCommandRemoteClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.RemoteId.Length != 0) {
      RemoteId = other.RemoteId;
    }
    if (other.RemoteLibraryCmdId.Length != 0) {
      RemoteLibraryCmdId = other.RemoteLibraryCmdId;
    }
    if (other.RemoteMutilLibraryCmdId.Length != 0) {
      RemoteMutilLibraryCmdId = other.RemoteMutilLibraryCmdId;
    }
    if (other.Timeout != 0) {
      Timeout = other.Timeout;
    }
    if (other.Type != global::TypeLearn.Ir) {
      Type = other.Type;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RemoteId = input.ReadString();
          break;
        }
        case 18: {
          RemoteLibraryCmdId = input.ReadString();
          break;
        }
        case 26: {
          RemoteMutilLibraryCmdId = input.ReadString();
          break;
        }
        case 32: {
          Timeout = input.ReadUInt32();
          break;
        }
        case 40: {
          Type = (global::TypeLearn) input.ReadEnum();
          break;
        }
        case 50: {
          HardwareId = input.ReadString();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi lệnh gửi đến thiết bị
/// </summary>
public sealed partial class SendCommandRemoteClientResponse : pb::IMessage<SendCommandRemoteClientResponse> {
  private static readonly pb::MessageParser<SendCommandRemoteClientResponse> _parser = new pb::MessageParser<SendCommandRemoteClientResponse>(() => new SendCommandRemoteClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SendCommandRemoteClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[70]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SendCommandRemoteClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SendCommandRemoteClientResponse(SendCommandRemoteClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SendCommandRemoteClientResponse Clone() {
    return new SendCommandRemoteClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SendCommandRemoteClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SendCommandRemoteClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SendCommandRemoteClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi yêu cầu học lệnh
/// </summary>
public sealed partial class LearnCommandRemoteClientResponse : pb::IMessage<LearnCommandRemoteClientResponse> {
  private static readonly pb::MessageParser<LearnCommandRemoteClientResponse> _parser = new pb::MessageParser<LearnCommandRemoteClientResponse>(() => new LearnCommandRemoteClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LearnCommandRemoteClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[71]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LearnCommandRemoteClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LearnCommandRemoteClientResponse(LearnCommandRemoteClientResponse other) : this() {
    remoteId_ = other.remoteId_;
    remoteLibraryCmdId_ = other.remoteLibraryCmdId_;
    remoteMutilLibraryCmdId_ = other.remoteMutilLibraryCmdId_;
    commands_ = other.commands_.Clone();
    type_ = other.type_;
    deviceId_ = other.deviceId_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LearnCommandRemoteClientResponse Clone() {
    return new LearnCommandRemoteClientResponse(this);
  }

  /// <summary>Field number for the "remoteId" field.</summary>
  public const int RemoteIdFieldNumber = 1;
  private string remoteId_ = "";
  /// <summary>
  /// Id của remote
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteId {
    get { return remoteId_; }
    set {
      remoteId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteLibraryCmdId" field.</summary>
  public const int RemoteLibraryCmdIdFieldNumber = 2;
  private string remoteLibraryCmdId_ = "";
  /// <summary>
  /// Id của lệnh từ thư viện
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteLibraryCmdId {
    get { return remoteLibraryCmdId_; }
    set {
      remoteLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "remoteMutilLibraryCmdId" field.</summary>
  public const int RemoteMutilLibraryCmdIdFieldNumber = 3;
  private string remoteMutilLibraryCmdId_ = "";
  /// <summary>
  /// Id của lệnh từ remote đa năng
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string RemoteMutilLibraryCmdId {
    get { return remoteMutilLibraryCmdId_; }
    set {
      remoteMutilLibraryCmdId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "commands" field.</summary>
  public const int CommandsFieldNumber = 4;
  private static readonly pb::FieldCodec<uint> _repeated_commands_codec
      = pb::FieldCodec.ForUInt32(34);
  private readonly pbc::RepeatedField<uint> commands_ = new pbc::RepeatedField<uint>();
  /// <summary>
  /// Lệnh học được
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<uint> Commands {
    get { return commands_; }
  }

  /// <summary>Field number for the "type" field.</summary>
  public const int TypeFieldNumber = 5;
  private global::TypeLearn type_ = global::TypeLearn.Ir;
  /// <summary>
  /// IR or RF
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::TypeLearn Type {
    get { return type_; }
    set {
      type_ = value;
    }
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 6;
  private string deviceId_ = "";
  /// <summary>
  /// deviceId của thiết bị
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LearnCommandRemoteClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LearnCommandRemoteClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (RemoteId != other.RemoteId) return false;
    if (RemoteLibraryCmdId != other.RemoteLibraryCmdId) return false;
    if (RemoteMutilLibraryCmdId != other.RemoteMutilLibraryCmdId) return false;
    if(!commands_.Equals(other.commands_)) return false;
    if (Type != other.Type) return false;
    if (DeviceId != other.DeviceId) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (RemoteId.Length != 0) hash ^= RemoteId.GetHashCode();
    if (RemoteLibraryCmdId.Length != 0) hash ^= RemoteLibraryCmdId.GetHashCode();
    if (RemoteMutilLibraryCmdId.Length != 0) hash ^= RemoteMutilLibraryCmdId.GetHashCode();
    hash ^= commands_.GetHashCode();
    if (Type != global::TypeLearn.Ir) hash ^= Type.GetHashCode();
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (RemoteId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(RemoteId);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      output.WriteRawTag(18);
      output.WriteString(RemoteLibraryCmdId);
    }
    if (RemoteMutilLibraryCmdId.Length != 0) {
      output.WriteRawTag(26);
      output.WriteString(RemoteMutilLibraryCmdId);
    }
    commands_.WriteTo(output, _repeated_commands_codec);
    if (Type != global::TypeLearn.Ir) {
      output.WriteRawTag(40);
      output.WriteEnum((int) Type);
    }
    if (DeviceId.Length != 0) {
      output.WriteRawTag(50);
      output.WriteString(DeviceId);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (RemoteId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteId);
    }
    if (RemoteLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteLibraryCmdId);
    }
    if (RemoteMutilLibraryCmdId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(RemoteMutilLibraryCmdId);
    }
    size += commands_.CalculateSize(_repeated_commands_codec);
    if (Type != global::TypeLearn.Ir) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
    }
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LearnCommandRemoteClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.RemoteId.Length != 0) {
      RemoteId = other.RemoteId;
    }
    if (other.RemoteLibraryCmdId.Length != 0) {
      RemoteLibraryCmdId = other.RemoteLibraryCmdId;
    }
    if (other.RemoteMutilLibraryCmdId.Length != 0) {
      RemoteMutilLibraryCmdId = other.RemoteMutilLibraryCmdId;
    }
    commands_.Add(other.commands_);
    if (other.Type != global::TypeLearn.Ir) {
      Type = other.Type;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          RemoteId = input.ReadString();
          break;
        }
        case 18: {
          RemoteLibraryCmdId = input.ReadString();
          break;
        }
        case 26: {
          RemoteMutilLibraryCmdId = input.ReadString();
          break;
        }
        case 34:
        case 32: {
          commands_.AddEntriesFrom(input, _repeated_commands_codec);
          break;
        }
        case 40: {
          Type = (global::TypeLearn) input.ReadEnum();
          break;
        }
        case 50: {
          DeviceId = input.ReadString();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Điều khiển từng đèn
/// </summary>
public sealed partial class LedDriverClientRequest : pb::IMessage<LedDriverClientRequest> {
  private static readonly pb::MessageParser<LedDriverClientRequest> _parser = new pb::MessageParser<LedDriverClientRequest>(() => new LedDriverClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LedDriverClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[72]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientRequest(LedDriverClientRequest other) : this() {
    hardwareId_ = other.hardwareId_;
    ledIndex_ = other.ledIndex_;
    brightnessPercent_ = other.brightnessPercent_;
    powerState_ = other.powerState_;
    groupControl_ = other.groupControl_;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientRequest Clone() {
    return new LedDriverClientRequest(this);
  }

  /// <summary>Field number for the "hardwareId" field.</summary>
  public const int HardwareIdFieldNumber = 1;
  private string hardwareId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string HardwareId {
    get { return hardwareId_; }
    set {
      hardwareId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ledIndex" field.</summary>
  public const int LedIndexFieldNumber = 2;
  private uint ledIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint LedIndex {
    get { return ledIndex_; }
    set {
      ledIndex_ = value;
    }
  }

  /// <summary>Field number for the "brightnessPercent" field.</summary>
  public const int BrightnessPercentFieldNumber = 3;
  private int brightnessPercent_;
  /// <summary>
  /// -1 khi không yêu cầu điều khiển
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BrightnessPercent {
    get { return brightnessPercent_; }
    set {
      brightnessPercent_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 4;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "groupControl" field.</summary>
  public const int GroupControlFieldNumber = 5;
  private uint groupControl_;
  /// <summary>
  /// in binary
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupControl {
    get { return groupControl_; }
    set {
      groupControl_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LedDriverClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LedDriverClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (HardwareId != other.HardwareId) return false;
    if (LedIndex != other.LedIndex) return false;
    if (BrightnessPercent != other.BrightnessPercent) return false;
    if (PowerState != other.PowerState) return false;
    if (GroupControl != other.GroupControl) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (HardwareId.Length != 0) hash ^= HardwareId.GetHashCode();
    if (LedIndex != 0) hash ^= LedIndex.GetHashCode();
    if (BrightnessPercent != 0) hash ^= BrightnessPercent.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (GroupControl != 0) hash ^= GroupControl.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (HardwareId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(HardwareId);
    }
    if (LedIndex != 0) {
      output.WriteRawTag(16);
      output.WriteUInt32(LedIndex);
    }
    if (BrightnessPercent != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BrightnessPercent);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PowerState);
    }
    if (GroupControl != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(GroupControl);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (HardwareId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(HardwareId);
    }
    if (LedIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(LedIndex);
    }
    if (BrightnessPercent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrightnessPercent);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (GroupControl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupControl);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LedDriverClientRequest other) {
    if (other == null) {
      return;
    }
    if (other.HardwareId.Length != 0) {
      HardwareId = other.HardwareId;
    }
    if (other.LedIndex != 0) {
      LedIndex = other.LedIndex;
    }
    if (other.BrightnessPercent != 0) {
      BrightnessPercent = other.BrightnessPercent;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.GroupControl != 0) {
      GroupControl = other.GroupControl;
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          HardwareId = input.ReadString();
          break;
        }
        case 16: {
          LedIndex = input.ReadUInt32();
          break;
        }
        case 24: {
          BrightnessPercent = input.ReadInt32();
          break;
        }
        case 32: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 40: {
          GroupControl = input.ReadUInt32();
          break;
        }
      }
    }
  }

}

/// <summary>
/// Phản hồi điều khiển từng đèn
/// </summary>
public sealed partial class LedDriverClientResponse : pb::IMessage<LedDriverClientResponse> {
  private static readonly pb::MessageParser<LedDriverClientResponse> _parser = new pb::MessageParser<LedDriverClientResponse>(() => new LedDriverClientResponse());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LedDriverClientResponse> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[73]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientResponse() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientResponse(LedDriverClientResponse other) : this() {
    deviceId_ = other.deviceId_;
    ledIndex_ = other.ledIndex_;
    brightnessPercent_ = other.brightnessPercent_;
    powerState_ = other.powerState_;
    groupControl_ = other.groupControl_;
    statusCode_ = other.statusCode_ != null ? other.statusCode_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientResponse Clone() {
    return new LedDriverClientResponse(this);
  }

  /// <summary>Field number for the "deviceId" field.</summary>
  public const int DeviceIdFieldNumber = 1;
  private string deviceId_ = "";
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public string DeviceId {
    get { return deviceId_; }
    set {
      deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
    }
  }

  /// <summary>Field number for the "ledIndex" field.</summary>
  public const int LedIndexFieldNumber = 2;
  private int ledIndex_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int LedIndex {
    get { return ledIndex_; }
    set {
      ledIndex_ = value;
    }
  }

  /// <summary>Field number for the "brightnessPercent" field.</summary>
  public const int BrightnessPercentFieldNumber = 3;
  private int brightnessPercent_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int BrightnessPercent {
    get { return brightnessPercent_; }
    set {
      brightnessPercent_ = value;
    }
  }

  /// <summary>Field number for the "powerState" field.</summary>
  public const int PowerStateFieldNumber = 4;
  private global::PowerState powerState_ = global::PowerState.Off;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::PowerState PowerState {
    get { return powerState_; }
    set {
      powerState_ = value;
    }
  }

  /// <summary>Field number for the "groupControl" field.</summary>
  public const int GroupControlFieldNumber = 5;
  private uint groupControl_;
  /// <summary>
  /// in binary
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public uint GroupControl {
    get { return groupControl_; }
    set {
      groupControl_ = value;
    }
  }

  /// <summary>Field number for the "statusCode" field.</summary>
  public const int StatusCodeFieldNumber = 1000;
  private global::StatusCode statusCode_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::StatusCode StatusCode {
    get { return statusCode_; }
    set {
      statusCode_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LedDriverClientResponse);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LedDriverClientResponse other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (DeviceId != other.DeviceId) return false;
    if (LedIndex != other.LedIndex) return false;
    if (BrightnessPercent != other.BrightnessPercent) return false;
    if (PowerState != other.PowerState) return false;
    if (GroupControl != other.GroupControl) return false;
    if (!object.Equals(StatusCode, other.StatusCode)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (DeviceId.Length != 0) hash ^= DeviceId.GetHashCode();
    if (LedIndex != 0) hash ^= LedIndex.GetHashCode();
    if (BrightnessPercent != 0) hash ^= BrightnessPercent.GetHashCode();
    if (PowerState != global::PowerState.Off) hash ^= PowerState.GetHashCode();
    if (GroupControl != 0) hash ^= GroupControl.GetHashCode();
    if (statusCode_ != null) hash ^= StatusCode.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (DeviceId.Length != 0) {
      output.WriteRawTag(10);
      output.WriteString(DeviceId);
    }
    if (LedIndex != 0) {
      output.WriteRawTag(16);
      output.WriteInt32(LedIndex);
    }
    if (BrightnessPercent != 0) {
      output.WriteRawTag(24);
      output.WriteInt32(BrightnessPercent);
    }
    if (PowerState != global::PowerState.Off) {
      output.WriteRawTag(32);
      output.WriteEnum((int) PowerState);
    }
    if (GroupControl != 0) {
      output.WriteRawTag(40);
      output.WriteUInt32(GroupControl);
    }
    if (statusCode_ != null) {
      output.WriteRawTag(194, 62);
      output.WriteMessage(StatusCode);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (DeviceId.Length != 0) {
      size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
    }
    if (LedIndex != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(LedIndex);
    }
    if (BrightnessPercent != 0) {
      size += 1 + pb::CodedOutputStream.ComputeInt32Size(BrightnessPercent);
    }
    if (PowerState != global::PowerState.Off) {
      size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) PowerState);
    }
    if (GroupControl != 0) {
      size += 1 + pb::CodedOutputStream.ComputeUInt32Size(GroupControl);
    }
    if (statusCode_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(StatusCode);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LedDriverClientResponse other) {
    if (other == null) {
      return;
    }
    if (other.DeviceId.Length != 0) {
      DeviceId = other.DeviceId;
    }
    if (other.LedIndex != 0) {
      LedIndex = other.LedIndex;
    }
    if (other.BrightnessPercent != 0) {
      BrightnessPercent = other.BrightnessPercent;
    }
    if (other.PowerState != global::PowerState.Off) {
      PowerState = other.PowerState;
    }
    if (other.GroupControl != 0) {
      GroupControl = other.GroupControl;
    }
    if (other.statusCode_ != null) {
      if (statusCode_ == null) {
        StatusCode = new global::StatusCode();
      }
      StatusCode.MergeFrom(other.StatusCode);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          DeviceId = input.ReadString();
          break;
        }
        case 16: {
          LedIndex = input.ReadInt32();
          break;
        }
        case 24: {
          BrightnessPercent = input.ReadInt32();
          break;
        }
        case 32: {
          PowerState = (global::PowerState) input.ReadEnum();
          break;
        }
        case 40: {
          GroupControl = input.ReadUInt32();
          break;
        }
        case 8002: {
          if (statusCode_ == null) {
            StatusCode = new global::StatusCode();
          }
          input.ReadMessage(StatusCode);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị kết nối wifi Devices 
/// </summary>
public sealed partial class DeviceClientMessage : pb::IMessage<DeviceClientMessage> {
  private static readonly pb::MessageParser<DeviceClientMessage> _parser = new pb::MessageParser<DeviceClientMessage>(() => new DeviceClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<DeviceClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[74]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceClientMessage(DeviceClientMessage other) : this() {
    forceUpdateFirmwareDeviceClientRequest_ = other.forceUpdateFirmwareDeviceClientRequest_ != null ? other.forceUpdateFirmwareDeviceClientRequest_.Clone() : null;
    forceUpdateFirmwareDeviceClientResponse_ = other.forceUpdateFirmwareDeviceClientResponse_ != null ? other.forceUpdateFirmwareDeviceClientResponse_.Clone() : null;
    updateDeviceClientRequest_ = other.updateDeviceClientRequest_ != null ? other.updateDeviceClientRequest_.Clone() : null;
    updateDeviceClientResponse_ = other.updateDeviceClientResponse_ != null ? other.updateDeviceClientResponse_.Clone() : null;
    updateWSEndpointClientRequest_ = other.updateWSEndpointClientRequest_ != null ? other.updateWSEndpointClientRequest_.Clone() : null;
    updateWSEndpointClientResponse_ = other.updateWSEndpointClientResponse_ != null ? other.updateWSEndpointClientResponse_.Clone() : null;
    deleteDeviceClientRequest_ = other.deleteDeviceClientRequest_ != null ? other.deleteDeviceClientRequest_.Clone() : null;
    deleteDeviceClientResponse_ = other.deleteDeviceClientResponse_ != null ? other.deleteDeviceClientResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public DeviceClientMessage Clone() {
    return new DeviceClientMessage(this);
  }

  /// <summary>Field number for the "forceUpdateFirmwareDeviceClientRequest" field.</summary>
  public const int ForceUpdateFirmwareDeviceClientRequestFieldNumber = 1;
  private global::ForceUpdateFirmwareDeviceClientRequest forceUpdateFirmwareDeviceClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ForceUpdateFirmwareDeviceClientRequest ForceUpdateFirmwareDeviceClientRequest {
    get { return forceUpdateFirmwareDeviceClientRequest_; }
    set {
      forceUpdateFirmwareDeviceClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "forceUpdateFirmwareDeviceClientResponse" field.</summary>
  public const int ForceUpdateFirmwareDeviceClientResponseFieldNumber = 2;
  private global::ForceUpdateFirmwareDeviceClientResponse forceUpdateFirmwareDeviceClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ForceUpdateFirmwareDeviceClientResponse ForceUpdateFirmwareDeviceClientResponse {
    get { return forceUpdateFirmwareDeviceClientResponse_; }
    set {
      forceUpdateFirmwareDeviceClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "updateDeviceClientRequest" field.</summary>
  public const int UpdateDeviceClientRequestFieldNumber = 3;
  private global::UpdateDeviceClientRequest updateDeviceClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateDeviceClientRequest UpdateDeviceClientRequest {
    get { return updateDeviceClientRequest_; }
    set {
      updateDeviceClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "updateDeviceClientResponse" field.</summary>
  public const int UpdateDeviceClientResponseFieldNumber = 4;
  private global::UpdateDeviceClientResponse updateDeviceClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateDeviceClientResponse UpdateDeviceClientResponse {
    get { return updateDeviceClientResponse_; }
    set {
      updateDeviceClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "updateWSEndpointClientRequest" field.</summary>
  public const int UpdateWSEndpointClientRequestFieldNumber = 5;
  private global::UpdateWSEndpointClientRequest updateWSEndpointClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateWSEndpointClientRequest UpdateWSEndpointClientRequest {
    get { return updateWSEndpointClientRequest_; }
    set {
      updateWSEndpointClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "updateWSEndpointClientResponse" field.</summary>
  public const int UpdateWSEndpointClientResponseFieldNumber = 6;
  private global::UpdateWSEndpointClientResponse updateWSEndpointClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateWSEndpointClientResponse UpdateWSEndpointClientResponse {
    get { return updateWSEndpointClientResponse_; }
    set {
      updateWSEndpointClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "deleteDeviceClientRequest" field.</summary>
  public const int DeleteDeviceClientRequestFieldNumber = 7;
  private global::DeleteDeviceClientRequest deleteDeviceClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeleteDeviceClientRequest DeleteDeviceClientRequest {
    get { return deleteDeviceClientRequest_; }
    set {
      deleteDeviceClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "deleteDeviceClientResponse" field.</summary>
  public const int DeleteDeviceClientResponseFieldNumber = 8;
  private global::DeleteDeviceClientResponse deleteDeviceClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeleteDeviceClientResponse DeleteDeviceClientResponse {
    get { return deleteDeviceClientResponse_; }
    set {
      deleteDeviceClientResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as DeviceClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(DeviceClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(ForceUpdateFirmwareDeviceClientRequest, other.ForceUpdateFirmwareDeviceClientRequest)) return false;
    if (!object.Equals(ForceUpdateFirmwareDeviceClientResponse, other.ForceUpdateFirmwareDeviceClientResponse)) return false;
    if (!object.Equals(UpdateDeviceClientRequest, other.UpdateDeviceClientRequest)) return false;
    if (!object.Equals(UpdateDeviceClientResponse, other.UpdateDeviceClientResponse)) return false;
    if (!object.Equals(UpdateWSEndpointClientRequest, other.UpdateWSEndpointClientRequest)) return false;
    if (!object.Equals(UpdateWSEndpointClientResponse, other.UpdateWSEndpointClientResponse)) return false;
    if (!object.Equals(DeleteDeviceClientRequest, other.DeleteDeviceClientRequest)) return false;
    if (!object.Equals(DeleteDeviceClientResponse, other.DeleteDeviceClientResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (forceUpdateFirmwareDeviceClientRequest_ != null) hash ^= ForceUpdateFirmwareDeviceClientRequest.GetHashCode();
    if (forceUpdateFirmwareDeviceClientResponse_ != null) hash ^= ForceUpdateFirmwareDeviceClientResponse.GetHashCode();
    if (updateDeviceClientRequest_ != null) hash ^= UpdateDeviceClientRequest.GetHashCode();
    if (updateDeviceClientResponse_ != null) hash ^= UpdateDeviceClientResponse.GetHashCode();
    if (updateWSEndpointClientRequest_ != null) hash ^= UpdateWSEndpointClientRequest.GetHashCode();
    if (updateWSEndpointClientResponse_ != null) hash ^= UpdateWSEndpointClientResponse.GetHashCode();
    if (deleteDeviceClientRequest_ != null) hash ^= DeleteDeviceClientRequest.GetHashCode();
    if (deleteDeviceClientResponse_ != null) hash ^= DeleteDeviceClientResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (forceUpdateFirmwareDeviceClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(ForceUpdateFirmwareDeviceClientRequest);
    }
    if (forceUpdateFirmwareDeviceClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(ForceUpdateFirmwareDeviceClientResponse);
    }
    if (updateDeviceClientRequest_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(UpdateDeviceClientRequest);
    }
    if (updateDeviceClientResponse_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(UpdateDeviceClientResponse);
    }
    if (updateWSEndpointClientRequest_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(UpdateWSEndpointClientRequest);
    }
    if (updateWSEndpointClientResponse_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(UpdateWSEndpointClientResponse);
    }
    if (deleteDeviceClientRequest_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(DeleteDeviceClientRequest);
    }
    if (deleteDeviceClientResponse_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(DeleteDeviceClientResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (forceUpdateFirmwareDeviceClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForceUpdateFirmwareDeviceClientRequest);
    }
    if (forceUpdateFirmwareDeviceClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ForceUpdateFirmwareDeviceClientResponse);
    }
    if (updateDeviceClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateDeviceClientRequest);
    }
    if (updateDeviceClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateDeviceClientResponse);
    }
    if (updateWSEndpointClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateWSEndpointClientRequest);
    }
    if (updateWSEndpointClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateWSEndpointClientResponse);
    }
    if (deleteDeviceClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteDeviceClientRequest);
    }
    if (deleteDeviceClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteDeviceClientResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(DeviceClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.forceUpdateFirmwareDeviceClientRequest_ != null) {
      if (forceUpdateFirmwareDeviceClientRequest_ == null) {
        ForceUpdateFirmwareDeviceClientRequest = new global::ForceUpdateFirmwareDeviceClientRequest();
      }
      ForceUpdateFirmwareDeviceClientRequest.MergeFrom(other.ForceUpdateFirmwareDeviceClientRequest);
    }
    if (other.forceUpdateFirmwareDeviceClientResponse_ != null) {
      if (forceUpdateFirmwareDeviceClientResponse_ == null) {
        ForceUpdateFirmwareDeviceClientResponse = new global::ForceUpdateFirmwareDeviceClientResponse();
      }
      ForceUpdateFirmwareDeviceClientResponse.MergeFrom(other.ForceUpdateFirmwareDeviceClientResponse);
    }
    if (other.updateDeviceClientRequest_ != null) {
      if (updateDeviceClientRequest_ == null) {
        UpdateDeviceClientRequest = new global::UpdateDeviceClientRequest();
      }
      UpdateDeviceClientRequest.MergeFrom(other.UpdateDeviceClientRequest);
    }
    if (other.updateDeviceClientResponse_ != null) {
      if (updateDeviceClientResponse_ == null) {
        UpdateDeviceClientResponse = new global::UpdateDeviceClientResponse();
      }
      UpdateDeviceClientResponse.MergeFrom(other.UpdateDeviceClientResponse);
    }
    if (other.updateWSEndpointClientRequest_ != null) {
      if (updateWSEndpointClientRequest_ == null) {
        UpdateWSEndpointClientRequest = new global::UpdateWSEndpointClientRequest();
      }
      UpdateWSEndpointClientRequest.MergeFrom(other.UpdateWSEndpointClientRequest);
    }
    if (other.updateWSEndpointClientResponse_ != null) {
      if (updateWSEndpointClientResponse_ == null) {
        UpdateWSEndpointClientResponse = new global::UpdateWSEndpointClientResponse();
      }
      UpdateWSEndpointClientResponse.MergeFrom(other.UpdateWSEndpointClientResponse);
    }
    if (other.deleteDeviceClientRequest_ != null) {
      if (deleteDeviceClientRequest_ == null) {
        DeleteDeviceClientRequest = new global::DeleteDeviceClientRequest();
      }
      DeleteDeviceClientRequest.MergeFrom(other.DeleteDeviceClientRequest);
    }
    if (other.deleteDeviceClientResponse_ != null) {
      if (deleteDeviceClientResponse_ == null) {
        DeleteDeviceClientResponse = new global::DeleteDeviceClientResponse();
      }
      DeleteDeviceClientResponse.MergeFrom(other.DeleteDeviceClientResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (forceUpdateFirmwareDeviceClientRequest_ == null) {
            ForceUpdateFirmwareDeviceClientRequest = new global::ForceUpdateFirmwareDeviceClientRequest();
          }
          input.ReadMessage(ForceUpdateFirmwareDeviceClientRequest);
          break;
        }
        case 18: {
          if (forceUpdateFirmwareDeviceClientResponse_ == null) {
            ForceUpdateFirmwareDeviceClientResponse = new global::ForceUpdateFirmwareDeviceClientResponse();
          }
          input.ReadMessage(ForceUpdateFirmwareDeviceClientResponse);
          break;
        }
        case 26: {
          if (updateDeviceClientRequest_ == null) {
            UpdateDeviceClientRequest = new global::UpdateDeviceClientRequest();
          }
          input.ReadMessage(UpdateDeviceClientRequest);
          break;
        }
        case 34: {
          if (updateDeviceClientResponse_ == null) {
            UpdateDeviceClientResponse = new global::UpdateDeviceClientResponse();
          }
          input.ReadMessage(UpdateDeviceClientResponse);
          break;
        }
        case 42: {
          if (updateWSEndpointClientRequest_ == null) {
            UpdateWSEndpointClientRequest = new global::UpdateWSEndpointClientRequest();
          }
          input.ReadMessage(UpdateWSEndpointClientRequest);
          break;
        }
        case 50: {
          if (updateWSEndpointClientResponse_ == null) {
            UpdateWSEndpointClientResponse = new global::UpdateWSEndpointClientResponse();
          }
          input.ReadMessage(UpdateWSEndpointClientResponse);
          break;
        }
        case 58: {
          if (deleteDeviceClientRequest_ == null) {
            DeleteDeviceClientRequest = new global::DeleteDeviceClientRequest();
          }
          input.ReadMessage(DeleteDeviceClientRequest);
          break;
        }
        case 66: {
          if (deleteDeviceClientResponse_ == null) {
            DeleteDeviceClientResponse = new global::DeleteDeviceClientResponse();
          }
          input.ReadMessage(DeleteDeviceClientResponse);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị Công tắc 
/// </summary>
public sealed partial class SwitcherClientMessage : pb::IMessage<SwitcherClientMessage> {
  private static readonly pb::MessageParser<SwitcherClientMessage> _parser = new pb::MessageParser<SwitcherClientMessage>(() => new SwitcherClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SwitcherClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[75]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientMessage(SwitcherClientMessage other) : this() {
    getSwitchersClientRequest_ = other.getSwitchersClientRequest_ != null ? other.getSwitchersClientRequest_.Clone() : null;
    getSwitchersClientResponse_ = other.getSwitchersClientResponse_ != null ? other.getSwitchersClientResponse_.Clone() : null;
    getSwitcherClientRequest_ = other.getSwitcherClientRequest_ != null ? other.getSwitcherClientRequest_.Clone() : null;
    getSwitcherClientResponse_ = other.getSwitcherClientResponse_ != null ? other.getSwitcherClientResponse_.Clone() : null;
    getLogSwitcherClientRequest_ = other.getLogSwitcherClientRequest_ != null ? other.getLogSwitcherClientRequest_.Clone() : null;
    getLogSwitcherClientResponse_ = other.getLogSwitcherClientResponse_ != null ? other.getLogSwitcherClientResponse_.Clone() : null;
    switcherClientRequest_ = other.switcherClientRequest_ != null ? other.switcherClientRequest_.Clone() : null;
    switcherClientResponse_ = other.switcherClientResponse_ != null ? other.switcherClientResponse_.Clone() : null;
    addSwitcherScheduleClientRequest_ = other.addSwitcherScheduleClientRequest_ != null ? other.addSwitcherScheduleClientRequest_.Clone() : null;
    addSwitcherScheduleClientResponse_ = other.addSwitcherScheduleClientResponse_ != null ? other.addSwitcherScheduleClientResponse_.Clone() : null;
    updateSwitcherScheduleClientRequest_ = other.updateSwitcherScheduleClientRequest_ != null ? other.updateSwitcherScheduleClientRequest_.Clone() : null;
    updateSwitcherScheduleClientResponse_ = other.updateSwitcherScheduleClientResponse_ != null ? other.updateSwitcherScheduleClientResponse_.Clone() : null;
    deleteSwitcherScheduleClientRequest_ = other.deleteSwitcherScheduleClientRequest_ != null ? other.deleteSwitcherScheduleClientRequest_.Clone() : null;
    deleteSwitcherScheduleClientResponse_ = other.deleteSwitcherScheduleClientResponse_ != null ? other.deleteSwitcherScheduleClientResponse_.Clone() : null;
    updateSwitcherClientRequest_ = other.updateSwitcherClientRequest_ != null ? other.updateSwitcherClientRequest_.Clone() : null;
    updateSwitcherClientResponse_ = other.updateSwitcherClientResponse_ != null ? other.updateSwitcherClientResponse_.Clone() : null;
    updateSwitcherState_ = other.updateSwitcherState_ != null ? other.updateSwitcherState_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SwitcherClientMessage Clone() {
    return new SwitcherClientMessage(this);
  }

  /// <summary>Field number for the "getSwitchersClientRequest" field.</summary>
  public const int GetSwitchersClientRequestFieldNumber = 1;
  private global::GetSwitchersClientRequest getSwitchersClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetSwitchersClientRequest GetSwitchersClientRequest {
    get { return getSwitchersClientRequest_; }
    set {
      getSwitchersClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "getSwitchersClientResponse" field.</summary>
  public const int GetSwitchersClientResponseFieldNumber = 2;
  private global::GetSwitchersClientResponse getSwitchersClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetSwitchersClientResponse GetSwitchersClientResponse {
    get { return getSwitchersClientResponse_; }
    set {
      getSwitchersClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "getSwitcherClientRequest" field.</summary>
  public const int GetSwitcherClientRequestFieldNumber = 3;
  private global::GetSwitcherClientRequest getSwitcherClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetSwitcherClientRequest GetSwitcherClientRequest {
    get { return getSwitcherClientRequest_; }
    set {
      getSwitcherClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "getSwitcherClientResponse" field.</summary>
  public const int GetSwitcherClientResponseFieldNumber = 4;
  private global::GetSwitcherClientResponse getSwitcherClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetSwitcherClientResponse GetSwitcherClientResponse {
    get { return getSwitcherClientResponse_; }
    set {
      getSwitcherClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "getLogSwitcherClientRequest" field.</summary>
  public const int GetLogSwitcherClientRequestFieldNumber = 5;
  private global::GetLogSwitcherClientRequest getLogSwitcherClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetLogSwitcherClientRequest GetLogSwitcherClientRequest {
    get { return getLogSwitcherClientRequest_; }
    set {
      getLogSwitcherClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "getLogSwitcherClientResponse" field.</summary>
  public const int GetLogSwitcherClientResponseFieldNumber = 6;
  private global::GetLogSwitcherClientResponse getLogSwitcherClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetLogSwitcherClientResponse GetLogSwitcherClientResponse {
    get { return getLogSwitcherClientResponse_; }
    set {
      getLogSwitcherClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "switcherClientRequest" field.</summary>
  public const int SwitcherClientRequestFieldNumber = 7;
  private global::SwitcherClientRequest switcherClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwitcherClientRequest SwitcherClientRequest {
    get { return switcherClientRequest_; }
    set {
      switcherClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "switcherClientResponse" field.</summary>
  public const int SwitcherClientResponseFieldNumber = 8;
  private global::SwitcherClientResponse switcherClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwitcherClientResponse SwitcherClientResponse {
    get { return switcherClientResponse_; }
    set {
      switcherClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "addSwitcherScheduleClientRequest" field.</summary>
  public const int AddSwitcherScheduleClientRequestFieldNumber = 9;
  private global::AddSwitcherScheduleClientRequest addSwitcherScheduleClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AddSwitcherScheduleClientRequest AddSwitcherScheduleClientRequest {
    get { return addSwitcherScheduleClientRequest_; }
    set {
      addSwitcherScheduleClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "addSwitcherScheduleClientResponse" field.</summary>
  public const int AddSwitcherScheduleClientResponseFieldNumber = 10;
  private global::AddSwitcherScheduleClientResponse addSwitcherScheduleClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AddSwitcherScheduleClientResponse AddSwitcherScheduleClientResponse {
    get { return addSwitcherScheduleClientResponse_; }
    set {
      addSwitcherScheduleClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "updateSwitcherScheduleClientRequest" field.</summary>
  public const int UpdateSwitcherScheduleClientRequestFieldNumber = 11;
  private global::UpdateSwitcherScheduleClientRequest updateSwitcherScheduleClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateSwitcherScheduleClientRequest UpdateSwitcherScheduleClientRequest {
    get { return updateSwitcherScheduleClientRequest_; }
    set {
      updateSwitcherScheduleClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "updateSwitcherScheduleClientResponse" field.</summary>
  public const int UpdateSwitcherScheduleClientResponseFieldNumber = 12;
  private global::UpdateSwitcherScheduleClientResponse updateSwitcherScheduleClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateSwitcherScheduleClientResponse UpdateSwitcherScheduleClientResponse {
    get { return updateSwitcherScheduleClientResponse_; }
    set {
      updateSwitcherScheduleClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "deleteSwitcherScheduleClientRequest" field.</summary>
  public const int DeleteSwitcherScheduleClientRequestFieldNumber = 13;
  private global::DeleteSwitcherScheduleClientRequest deleteSwitcherScheduleClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeleteSwitcherScheduleClientRequest DeleteSwitcherScheduleClientRequest {
    get { return deleteSwitcherScheduleClientRequest_; }
    set {
      deleteSwitcherScheduleClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "deleteSwitcherScheduleClientResponse" field.</summary>
  public const int DeleteSwitcherScheduleClientResponseFieldNumber = 14;
  private global::DeleteSwitcherScheduleClientResponse deleteSwitcherScheduleClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeleteSwitcherScheduleClientResponse DeleteSwitcherScheduleClientResponse {
    get { return deleteSwitcherScheduleClientResponse_; }
    set {
      deleteSwitcherScheduleClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "updateSwitcherClientRequest" field.</summary>
  public const int UpdateSwitcherClientRequestFieldNumber = 15;
  private global::UpdateSwitcherClientRequest updateSwitcherClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateSwitcherClientRequest UpdateSwitcherClientRequest {
    get { return updateSwitcherClientRequest_; }
    set {
      updateSwitcherClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "updateSwitcherClientResponse" field.</summary>
  public const int UpdateSwitcherClientResponseFieldNumber = 16;
  private global::UpdateSwitcherClientResponse updateSwitcherClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateSwitcherClientResponse UpdateSwitcherClientResponse {
    get { return updateSwitcherClientResponse_; }
    set {
      updateSwitcherClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "updateSwitcherState" field.</summary>
  public const int UpdateSwitcherStateFieldNumber = 17;
  private global::UpdateSwitcherState updateSwitcherState_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateSwitcherState UpdateSwitcherState {
    get { return updateSwitcherState_; }
    set {
      updateSwitcherState_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SwitcherClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SwitcherClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(GetSwitchersClientRequest, other.GetSwitchersClientRequest)) return false;
    if (!object.Equals(GetSwitchersClientResponse, other.GetSwitchersClientResponse)) return false;
    if (!object.Equals(GetSwitcherClientRequest, other.GetSwitcherClientRequest)) return false;
    if (!object.Equals(GetSwitcherClientResponse, other.GetSwitcherClientResponse)) return false;
    if (!object.Equals(GetLogSwitcherClientRequest, other.GetLogSwitcherClientRequest)) return false;
    if (!object.Equals(GetLogSwitcherClientResponse, other.GetLogSwitcherClientResponse)) return false;
    if (!object.Equals(SwitcherClientRequest, other.SwitcherClientRequest)) return false;
    if (!object.Equals(SwitcherClientResponse, other.SwitcherClientResponse)) return false;
    if (!object.Equals(AddSwitcherScheduleClientRequest, other.AddSwitcherScheduleClientRequest)) return false;
    if (!object.Equals(AddSwitcherScheduleClientResponse, other.AddSwitcherScheduleClientResponse)) return false;
    if (!object.Equals(UpdateSwitcherScheduleClientRequest, other.UpdateSwitcherScheduleClientRequest)) return false;
    if (!object.Equals(UpdateSwitcherScheduleClientResponse, other.UpdateSwitcherScheduleClientResponse)) return false;
    if (!object.Equals(DeleteSwitcherScheduleClientRequest, other.DeleteSwitcherScheduleClientRequest)) return false;
    if (!object.Equals(DeleteSwitcherScheduleClientResponse, other.DeleteSwitcherScheduleClientResponse)) return false;
    if (!object.Equals(UpdateSwitcherClientRequest, other.UpdateSwitcherClientRequest)) return false;
    if (!object.Equals(UpdateSwitcherClientResponse, other.UpdateSwitcherClientResponse)) return false;
    if (!object.Equals(UpdateSwitcherState, other.UpdateSwitcherState)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (getSwitchersClientRequest_ != null) hash ^= GetSwitchersClientRequest.GetHashCode();
    if (getSwitchersClientResponse_ != null) hash ^= GetSwitchersClientResponse.GetHashCode();
    if (getSwitcherClientRequest_ != null) hash ^= GetSwitcherClientRequest.GetHashCode();
    if (getSwitcherClientResponse_ != null) hash ^= GetSwitcherClientResponse.GetHashCode();
    if (getLogSwitcherClientRequest_ != null) hash ^= GetLogSwitcherClientRequest.GetHashCode();
    if (getLogSwitcherClientResponse_ != null) hash ^= GetLogSwitcherClientResponse.GetHashCode();
    if (switcherClientRequest_ != null) hash ^= SwitcherClientRequest.GetHashCode();
    if (switcherClientResponse_ != null) hash ^= SwitcherClientResponse.GetHashCode();
    if (addSwitcherScheduleClientRequest_ != null) hash ^= AddSwitcherScheduleClientRequest.GetHashCode();
    if (addSwitcherScheduleClientResponse_ != null) hash ^= AddSwitcherScheduleClientResponse.GetHashCode();
    if (updateSwitcherScheduleClientRequest_ != null) hash ^= UpdateSwitcherScheduleClientRequest.GetHashCode();
    if (updateSwitcherScheduleClientResponse_ != null) hash ^= UpdateSwitcherScheduleClientResponse.GetHashCode();
    if (deleteSwitcherScheduleClientRequest_ != null) hash ^= DeleteSwitcherScheduleClientRequest.GetHashCode();
    if (deleteSwitcherScheduleClientResponse_ != null) hash ^= DeleteSwitcherScheduleClientResponse.GetHashCode();
    if (updateSwitcherClientRequest_ != null) hash ^= UpdateSwitcherClientRequest.GetHashCode();
    if (updateSwitcherClientResponse_ != null) hash ^= UpdateSwitcherClientResponse.GetHashCode();
    if (updateSwitcherState_ != null) hash ^= UpdateSwitcherState.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (getSwitchersClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(GetSwitchersClientRequest);
    }
    if (getSwitchersClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(GetSwitchersClientResponse);
    }
    if (getSwitcherClientRequest_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(GetSwitcherClientRequest);
    }
    if (getSwitcherClientResponse_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(GetSwitcherClientResponse);
    }
    if (getLogSwitcherClientRequest_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(GetLogSwitcherClientRequest);
    }
    if (getLogSwitcherClientResponse_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(GetLogSwitcherClientResponse);
    }
    if (switcherClientRequest_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(SwitcherClientRequest);
    }
    if (switcherClientResponse_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(SwitcherClientResponse);
    }
    if (addSwitcherScheduleClientRequest_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(AddSwitcherScheduleClientRequest);
    }
    if (addSwitcherScheduleClientResponse_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(AddSwitcherScheduleClientResponse);
    }
    if (updateSwitcherScheduleClientRequest_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(UpdateSwitcherScheduleClientRequest);
    }
    if (updateSwitcherScheduleClientResponse_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(UpdateSwitcherScheduleClientResponse);
    }
    if (deleteSwitcherScheduleClientRequest_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(DeleteSwitcherScheduleClientRequest);
    }
    if (deleteSwitcherScheduleClientResponse_ != null) {
      output.WriteRawTag(114);
      output.WriteMessage(DeleteSwitcherScheduleClientResponse);
    }
    if (updateSwitcherClientRequest_ != null) {
      output.WriteRawTag(122);
      output.WriteMessage(UpdateSwitcherClientRequest);
    }
    if (updateSwitcherClientResponse_ != null) {
      output.WriteRawTag(130, 1);
      output.WriteMessage(UpdateSwitcherClientResponse);
    }
    if (updateSwitcherState_ != null) {
      output.WriteRawTag(138, 1);
      output.WriteMessage(UpdateSwitcherState);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (getSwitchersClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetSwitchersClientRequest);
    }
    if (getSwitchersClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetSwitchersClientResponse);
    }
    if (getSwitcherClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetSwitcherClientRequest);
    }
    if (getSwitcherClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetSwitcherClientResponse);
    }
    if (getLogSwitcherClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetLogSwitcherClientRequest);
    }
    if (getLogSwitcherClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetLogSwitcherClientResponse);
    }
    if (switcherClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitcherClientRequest);
    }
    if (switcherClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitcherClientResponse);
    }
    if (addSwitcherScheduleClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddSwitcherScheduleClientRequest);
    }
    if (addSwitcherScheduleClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddSwitcherScheduleClientResponse);
    }
    if (updateSwitcherScheduleClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateSwitcherScheduleClientRequest);
    }
    if (updateSwitcherScheduleClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateSwitcherScheduleClientResponse);
    }
    if (deleteSwitcherScheduleClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteSwitcherScheduleClientRequest);
    }
    if (deleteSwitcherScheduleClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteSwitcherScheduleClientResponse);
    }
    if (updateSwitcherClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateSwitcherClientRequest);
    }
    if (updateSwitcherClientResponse_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateSwitcherClientResponse);
    }
    if (updateSwitcherState_ != null) {
      size += 2 + pb::CodedOutputStream.ComputeMessageSize(UpdateSwitcherState);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SwitcherClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.getSwitchersClientRequest_ != null) {
      if (getSwitchersClientRequest_ == null) {
        GetSwitchersClientRequest = new global::GetSwitchersClientRequest();
      }
      GetSwitchersClientRequest.MergeFrom(other.GetSwitchersClientRequest);
    }
    if (other.getSwitchersClientResponse_ != null) {
      if (getSwitchersClientResponse_ == null) {
        GetSwitchersClientResponse = new global::GetSwitchersClientResponse();
      }
      GetSwitchersClientResponse.MergeFrom(other.GetSwitchersClientResponse);
    }
    if (other.getSwitcherClientRequest_ != null) {
      if (getSwitcherClientRequest_ == null) {
        GetSwitcherClientRequest = new global::GetSwitcherClientRequest();
      }
      GetSwitcherClientRequest.MergeFrom(other.GetSwitcherClientRequest);
    }
    if (other.getSwitcherClientResponse_ != null) {
      if (getSwitcherClientResponse_ == null) {
        GetSwitcherClientResponse = new global::GetSwitcherClientResponse();
      }
      GetSwitcherClientResponse.MergeFrom(other.GetSwitcherClientResponse);
    }
    if (other.getLogSwitcherClientRequest_ != null) {
      if (getLogSwitcherClientRequest_ == null) {
        GetLogSwitcherClientRequest = new global::GetLogSwitcherClientRequest();
      }
      GetLogSwitcherClientRequest.MergeFrom(other.GetLogSwitcherClientRequest);
    }
    if (other.getLogSwitcherClientResponse_ != null) {
      if (getLogSwitcherClientResponse_ == null) {
        GetLogSwitcherClientResponse = new global::GetLogSwitcherClientResponse();
      }
      GetLogSwitcherClientResponse.MergeFrom(other.GetLogSwitcherClientResponse);
    }
    if (other.switcherClientRequest_ != null) {
      if (switcherClientRequest_ == null) {
        SwitcherClientRequest = new global::SwitcherClientRequest();
      }
      SwitcherClientRequest.MergeFrom(other.SwitcherClientRequest);
    }
    if (other.switcherClientResponse_ != null) {
      if (switcherClientResponse_ == null) {
        SwitcherClientResponse = new global::SwitcherClientResponse();
      }
      SwitcherClientResponse.MergeFrom(other.SwitcherClientResponse);
    }
    if (other.addSwitcherScheduleClientRequest_ != null) {
      if (addSwitcherScheduleClientRequest_ == null) {
        AddSwitcherScheduleClientRequest = new global::AddSwitcherScheduleClientRequest();
      }
      AddSwitcherScheduleClientRequest.MergeFrom(other.AddSwitcherScheduleClientRequest);
    }
    if (other.addSwitcherScheduleClientResponse_ != null) {
      if (addSwitcherScheduleClientResponse_ == null) {
        AddSwitcherScheduleClientResponse = new global::AddSwitcherScheduleClientResponse();
      }
      AddSwitcherScheduleClientResponse.MergeFrom(other.AddSwitcherScheduleClientResponse);
    }
    if (other.updateSwitcherScheduleClientRequest_ != null) {
      if (updateSwitcherScheduleClientRequest_ == null) {
        UpdateSwitcherScheduleClientRequest = new global::UpdateSwitcherScheduleClientRequest();
      }
      UpdateSwitcherScheduleClientRequest.MergeFrom(other.UpdateSwitcherScheduleClientRequest);
    }
    if (other.updateSwitcherScheduleClientResponse_ != null) {
      if (updateSwitcherScheduleClientResponse_ == null) {
        UpdateSwitcherScheduleClientResponse = new global::UpdateSwitcherScheduleClientResponse();
      }
      UpdateSwitcherScheduleClientResponse.MergeFrom(other.UpdateSwitcherScheduleClientResponse);
    }
    if (other.deleteSwitcherScheduleClientRequest_ != null) {
      if (deleteSwitcherScheduleClientRequest_ == null) {
        DeleteSwitcherScheduleClientRequest = new global::DeleteSwitcherScheduleClientRequest();
      }
      DeleteSwitcherScheduleClientRequest.MergeFrom(other.DeleteSwitcherScheduleClientRequest);
    }
    if (other.deleteSwitcherScheduleClientResponse_ != null) {
      if (deleteSwitcherScheduleClientResponse_ == null) {
        DeleteSwitcherScheduleClientResponse = new global::DeleteSwitcherScheduleClientResponse();
      }
      DeleteSwitcherScheduleClientResponse.MergeFrom(other.DeleteSwitcherScheduleClientResponse);
    }
    if (other.updateSwitcherClientRequest_ != null) {
      if (updateSwitcherClientRequest_ == null) {
        UpdateSwitcherClientRequest = new global::UpdateSwitcherClientRequest();
      }
      UpdateSwitcherClientRequest.MergeFrom(other.UpdateSwitcherClientRequest);
    }
    if (other.updateSwitcherClientResponse_ != null) {
      if (updateSwitcherClientResponse_ == null) {
        UpdateSwitcherClientResponse = new global::UpdateSwitcherClientResponse();
      }
      UpdateSwitcherClientResponse.MergeFrom(other.UpdateSwitcherClientResponse);
    }
    if (other.updateSwitcherState_ != null) {
      if (updateSwitcherState_ == null) {
        UpdateSwitcherState = new global::UpdateSwitcherState();
      }
      UpdateSwitcherState.MergeFrom(other.UpdateSwitcherState);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (getSwitchersClientRequest_ == null) {
            GetSwitchersClientRequest = new global::GetSwitchersClientRequest();
          }
          input.ReadMessage(GetSwitchersClientRequest);
          break;
        }
        case 18: {
          if (getSwitchersClientResponse_ == null) {
            GetSwitchersClientResponse = new global::GetSwitchersClientResponse();
          }
          input.ReadMessage(GetSwitchersClientResponse);
          break;
        }
        case 26: {
          if (getSwitcherClientRequest_ == null) {
            GetSwitcherClientRequest = new global::GetSwitcherClientRequest();
          }
          input.ReadMessage(GetSwitcherClientRequest);
          break;
        }
        case 34: {
          if (getSwitcherClientResponse_ == null) {
            GetSwitcherClientResponse = new global::GetSwitcherClientResponse();
          }
          input.ReadMessage(GetSwitcherClientResponse);
          break;
        }
        case 42: {
          if (getLogSwitcherClientRequest_ == null) {
            GetLogSwitcherClientRequest = new global::GetLogSwitcherClientRequest();
          }
          input.ReadMessage(GetLogSwitcherClientRequest);
          break;
        }
        case 50: {
          if (getLogSwitcherClientResponse_ == null) {
            GetLogSwitcherClientResponse = new global::GetLogSwitcherClientResponse();
          }
          input.ReadMessage(GetLogSwitcherClientResponse);
          break;
        }
        case 58: {
          if (switcherClientRequest_ == null) {
            SwitcherClientRequest = new global::SwitcherClientRequest();
          }
          input.ReadMessage(SwitcherClientRequest);
          break;
        }
        case 66: {
          if (switcherClientResponse_ == null) {
            SwitcherClientResponse = new global::SwitcherClientResponse();
          }
          input.ReadMessage(SwitcherClientResponse);
          break;
        }
        case 74: {
          if (addSwitcherScheduleClientRequest_ == null) {
            AddSwitcherScheduleClientRequest = new global::AddSwitcherScheduleClientRequest();
          }
          input.ReadMessage(AddSwitcherScheduleClientRequest);
          break;
        }
        case 82: {
          if (addSwitcherScheduleClientResponse_ == null) {
            AddSwitcherScheduleClientResponse = new global::AddSwitcherScheduleClientResponse();
          }
          input.ReadMessage(AddSwitcherScheduleClientResponse);
          break;
        }
        case 90: {
          if (updateSwitcherScheduleClientRequest_ == null) {
            UpdateSwitcherScheduleClientRequest = new global::UpdateSwitcherScheduleClientRequest();
          }
          input.ReadMessage(UpdateSwitcherScheduleClientRequest);
          break;
        }
        case 98: {
          if (updateSwitcherScheduleClientResponse_ == null) {
            UpdateSwitcherScheduleClientResponse = new global::UpdateSwitcherScheduleClientResponse();
          }
          input.ReadMessage(UpdateSwitcherScheduleClientResponse);
          break;
        }
        case 106: {
          if (deleteSwitcherScheduleClientRequest_ == null) {
            DeleteSwitcherScheduleClientRequest = new global::DeleteSwitcherScheduleClientRequest();
          }
          input.ReadMessage(DeleteSwitcherScheduleClientRequest);
          break;
        }
        case 114: {
          if (deleteSwitcherScheduleClientResponse_ == null) {
            DeleteSwitcherScheduleClientResponse = new global::DeleteSwitcherScheduleClientResponse();
          }
          input.ReadMessage(DeleteSwitcherScheduleClientResponse);
          break;
        }
        case 122: {
          if (updateSwitcherClientRequest_ == null) {
            UpdateSwitcherClientRequest = new global::UpdateSwitcherClientRequest();
          }
          input.ReadMessage(UpdateSwitcherClientRequest);
          break;
        }
        case 130: {
          if (updateSwitcherClientResponse_ == null) {
            UpdateSwitcherClientResponse = new global::UpdateSwitcherClientResponse();
          }
          input.ReadMessage(UpdateSwitcherClientResponse);
          break;
        }
        case 138: {
          if (updateSwitcherState_ == null) {
            UpdateSwitcherState = new global::UpdateSwitcherState();
          }
          input.ReadMessage(UpdateSwitcherState);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị rèm cửa 
/// </summary>
public sealed partial class CurtainSwitcherClientMessage : pb::IMessage<CurtainSwitcherClientMessage> {
  private static readonly pb::MessageParser<CurtainSwitcherClientMessage> _parser = new pb::MessageParser<CurtainSwitcherClientMessage>(() => new CurtainSwitcherClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<CurtainSwitcherClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[76]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientMessage(CurtainSwitcherClientMessage other) : this() {
    curtainSwitcherClientRequest_ = other.curtainSwitcherClientRequest_ != null ? other.curtainSwitcherClientRequest_.Clone() : null;
    curtainSwitcherClientResponse_ = other.curtainSwitcherClientResponse_ != null ? other.curtainSwitcherClientResponse_.Clone() : null;
    addCurtainSwitcherScheduleClientRequest_ = other.addCurtainSwitcherScheduleClientRequest_ != null ? other.addCurtainSwitcherScheduleClientRequest_.Clone() : null;
    addCurtainSwitcherScheduleClientResponse_ = other.addCurtainSwitcherScheduleClientResponse_ != null ? other.addCurtainSwitcherScheduleClientResponse_.Clone() : null;
    updateCurtainSwitcherScheduleClientRequest_ = other.updateCurtainSwitcherScheduleClientRequest_ != null ? other.updateCurtainSwitcherScheduleClientRequest_.Clone() : null;
    updateCurtainSwitcherScheduleClientResponse_ = other.updateCurtainSwitcherScheduleClientResponse_ != null ? other.updateCurtainSwitcherScheduleClientResponse_.Clone() : null;
    deleteCurtainSwitcherScheduleClientRequest_ = other.deleteCurtainSwitcherScheduleClientRequest_ != null ? other.deleteCurtainSwitcherScheduleClientRequest_.Clone() : null;
    deleteCurtainSwitcherScheduleClientResponse_ = other.deleteCurtainSwitcherScheduleClientResponse_ != null ? other.deleteCurtainSwitcherScheduleClientResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public CurtainSwitcherClientMessage Clone() {
    return new CurtainSwitcherClientMessage(this);
  }

  /// <summary>Field number for the "curtainSwitcherClientRequest" field.</summary>
  public const int CurtainSwitcherClientRequestFieldNumber = 1;
  private global::CurtainSwitcherClientRequest curtainSwitcherClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcherClientRequest CurtainSwitcherClientRequest {
    get { return curtainSwitcherClientRequest_; }
    set {
      curtainSwitcherClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "curtainSwitcherClientResponse" field.</summary>
  public const int CurtainSwitcherClientResponseFieldNumber = 2;
  private global::CurtainSwitcherClientResponse curtainSwitcherClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcherClientResponse CurtainSwitcherClientResponse {
    get { return curtainSwitcherClientResponse_; }
    set {
      curtainSwitcherClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "addCurtainSwitcherScheduleClientRequest" field.</summary>
  public const int AddCurtainSwitcherScheduleClientRequestFieldNumber = 3;
  private global::AddCurtainSwitcherScheduleClientRequest addCurtainSwitcherScheduleClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AddCurtainSwitcherScheduleClientRequest AddCurtainSwitcherScheduleClientRequest {
    get { return addCurtainSwitcherScheduleClientRequest_; }
    set {
      addCurtainSwitcherScheduleClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "addCurtainSwitcherScheduleClientResponse" field.</summary>
  public const int AddCurtainSwitcherScheduleClientResponseFieldNumber = 4;
  private global::AddCurtainSwitcherScheduleClientResponse addCurtainSwitcherScheduleClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AddCurtainSwitcherScheduleClientResponse AddCurtainSwitcherScheduleClientResponse {
    get { return addCurtainSwitcherScheduleClientResponse_; }
    set {
      addCurtainSwitcherScheduleClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "updateCurtainSwitcherScheduleClientRequest" field.</summary>
  public const int UpdateCurtainSwitcherScheduleClientRequestFieldNumber = 5;
  private global::UpdateCurtainSwitcherScheduleClientRequest updateCurtainSwitcherScheduleClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateCurtainSwitcherScheduleClientRequest UpdateCurtainSwitcherScheduleClientRequest {
    get { return updateCurtainSwitcherScheduleClientRequest_; }
    set {
      updateCurtainSwitcherScheduleClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "updateCurtainSwitcherScheduleClientResponse" field.</summary>
  public const int UpdateCurtainSwitcherScheduleClientResponseFieldNumber = 6;
  private global::UpdateCurtainSwitcherScheduleClientResponse updateCurtainSwitcherScheduleClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::UpdateCurtainSwitcherScheduleClientResponse UpdateCurtainSwitcherScheduleClientResponse {
    get { return updateCurtainSwitcherScheduleClientResponse_; }
    set {
      updateCurtainSwitcherScheduleClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "deleteCurtainSwitcherScheduleClientRequest" field.</summary>
  public const int DeleteCurtainSwitcherScheduleClientRequestFieldNumber = 7;
  private global::DeleteCurtainSwitcherScheduleClientRequest deleteCurtainSwitcherScheduleClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeleteCurtainSwitcherScheduleClientRequest DeleteCurtainSwitcherScheduleClientRequest {
    get { return deleteCurtainSwitcherScheduleClientRequest_; }
    set {
      deleteCurtainSwitcherScheduleClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "deleteCurtainSwitcherScheduleClientResponse" field.</summary>
  public const int DeleteCurtainSwitcherScheduleClientResponseFieldNumber = 8;
  private global::DeleteCurtainSwitcherScheduleClientResponse deleteCurtainSwitcherScheduleClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeleteCurtainSwitcherScheduleClientResponse DeleteCurtainSwitcherScheduleClientResponse {
    get { return deleteCurtainSwitcherScheduleClientResponse_; }
    set {
      deleteCurtainSwitcherScheduleClientResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as CurtainSwitcherClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(CurtainSwitcherClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(CurtainSwitcherClientRequest, other.CurtainSwitcherClientRequest)) return false;
    if (!object.Equals(CurtainSwitcherClientResponse, other.CurtainSwitcherClientResponse)) return false;
    if (!object.Equals(AddCurtainSwitcherScheduleClientRequest, other.AddCurtainSwitcherScheduleClientRequest)) return false;
    if (!object.Equals(AddCurtainSwitcherScheduleClientResponse, other.AddCurtainSwitcherScheduleClientResponse)) return false;
    if (!object.Equals(UpdateCurtainSwitcherScheduleClientRequest, other.UpdateCurtainSwitcherScheduleClientRequest)) return false;
    if (!object.Equals(UpdateCurtainSwitcherScheduleClientResponse, other.UpdateCurtainSwitcherScheduleClientResponse)) return false;
    if (!object.Equals(DeleteCurtainSwitcherScheduleClientRequest, other.DeleteCurtainSwitcherScheduleClientRequest)) return false;
    if (!object.Equals(DeleteCurtainSwitcherScheduleClientResponse, other.DeleteCurtainSwitcherScheduleClientResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (curtainSwitcherClientRequest_ != null) hash ^= CurtainSwitcherClientRequest.GetHashCode();
    if (curtainSwitcherClientResponse_ != null) hash ^= CurtainSwitcherClientResponse.GetHashCode();
    if (addCurtainSwitcherScheduleClientRequest_ != null) hash ^= AddCurtainSwitcherScheduleClientRequest.GetHashCode();
    if (addCurtainSwitcherScheduleClientResponse_ != null) hash ^= AddCurtainSwitcherScheduleClientResponse.GetHashCode();
    if (updateCurtainSwitcherScheduleClientRequest_ != null) hash ^= UpdateCurtainSwitcherScheduleClientRequest.GetHashCode();
    if (updateCurtainSwitcherScheduleClientResponse_ != null) hash ^= UpdateCurtainSwitcherScheduleClientResponse.GetHashCode();
    if (deleteCurtainSwitcherScheduleClientRequest_ != null) hash ^= DeleteCurtainSwitcherScheduleClientRequest.GetHashCode();
    if (deleteCurtainSwitcherScheduleClientResponse_ != null) hash ^= DeleteCurtainSwitcherScheduleClientResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (curtainSwitcherClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(CurtainSwitcherClientRequest);
    }
    if (curtainSwitcherClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(CurtainSwitcherClientResponse);
    }
    if (addCurtainSwitcherScheduleClientRequest_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(AddCurtainSwitcherScheduleClientRequest);
    }
    if (addCurtainSwitcherScheduleClientResponse_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(AddCurtainSwitcherScheduleClientResponse);
    }
    if (updateCurtainSwitcherScheduleClientRequest_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(UpdateCurtainSwitcherScheduleClientRequest);
    }
    if (updateCurtainSwitcherScheduleClientResponse_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(UpdateCurtainSwitcherScheduleClientResponse);
    }
    if (deleteCurtainSwitcherScheduleClientRequest_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(DeleteCurtainSwitcherScheduleClientRequest);
    }
    if (deleteCurtainSwitcherScheduleClientResponse_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(DeleteCurtainSwitcherScheduleClientResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (curtainSwitcherClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurtainSwitcherClientRequest);
    }
    if (curtainSwitcherClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurtainSwitcherClientResponse);
    }
    if (addCurtainSwitcherScheduleClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddCurtainSwitcherScheduleClientRequest);
    }
    if (addCurtainSwitcherScheduleClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddCurtainSwitcherScheduleClientResponse);
    }
    if (updateCurtainSwitcherScheduleClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateCurtainSwitcherScheduleClientRequest);
    }
    if (updateCurtainSwitcherScheduleClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(UpdateCurtainSwitcherScheduleClientResponse);
    }
    if (deleteCurtainSwitcherScheduleClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteCurtainSwitcherScheduleClientRequest);
    }
    if (deleteCurtainSwitcherScheduleClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteCurtainSwitcherScheduleClientResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(CurtainSwitcherClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.curtainSwitcherClientRequest_ != null) {
      if (curtainSwitcherClientRequest_ == null) {
        CurtainSwitcherClientRequest = new global::CurtainSwitcherClientRequest();
      }
      CurtainSwitcherClientRequest.MergeFrom(other.CurtainSwitcherClientRequest);
    }
    if (other.curtainSwitcherClientResponse_ != null) {
      if (curtainSwitcherClientResponse_ == null) {
        CurtainSwitcherClientResponse = new global::CurtainSwitcherClientResponse();
      }
      CurtainSwitcherClientResponse.MergeFrom(other.CurtainSwitcherClientResponse);
    }
    if (other.addCurtainSwitcherScheduleClientRequest_ != null) {
      if (addCurtainSwitcherScheduleClientRequest_ == null) {
        AddCurtainSwitcherScheduleClientRequest = new global::AddCurtainSwitcherScheduleClientRequest();
      }
      AddCurtainSwitcherScheduleClientRequest.MergeFrom(other.AddCurtainSwitcherScheduleClientRequest);
    }
    if (other.addCurtainSwitcherScheduleClientResponse_ != null) {
      if (addCurtainSwitcherScheduleClientResponse_ == null) {
        AddCurtainSwitcherScheduleClientResponse = new global::AddCurtainSwitcherScheduleClientResponse();
      }
      AddCurtainSwitcherScheduleClientResponse.MergeFrom(other.AddCurtainSwitcherScheduleClientResponse);
    }
    if (other.updateCurtainSwitcherScheduleClientRequest_ != null) {
      if (updateCurtainSwitcherScheduleClientRequest_ == null) {
        UpdateCurtainSwitcherScheduleClientRequest = new global::UpdateCurtainSwitcherScheduleClientRequest();
      }
      UpdateCurtainSwitcherScheduleClientRequest.MergeFrom(other.UpdateCurtainSwitcherScheduleClientRequest);
    }
    if (other.updateCurtainSwitcherScheduleClientResponse_ != null) {
      if (updateCurtainSwitcherScheduleClientResponse_ == null) {
        UpdateCurtainSwitcherScheduleClientResponse = new global::UpdateCurtainSwitcherScheduleClientResponse();
      }
      UpdateCurtainSwitcherScheduleClientResponse.MergeFrom(other.UpdateCurtainSwitcherScheduleClientResponse);
    }
    if (other.deleteCurtainSwitcherScheduleClientRequest_ != null) {
      if (deleteCurtainSwitcherScheduleClientRequest_ == null) {
        DeleteCurtainSwitcherScheduleClientRequest = new global::DeleteCurtainSwitcherScheduleClientRequest();
      }
      DeleteCurtainSwitcherScheduleClientRequest.MergeFrom(other.DeleteCurtainSwitcherScheduleClientRequest);
    }
    if (other.deleteCurtainSwitcherScheduleClientResponse_ != null) {
      if (deleteCurtainSwitcherScheduleClientResponse_ == null) {
        DeleteCurtainSwitcherScheduleClientResponse = new global::DeleteCurtainSwitcherScheduleClientResponse();
      }
      DeleteCurtainSwitcherScheduleClientResponse.MergeFrom(other.DeleteCurtainSwitcherScheduleClientResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (curtainSwitcherClientRequest_ == null) {
            CurtainSwitcherClientRequest = new global::CurtainSwitcherClientRequest();
          }
          input.ReadMessage(CurtainSwitcherClientRequest);
          break;
        }
        case 18: {
          if (curtainSwitcherClientResponse_ == null) {
            CurtainSwitcherClientResponse = new global::CurtainSwitcherClientResponse();
          }
          input.ReadMessage(CurtainSwitcherClientResponse);
          break;
        }
        case 26: {
          if (addCurtainSwitcherScheduleClientRequest_ == null) {
            AddCurtainSwitcherScheduleClientRequest = new global::AddCurtainSwitcherScheduleClientRequest();
          }
          input.ReadMessage(AddCurtainSwitcherScheduleClientRequest);
          break;
        }
        case 34: {
          if (addCurtainSwitcherScheduleClientResponse_ == null) {
            AddCurtainSwitcherScheduleClientResponse = new global::AddCurtainSwitcherScheduleClientResponse();
          }
          input.ReadMessage(AddCurtainSwitcherScheduleClientResponse);
          break;
        }
        case 42: {
          if (updateCurtainSwitcherScheduleClientRequest_ == null) {
            UpdateCurtainSwitcherScheduleClientRequest = new global::UpdateCurtainSwitcherScheduleClientRequest();
          }
          input.ReadMessage(UpdateCurtainSwitcherScheduleClientRequest);
          break;
        }
        case 50: {
          if (updateCurtainSwitcherScheduleClientResponse_ == null) {
            UpdateCurtainSwitcherScheduleClientResponse = new global::UpdateCurtainSwitcherScheduleClientResponse();
          }
          input.ReadMessage(UpdateCurtainSwitcherScheduleClientResponse);
          break;
        }
        case 58: {
          if (deleteCurtainSwitcherScheduleClientRequest_ == null) {
            DeleteCurtainSwitcherScheduleClientRequest = new global::DeleteCurtainSwitcherScheduleClientRequest();
          }
          input.ReadMessage(DeleteCurtainSwitcherScheduleClientRequest);
          break;
        }
        case 66: {
          if (deleteCurtainSwitcherScheduleClientResponse_ == null) {
            DeleteCurtainSwitcherScheduleClientResponse = new global::DeleteCurtainSwitcherScheduleClientResponse();
          }
          input.ReadMessage(DeleteCurtainSwitcherScheduleClientResponse);
          break;
        }
      }
    }
  }

}

public sealed partial class LedDriverClientMessage : pb::IMessage<LedDriverClientMessage> {
  private static readonly pb::MessageParser<LedDriverClientMessage> _parser = new pb::MessageParser<LedDriverClientMessage>(() => new LedDriverClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<LedDriverClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[77]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientMessage(LedDriverClientMessage other) : this() {
    ledDriverClientRequest_ = other.ledDriverClientRequest_ != null ? other.ledDriverClientRequest_.Clone() : null;
    ledDriverClientResponse_ = other.ledDriverClientResponse_ != null ? other.ledDriverClientResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public LedDriverClientMessage Clone() {
    return new LedDriverClientMessage(this);
  }

  /// <summary>Field number for the "ledDriverClientRequest" field.</summary>
  public const int LedDriverClientRequestFieldNumber = 1;
  private global::LedDriverClientRequest ledDriverClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LedDriverClientRequest LedDriverClientRequest {
    get { return ledDriverClientRequest_; }
    set {
      ledDriverClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "ledDriverClientResponse" field.</summary>
  public const int LedDriverClientResponseFieldNumber = 2;
  private global::LedDriverClientResponse ledDriverClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LedDriverClientResponse LedDriverClientResponse {
    get { return ledDriverClientResponse_; }
    set {
      ledDriverClientResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as LedDriverClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(LedDriverClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(LedDriverClientRequest, other.LedDriverClientRequest)) return false;
    if (!object.Equals(LedDriverClientResponse, other.LedDriverClientResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (ledDriverClientRequest_ != null) hash ^= LedDriverClientRequest.GetHashCode();
    if (ledDriverClientResponse_ != null) hash ^= LedDriverClientResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (ledDriverClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(LedDriverClientRequest);
    }
    if (ledDriverClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(LedDriverClientResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (ledDriverClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedDriverClientRequest);
    }
    if (ledDriverClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedDriverClientResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(LedDriverClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.ledDriverClientRequest_ != null) {
      if (ledDriverClientRequest_ == null) {
        LedDriverClientRequest = new global::LedDriverClientRequest();
      }
      LedDriverClientRequest.MergeFrom(other.LedDriverClientRequest);
    }
    if (other.ledDriverClientResponse_ != null) {
      if (ledDriverClientResponse_ == null) {
        LedDriverClientResponse = new global::LedDriverClientResponse();
      }
      LedDriverClientResponse.MergeFrom(other.LedDriverClientResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (ledDriverClientRequest_ == null) {
            LedDriverClientRequest = new global::LedDriverClientRequest();
          }
          input.ReadMessage(LedDriverClientRequest);
          break;
        }
        case 18: {
          if (ledDriverClientResponse_ == null) {
            LedDriverClientResponse = new global::LedDriverClientResponse();
          }
          input.ReadMessage(LedDriverClientResponse);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị rèm cửa 
/// </summary>
public sealed partial class MotionClientMessage : pb::IMessage<MotionClientMessage> {
  private static readonly pb::MessageParser<MotionClientMessage> _parser = new pb::MessageParser<MotionClientMessage>(() => new MotionClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MotionClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[78]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientMessage(MotionClientMessage other) : this() {
    motionClientRequest_ = other.motionClientRequest_ != null ? other.motionClientRequest_.Clone() : null;
    motionClientResponse_ = other.motionClientResponse_ != null ? other.motionClientResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MotionClientMessage Clone() {
    return new MotionClientMessage(this);
  }

  /// <summary>Field number for the "motionClientRequest" field.</summary>
  public const int MotionClientRequestFieldNumber = 1;
  private global::MotionClientRequest motionClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionClientRequest MotionClientRequest {
    get { return motionClientRequest_; }
    set {
      motionClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "motionClientResponse" field.</summary>
  public const int MotionClientResponseFieldNumber = 2;
  private global::MotionClientResponse motionClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionClientResponse MotionClientResponse {
    get { return motionClientResponse_; }
    set {
      motionClientResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MotionClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MotionClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MotionClientRequest, other.MotionClientRequest)) return false;
    if (!object.Equals(MotionClientResponse, other.MotionClientResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (motionClientRequest_ != null) hash ^= MotionClientRequest.GetHashCode();
    if (motionClientResponse_ != null) hash ^= MotionClientResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (motionClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MotionClientRequest);
    }
    if (motionClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MotionClientResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (motionClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotionClientRequest);
    }
    if (motionClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotionClientResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MotionClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.motionClientRequest_ != null) {
      if (motionClientRequest_ == null) {
        MotionClientRequest = new global::MotionClientRequest();
      }
      MotionClientRequest.MergeFrom(other.MotionClientRequest);
    }
    if (other.motionClientResponse_ != null) {
      if (motionClientResponse_ == null) {
        MotionClientResponse = new global::MotionClientResponse();
      }
      MotionClientResponse.MergeFrom(other.MotionClientResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (motionClientRequest_ == null) {
            MotionClientRequest = new global::MotionClientRequest();
          }
          input.ReadMessage(MotionClientRequest);
          break;
        }
        case 18: {
          if (motionClientResponse_ == null) {
            MotionClientResponse = new global::MotionClientResponse();
          }
          input.ReadMessage(MotionClientResponse);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị đọc đồng hồ điện nước 
/// </summary>
public sealed partial class MeterClientMessage : pb::IMessage<MeterClientMessage> {
  private static readonly pb::MessageParser<MeterClientMessage> _parser = new pb::MessageParser<MeterClientMessage>(() => new MeterClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<MeterClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[79]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientMessage(MeterClientMessage other) : this() {
    meterClientRequest_ = other.meterClientRequest_ != null ? other.meterClientRequest_.Clone() : null;
    meterClientResponse_ = other.meterClientResponse_ != null ? other.meterClientResponse_.Clone() : null;
    meterClientConfirm_ = other.meterClientConfirm_ != null ? other.meterClientConfirm_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public MeterClientMessage Clone() {
    return new MeterClientMessage(this);
  }

  /// <summary>Field number for the "meterClientRequest" field.</summary>
  public const int MeterClientRequestFieldNumber = 1;
  private global::MeterClientRequest meterClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MeterClientRequest MeterClientRequest {
    get { return meterClientRequest_; }
    set {
      meterClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "meterClientResponse" field.</summary>
  public const int MeterClientResponseFieldNumber = 2;
  private global::MeterClientResponse meterClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MeterClientResponse MeterClientResponse {
    get { return meterClientResponse_; }
    set {
      meterClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "MeterClientConfirm" field.</summary>
  public const int MeterClientConfirmFieldNumber = 3;
  private global::MeterClientConfirm meterClientConfirm_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MeterClientConfirm MeterClientConfirm {
    get { return meterClientConfirm_; }
    set {
      meterClientConfirm_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as MeterClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(MeterClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MeterClientRequest, other.MeterClientRequest)) return false;
    if (!object.Equals(MeterClientResponse, other.MeterClientResponse)) return false;
    if (!object.Equals(MeterClientConfirm, other.MeterClientConfirm)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (meterClientRequest_ != null) hash ^= MeterClientRequest.GetHashCode();
    if (meterClientResponse_ != null) hash ^= MeterClientResponse.GetHashCode();
    if (meterClientConfirm_ != null) hash ^= MeterClientConfirm.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (meterClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MeterClientRequest);
    }
    if (meterClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(MeterClientResponse);
    }
    if (meterClientConfirm_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(MeterClientConfirm);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (meterClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeterClientRequest);
    }
    if (meterClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeterClientResponse);
    }
    if (meterClientConfirm_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeterClientConfirm);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(MeterClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.meterClientRequest_ != null) {
      if (meterClientRequest_ == null) {
        MeterClientRequest = new global::MeterClientRequest();
      }
      MeterClientRequest.MergeFrom(other.MeterClientRequest);
    }
    if (other.meterClientResponse_ != null) {
      if (meterClientResponse_ == null) {
        MeterClientResponse = new global::MeterClientResponse();
      }
      MeterClientResponse.MergeFrom(other.MeterClientResponse);
    }
    if (other.meterClientConfirm_ != null) {
      if (meterClientConfirm_ == null) {
        MeterClientConfirm = new global::MeterClientConfirm();
      }
      MeterClientConfirm.MergeFrom(other.MeterClientConfirm);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (meterClientRequest_ == null) {
            MeterClientRequest = new global::MeterClientRequest();
          }
          input.ReadMessage(MeterClientRequest);
          break;
        }
        case 18: {
          if (meterClientResponse_ == null) {
            MeterClientResponse = new global::MeterClientResponse();
          }
          input.ReadMessage(MeterClientResponse);
          break;
        }
        case 26: {
          if (meterClientConfirm_ == null) {
            MeterClientConfirm = new global::MeterClientConfirm();
          }
          input.ReadMessage(MeterClientConfirm);
          break;
        }
      }
    }
  }

}

public sealed partial class HomekitClientMessage : pb::IMessage<HomekitClientMessage> {
  private static readonly pb::MessageParser<HomekitClientMessage> _parser = new pb::MessageParser<HomekitClientMessage>(() => new HomekitClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<HomekitClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[80]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HomekitClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HomekitClientMessage(HomekitClientMessage other) : this() {
    setHomekitModeClientRequest_ = other.setHomekitModeClientRequest_ != null ? other.setHomekitModeClientRequest_.Clone() : null;
    setHomekitModeClientResponse_ = other.setHomekitModeClientResponse_ != null ? other.setHomekitModeClientResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public HomekitClientMessage Clone() {
    return new HomekitClientMessage(this);
  }

  /// <summary>Field number for the "setHomekitModeClientRequest" field.</summary>
  public const int SetHomekitModeClientRequestFieldNumber = 1;
  private global::SetHomekitModeClientRequest setHomekitModeClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SetHomekitModeClientRequest SetHomekitModeClientRequest {
    get { return setHomekitModeClientRequest_; }
    set {
      setHomekitModeClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "setHomekitModeClientResponse" field.</summary>
  public const int SetHomekitModeClientResponseFieldNumber = 2;
  private global::SetHomekitModeClientResponse setHomekitModeClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SetHomekitModeClientResponse SetHomekitModeClientResponse {
    get { return setHomekitModeClientResponse_; }
    set {
      setHomekitModeClientResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as HomekitClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(HomekitClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SetHomekitModeClientRequest, other.SetHomekitModeClientRequest)) return false;
    if (!object.Equals(SetHomekitModeClientResponse, other.SetHomekitModeClientResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (setHomekitModeClientRequest_ != null) hash ^= SetHomekitModeClientRequest.GetHashCode();
    if (setHomekitModeClientResponse_ != null) hash ^= SetHomekitModeClientResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (setHomekitModeClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SetHomekitModeClientRequest);
    }
    if (setHomekitModeClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SetHomekitModeClientResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (setHomekitModeClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetHomekitModeClientRequest);
    }
    if (setHomekitModeClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetHomekitModeClientResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(HomekitClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.setHomekitModeClientRequest_ != null) {
      if (setHomekitModeClientRequest_ == null) {
        SetHomekitModeClientRequest = new global::SetHomekitModeClientRequest();
      }
      SetHomekitModeClientRequest.MergeFrom(other.SetHomekitModeClientRequest);
    }
    if (other.setHomekitModeClientResponse_ != null) {
      if (setHomekitModeClientResponse_ == null) {
        SetHomekitModeClientResponse = new global::SetHomekitModeClientResponse();
      }
      SetHomekitModeClientResponse.MergeFrom(other.SetHomekitModeClientResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (setHomekitModeClientRequest_ == null) {
            SetHomekitModeClientRequest = new global::SetHomekitModeClientRequest();
          }
          input.ReadMessage(SetHomekitModeClientRequest);
          break;
        }
        case 18: {
          if (setHomekitModeClientResponse_ == null) {
            SetHomekitModeClientResponse = new global::SetHomekitModeClientResponse();
          }
          input.ReadMessage(SetHomekitModeClientResponse);
          break;
        }
      }
    }
  }

}

public sealed partial class SceneGroupClientRequest : pb::IMessage<SceneGroupClientRequest> {
  private static readonly pb::MessageParser<SceneGroupClientRequest> _parser = new pb::MessageParser<SceneGroupClientRequest>(() => new SceneGroupClientRequest());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneGroupClientRequest> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[81]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneGroupClientRequest() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneGroupClientRequest(SceneGroupClientRequest other) : this() {
    switcherClientRequest_ = other.switcherClientRequest_.Clone();
    ledDriverClientRequest_ = other.ledDriverClientRequest_.Clone();
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneGroupClientRequest Clone() {
    return new SceneGroupClientRequest(this);
  }

  /// <summary>Field number for the "switcherClientRequest" field.</summary>
  public const int SwitcherClientRequestFieldNumber = 1;
  private static readonly pb::FieldCodec<global::SwitcherClientRequest> _repeated_switcherClientRequest_codec
      = pb::FieldCodec.ForMessage(10, global::SwitcherClientRequest.Parser);
  private readonly pbc::RepeatedField<global::SwitcherClientRequest> switcherClientRequest_ = new pbc::RepeatedField<global::SwitcherClientRequest>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::SwitcherClientRequest> SwitcherClientRequest {
    get { return switcherClientRequest_; }
  }

  /// <summary>Field number for the "ledDriverClientRequest" field.</summary>
  public const int LedDriverClientRequestFieldNumber = 2;
  private static readonly pb::FieldCodec<global::LedDriverClientRequest> _repeated_ledDriverClientRequest_codec
      = pb::FieldCodec.ForMessage(18, global::LedDriverClientRequest.Parser);
  private readonly pbc::RepeatedField<global::LedDriverClientRequest> ledDriverClientRequest_ = new pbc::RepeatedField<global::LedDriverClientRequest>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::LedDriverClientRequest> LedDriverClientRequest {
    get { return ledDriverClientRequest_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneGroupClientRequest);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneGroupClientRequest other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!switcherClientRequest_.Equals(other.switcherClientRequest_)) return false;
    if(!ledDriverClientRequest_.Equals(other.ledDriverClientRequest_)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= switcherClientRequest_.GetHashCode();
    hash ^= ledDriverClientRequest_.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    switcherClientRequest_.WriteTo(output, _repeated_switcherClientRequest_codec);
    ledDriverClientRequest_.WriteTo(output, _repeated_ledDriverClientRequest_codec);
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += switcherClientRequest_.CalculateSize(_repeated_switcherClientRequest_codec);
    size += ledDriverClientRequest_.CalculateSize(_repeated_ledDriverClientRequest_codec);
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneGroupClientRequest other) {
    if (other == null) {
      return;
    }
    switcherClientRequest_.Add(other.switcherClientRequest_);
    ledDriverClientRequest_.Add(other.ledDriverClientRequest_);
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          switcherClientRequest_.AddEntriesFrom(input, _repeated_switcherClientRequest_codec);
          break;
        }
        case 18: {
          ledDriverClientRequest_.AddEntriesFrom(input, _repeated_ledDriverClientRequest_codec);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Kịch bản 
/// </summary>
public sealed partial class SceneClientMessage : pb::IMessage<SceneClientMessage> {
  private static readonly pb::MessageParser<SceneClientMessage> _parser = new pb::MessageParser<SceneClientMessage>(() => new SceneClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[82]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientMessage(SceneClientMessage other) : this() {
    sceneClientRequest_ = other.sceneClientRequest_ != null ? other.sceneClientRequest_.Clone() : null;
    sceneClientResponse_ = other.sceneClientResponse_ != null ? other.sceneClientResponse_.Clone() : null;
    sceneGroupClientRequest_ = other.sceneGroupClientRequest_ != null ? other.sceneGroupClientRequest_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneClientMessage Clone() {
    return new SceneClientMessage(this);
  }

  /// <summary>Field number for the "sceneClientRequest" field.</summary>
  public const int SceneClientRequestFieldNumber = 1;
  private global::SceneClientRequest sceneClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SceneClientRequest SceneClientRequest {
    get { return sceneClientRequest_; }
    set {
      sceneClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "sceneClientResponse" field.</summary>
  public const int SceneClientResponseFieldNumber = 2;
  private global::SceneClientResponse sceneClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SceneClientResponse SceneClientResponse {
    get { return sceneClientResponse_; }
    set {
      sceneClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "sceneGroupClientRequest" field.</summary>
  public const int SceneGroupClientRequestFieldNumber = 3;
  private global::SceneGroupClientRequest sceneGroupClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SceneGroupClientRequest SceneGroupClientRequest {
    get { return sceneGroupClientRequest_; }
    set {
      sceneGroupClientRequest_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SceneClientRequest, other.SceneClientRequest)) return false;
    if (!object.Equals(SceneClientResponse, other.SceneClientResponse)) return false;
    if (!object.Equals(SceneGroupClientRequest, other.SceneGroupClientRequest)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (sceneClientRequest_ != null) hash ^= SceneClientRequest.GetHashCode();
    if (sceneClientResponse_ != null) hash ^= SceneClientResponse.GetHashCode();
    if (sceneGroupClientRequest_ != null) hash ^= SceneGroupClientRequest.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (sceneClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SceneClientRequest);
    }
    if (sceneClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SceneClientResponse);
    }
    if (sceneGroupClientRequest_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(SceneGroupClientRequest);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (sceneClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneClientRequest);
    }
    if (sceneClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneClientResponse);
    }
    if (sceneGroupClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneGroupClientRequest);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.sceneClientRequest_ != null) {
      if (sceneClientRequest_ == null) {
        SceneClientRequest = new global::SceneClientRequest();
      }
      SceneClientRequest.MergeFrom(other.SceneClientRequest);
    }
    if (other.sceneClientResponse_ != null) {
      if (sceneClientResponse_ == null) {
        SceneClientResponse = new global::SceneClientResponse();
      }
      SceneClientResponse.MergeFrom(other.SceneClientResponse);
    }
    if (other.sceneGroupClientRequest_ != null) {
      if (sceneGroupClientRequest_ == null) {
        SceneGroupClientRequest = new global::SceneGroupClientRequest();
      }
      SceneGroupClientRequest.MergeFrom(other.SceneGroupClientRequest);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (sceneClientRequest_ == null) {
            SceneClientRequest = new global::SceneClientRequest();
          }
          input.ReadMessage(SceneClientRequest);
          break;
        }
        case 18: {
          if (sceneClientResponse_ == null) {
            SceneClientResponse = new global::SceneClientResponse();
          }
          input.ReadMessage(SceneClientResponse);
          break;
        }
        case 26: {
          if (sceneGroupClientRequest_ == null) {
            SceneGroupClientRequest = new global::SceneGroupClientRequest();
          }
          input.ReadMessage(SceneGroupClientRequest);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Kịch bản điều khiển Trigger 
/// </summary>
public sealed partial class SceneTriggerClientMessage : pb::IMessage<SceneTriggerClientMessage> {
  private static readonly pb::MessageParser<SceneTriggerClientMessage> _parser = new pb::MessageParser<SceneTriggerClientMessage>(() => new SceneTriggerClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<SceneTriggerClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[83]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientMessage(SceneTriggerClientMessage other) : this() {
    sceneTriggerClientRequest_ = other.sceneTriggerClientRequest_ != null ? other.sceneTriggerClientRequest_.Clone() : null;
    sceneTriggerClientResponse_ = other.sceneTriggerClientResponse_ != null ? other.sceneTriggerClientResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public SceneTriggerClientMessage Clone() {
    return new SceneTriggerClientMessage(this);
  }

  /// <summary>Field number for the "sceneTriggerClientRequest" field.</summary>
  public const int SceneTriggerClientRequestFieldNumber = 1;
  private global::SceneTriggerClientRequest sceneTriggerClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SceneTriggerClientRequest SceneTriggerClientRequest {
    get { return sceneTriggerClientRequest_; }
    set {
      sceneTriggerClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "sceneTriggerClientResponse" field.</summary>
  public const int SceneTriggerClientResponseFieldNumber = 2;
  private global::SceneTriggerClientResponse sceneTriggerClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SceneTriggerClientResponse SceneTriggerClientResponse {
    get { return sceneTriggerClientResponse_; }
    set {
      sceneTriggerClientResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as SceneTriggerClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(SceneTriggerClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SceneTriggerClientRequest, other.SceneTriggerClientRequest)) return false;
    if (!object.Equals(SceneTriggerClientResponse, other.SceneTriggerClientResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (sceneTriggerClientRequest_ != null) hash ^= SceneTriggerClientRequest.GetHashCode();
    if (sceneTriggerClientResponse_ != null) hash ^= SceneTriggerClientResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (sceneTriggerClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SceneTriggerClientRequest);
    }
    if (sceneTriggerClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SceneTriggerClientResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (sceneTriggerClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneTriggerClientRequest);
    }
    if (sceneTriggerClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneTriggerClientResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(SceneTriggerClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.sceneTriggerClientRequest_ != null) {
      if (sceneTriggerClientRequest_ == null) {
        SceneTriggerClientRequest = new global::SceneTriggerClientRequest();
      }
      SceneTriggerClientRequest.MergeFrom(other.SceneTriggerClientRequest);
    }
    if (other.sceneTriggerClientResponse_ != null) {
      if (sceneTriggerClientResponse_ == null) {
        SceneTriggerClientResponse = new global::SceneTriggerClientResponse();
      }
      SceneTriggerClientResponse.MergeFrom(other.SceneTriggerClientResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (sceneTriggerClientRequest_ == null) {
            SceneTriggerClientRequest = new global::SceneTriggerClientRequest();
          }
          input.ReadMessage(SceneTriggerClientRequest);
          break;
        }
        case 18: {
          if (sceneTriggerClientResponse_ == null) {
            SceneTriggerClientResponse = new global::SceneTriggerClientResponse();
          }
          input.ReadMessage(SceneTriggerClientResponse);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Events runtime 
/// </summary>
public sealed partial class OnChangedClientMessage : pb::IMessage<OnChangedClientMessage> {
  private static readonly pb::MessageParser<OnChangedClientMessage> _parser = new pb::MessageParser<OnChangedClientMessage>(() => new OnChangedClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<OnChangedClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[84]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OnChangedClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OnChangedClientMessage(OnChangedClientMessage other) : this() {
    meterOnChangedClientResponse_ = other.meterOnChangedClientResponse_ != null ? other.meterOnChangedClientResponse_.Clone() : null;
    switcherOnChangedClientResponse_ = other.switcherOnChangedClientResponse_ != null ? other.switcherOnChangedClientResponse_.Clone() : null;
    curtainSwitcherOnChangedClientResponse_ = other.curtainSwitcherOnChangedClientResponse_ != null ? other.curtainSwitcherOnChangedClientResponse_.Clone() : null;
    airConditionerOnChangedClientResponse_ = other.airConditionerOnChangedClientResponse_ != null ? other.airConditionerOnChangedClientResponse_.Clone() : null;
    progressUpdateFirmwareOnChangedDeviceClientResponse_ = other.progressUpdateFirmwareOnChangedDeviceClientResponse_ != null ? other.progressUpdateFirmwareOnChangedDeviceClientResponse_.Clone() : null;
    deviceOnChangedDeviceClientResponse_ = other.deviceOnChangedDeviceClientResponse_ != null ? other.deviceOnChangedDeviceClientResponse_.Clone() : null;
    motionOnChangedClientResponse_ = other.motionOnChangedClientResponse_ != null ? other.motionOnChangedClientResponse_.Clone() : null;
    homekitOnChangedClientResponse_ = other.homekitOnChangedClientResponse_ != null ? other.homekitOnChangedClientResponse_.Clone() : null;
    buttonOnChangedClientResponse_ = other.buttonOnChangedClientResponse_ != null ? other.buttonOnChangedClientResponse_.Clone() : null;
    debugLoggingResponse_ = other.debugLoggingResponse_ != null ? other.debugLoggingResponse_.Clone() : null;
    ledDriverOnChangedClientResponse_ = other.ledDriverOnChangedClientResponse_ != null ? other.ledDriverOnChangedClientResponse_.Clone() : null;
    environmentOnchangedClientResponse_ = other.environmentOnchangedClientResponse_ != null ? other.environmentOnchangedClientResponse_.Clone() : null;
    smartPlugOnchangedClientResponse_ = other.smartPlugOnchangedClientResponse_ != null ? other.smartPlugOnchangedClientResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public OnChangedClientMessage Clone() {
    return new OnChangedClientMessage(this);
  }

  /// <summary>Field number for the "meterOnChangedClientResponse" field.</summary>
  public const int MeterOnChangedClientResponseFieldNumber = 1;
  private global::MeterOnChangedClientResponse meterOnChangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MeterOnChangedClientResponse MeterOnChangedClientResponse {
    get { return meterOnChangedClientResponse_; }
    set {
      meterOnChangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "switcherOnChangedClientResponse" field.</summary>
  public const int SwitcherOnChangedClientResponseFieldNumber = 2;
  private global::SwitcherOnChangedClientResponse switcherOnChangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwitcherOnChangedClientResponse SwitcherOnChangedClientResponse {
    get { return switcherOnChangedClientResponse_; }
    set {
      switcherOnChangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "curtainSwitcherOnChangedClientResponse" field.</summary>
  public const int CurtainSwitcherOnChangedClientResponseFieldNumber = 3;
  private global::CurtainSwitcherOnChangedClientResponse curtainSwitcherOnChangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcherOnChangedClientResponse CurtainSwitcherOnChangedClientResponse {
    get { return curtainSwitcherOnChangedClientResponse_; }
    set {
      curtainSwitcherOnChangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "airConditionerOnChangedClientResponse" field.</summary>
  public const int AirConditionerOnChangedClientResponseFieldNumber = 4;
  private global::AirConditionerOnChangedClientResponse airConditionerOnChangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerOnChangedClientResponse AirConditionerOnChangedClientResponse {
    get { return airConditionerOnChangedClientResponse_; }
    set {
      airConditionerOnChangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "progressUpdateFirmwareOnChangedDeviceClientResponse" field.</summary>
  public const int ProgressUpdateFirmwareOnChangedDeviceClientResponseFieldNumber = 5;
  private global::ProgressUpdateFirmwareOnChangedDeviceClientResponse progressUpdateFirmwareOnChangedDeviceClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ProgressUpdateFirmwareOnChangedDeviceClientResponse ProgressUpdateFirmwareOnChangedDeviceClientResponse {
    get { return progressUpdateFirmwareOnChangedDeviceClientResponse_; }
    set {
      progressUpdateFirmwareOnChangedDeviceClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "deviceOnChangedDeviceClientResponse" field.</summary>
  public const int DeviceOnChangedDeviceClientResponseFieldNumber = 6;
  private global::DeviceOnChangedDeviceClientResponse deviceOnChangedDeviceClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceOnChangedDeviceClientResponse DeviceOnChangedDeviceClientResponse {
    get { return deviceOnChangedDeviceClientResponse_; }
    set {
      deviceOnChangedDeviceClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "motionOnChangedClientResponse" field.</summary>
  public const int MotionOnChangedClientResponseFieldNumber = 7;
  private global::MotionOnChangedClientResponse motionOnChangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionOnChangedClientResponse MotionOnChangedClientResponse {
    get { return motionOnChangedClientResponse_; }
    set {
      motionOnChangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "homekitOnChangedClientResponse" field.</summary>
  public const int HomekitOnChangedClientResponseFieldNumber = 8;
  private global::HomekitOnChangedClientResponse homekitOnChangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HomekitOnChangedClientResponse HomekitOnChangedClientResponse {
    get { return homekitOnChangedClientResponse_; }
    set {
      homekitOnChangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "buttonOnChangedClientResponse" field.</summary>
  public const int ButtonOnChangedClientResponseFieldNumber = 9;
  private global::ButtonOnChangedClientResponse buttonOnChangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::ButtonOnChangedClientResponse ButtonOnChangedClientResponse {
    get { return buttonOnChangedClientResponse_; }
    set {
      buttonOnChangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "debugLoggingResponse" field.</summary>
  public const int DebugLoggingResponseFieldNumber = 10;
  private global::DebugLoggingResponse debugLoggingResponse_;
  /// <summary>
  /// Kênh log debug của thiết bị.
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DebugLoggingResponse DebugLoggingResponse {
    get { return debugLoggingResponse_; }
    set {
      debugLoggingResponse_ = value;
    }
  }

  /// <summary>Field number for the "ledDriverOnChangedClientResponse" field.</summary>
  public const int LedDriverOnChangedClientResponseFieldNumber = 11;
  private global::LedDriverOnChangedClientResponse ledDriverOnChangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LedDriverOnChangedClientResponse LedDriverOnChangedClientResponse {
    get { return ledDriverOnChangedClientResponse_; }
    set {
      ledDriverOnChangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "environmentOnchangedClientResponse" field.</summary>
  public const int EnvironmentOnchangedClientResponseFieldNumber = 12;
  private global::EnvironmentOnchangedClientResponse environmentOnchangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::EnvironmentOnchangedClientResponse EnvironmentOnchangedClientResponse {
    get { return environmentOnchangedClientResponse_; }
    set {
      environmentOnchangedClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "smartPlugOnchangedClientResponse" field.</summary>
  public const int SmartPlugOnchangedClientResponseFieldNumber = 13;
  private global::SmartPlugOnchangedClientResponse smartPlugOnchangedClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SmartPlugOnchangedClientResponse SmartPlugOnchangedClientResponse {
    get { return smartPlugOnchangedClientResponse_; }
    set {
      smartPlugOnchangedClientResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as OnChangedClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(OnChangedClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(MeterOnChangedClientResponse, other.MeterOnChangedClientResponse)) return false;
    if (!object.Equals(SwitcherOnChangedClientResponse, other.SwitcherOnChangedClientResponse)) return false;
    if (!object.Equals(CurtainSwitcherOnChangedClientResponse, other.CurtainSwitcherOnChangedClientResponse)) return false;
    if (!object.Equals(AirConditionerOnChangedClientResponse, other.AirConditionerOnChangedClientResponse)) return false;
    if (!object.Equals(ProgressUpdateFirmwareOnChangedDeviceClientResponse, other.ProgressUpdateFirmwareOnChangedDeviceClientResponse)) return false;
    if (!object.Equals(DeviceOnChangedDeviceClientResponse, other.DeviceOnChangedDeviceClientResponse)) return false;
    if (!object.Equals(MotionOnChangedClientResponse, other.MotionOnChangedClientResponse)) return false;
    if (!object.Equals(HomekitOnChangedClientResponse, other.HomekitOnChangedClientResponse)) return false;
    if (!object.Equals(ButtonOnChangedClientResponse, other.ButtonOnChangedClientResponse)) return false;
    if (!object.Equals(DebugLoggingResponse, other.DebugLoggingResponse)) return false;
    if (!object.Equals(LedDriverOnChangedClientResponse, other.LedDriverOnChangedClientResponse)) return false;
    if (!object.Equals(EnvironmentOnchangedClientResponse, other.EnvironmentOnchangedClientResponse)) return false;
    if (!object.Equals(SmartPlugOnchangedClientResponse, other.SmartPlugOnchangedClientResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (meterOnChangedClientResponse_ != null) hash ^= MeterOnChangedClientResponse.GetHashCode();
    if (switcherOnChangedClientResponse_ != null) hash ^= SwitcherOnChangedClientResponse.GetHashCode();
    if (curtainSwitcherOnChangedClientResponse_ != null) hash ^= CurtainSwitcherOnChangedClientResponse.GetHashCode();
    if (airConditionerOnChangedClientResponse_ != null) hash ^= AirConditionerOnChangedClientResponse.GetHashCode();
    if (progressUpdateFirmwareOnChangedDeviceClientResponse_ != null) hash ^= ProgressUpdateFirmwareOnChangedDeviceClientResponse.GetHashCode();
    if (deviceOnChangedDeviceClientResponse_ != null) hash ^= DeviceOnChangedDeviceClientResponse.GetHashCode();
    if (motionOnChangedClientResponse_ != null) hash ^= MotionOnChangedClientResponse.GetHashCode();
    if (homekitOnChangedClientResponse_ != null) hash ^= HomekitOnChangedClientResponse.GetHashCode();
    if (buttonOnChangedClientResponse_ != null) hash ^= ButtonOnChangedClientResponse.GetHashCode();
    if (debugLoggingResponse_ != null) hash ^= DebugLoggingResponse.GetHashCode();
    if (ledDriverOnChangedClientResponse_ != null) hash ^= LedDriverOnChangedClientResponse.GetHashCode();
    if (environmentOnchangedClientResponse_ != null) hash ^= EnvironmentOnchangedClientResponse.GetHashCode();
    if (smartPlugOnchangedClientResponse_ != null) hash ^= SmartPlugOnchangedClientResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (meterOnChangedClientResponse_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(MeterOnChangedClientResponse);
    }
    if (switcherOnChangedClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SwitcherOnChangedClientResponse);
    }
    if (curtainSwitcherOnChangedClientResponse_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(CurtainSwitcherOnChangedClientResponse);
    }
    if (airConditionerOnChangedClientResponse_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(AirConditionerOnChangedClientResponse);
    }
    if (progressUpdateFirmwareOnChangedDeviceClientResponse_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(ProgressUpdateFirmwareOnChangedDeviceClientResponse);
    }
    if (deviceOnChangedDeviceClientResponse_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(DeviceOnChangedDeviceClientResponse);
    }
    if (motionOnChangedClientResponse_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(MotionOnChangedClientResponse);
    }
    if (homekitOnChangedClientResponse_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(HomekitOnChangedClientResponse);
    }
    if (buttonOnChangedClientResponse_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(ButtonOnChangedClientResponse);
    }
    if (debugLoggingResponse_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(DebugLoggingResponse);
    }
    if (ledDriverOnChangedClientResponse_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(LedDriverOnChangedClientResponse);
    }
    if (environmentOnchangedClientResponse_ != null) {
      output.WriteRawTag(98);
      output.WriteMessage(EnvironmentOnchangedClientResponse);
    }
    if (smartPlugOnchangedClientResponse_ != null) {
      output.WriteRawTag(106);
      output.WriteMessage(SmartPlugOnchangedClientResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (meterOnChangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeterOnChangedClientResponse);
    }
    if (switcherOnChangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitcherOnChangedClientResponse);
    }
    if (curtainSwitcherOnChangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurtainSwitcherOnChangedClientResponse);
    }
    if (airConditionerOnChangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerOnChangedClientResponse);
    }
    if (progressUpdateFirmwareOnChangedDeviceClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ProgressUpdateFirmwareOnChangedDeviceClientResponse);
    }
    if (deviceOnChangedDeviceClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceOnChangedDeviceClientResponse);
    }
    if (motionOnChangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotionOnChangedClientResponse);
    }
    if (homekitOnChangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HomekitOnChangedClientResponse);
    }
    if (buttonOnChangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(ButtonOnChangedClientResponse);
    }
    if (debugLoggingResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DebugLoggingResponse);
    }
    if (ledDriverOnChangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedDriverOnChangedClientResponse);
    }
    if (environmentOnchangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(EnvironmentOnchangedClientResponse);
    }
    if (smartPlugOnchangedClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SmartPlugOnchangedClientResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(OnChangedClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.meterOnChangedClientResponse_ != null) {
      if (meterOnChangedClientResponse_ == null) {
        MeterOnChangedClientResponse = new global::MeterOnChangedClientResponse();
      }
      MeterOnChangedClientResponse.MergeFrom(other.MeterOnChangedClientResponse);
    }
    if (other.switcherOnChangedClientResponse_ != null) {
      if (switcherOnChangedClientResponse_ == null) {
        SwitcherOnChangedClientResponse = new global::SwitcherOnChangedClientResponse();
      }
      SwitcherOnChangedClientResponse.MergeFrom(other.SwitcherOnChangedClientResponse);
    }
    if (other.curtainSwitcherOnChangedClientResponse_ != null) {
      if (curtainSwitcherOnChangedClientResponse_ == null) {
        CurtainSwitcherOnChangedClientResponse = new global::CurtainSwitcherOnChangedClientResponse();
      }
      CurtainSwitcherOnChangedClientResponse.MergeFrom(other.CurtainSwitcherOnChangedClientResponse);
    }
    if (other.airConditionerOnChangedClientResponse_ != null) {
      if (airConditionerOnChangedClientResponse_ == null) {
        AirConditionerOnChangedClientResponse = new global::AirConditionerOnChangedClientResponse();
      }
      AirConditionerOnChangedClientResponse.MergeFrom(other.AirConditionerOnChangedClientResponse);
    }
    if (other.progressUpdateFirmwareOnChangedDeviceClientResponse_ != null) {
      if (progressUpdateFirmwareOnChangedDeviceClientResponse_ == null) {
        ProgressUpdateFirmwareOnChangedDeviceClientResponse = new global::ProgressUpdateFirmwareOnChangedDeviceClientResponse();
      }
      ProgressUpdateFirmwareOnChangedDeviceClientResponse.MergeFrom(other.ProgressUpdateFirmwareOnChangedDeviceClientResponse);
    }
    if (other.deviceOnChangedDeviceClientResponse_ != null) {
      if (deviceOnChangedDeviceClientResponse_ == null) {
        DeviceOnChangedDeviceClientResponse = new global::DeviceOnChangedDeviceClientResponse();
      }
      DeviceOnChangedDeviceClientResponse.MergeFrom(other.DeviceOnChangedDeviceClientResponse);
    }
    if (other.motionOnChangedClientResponse_ != null) {
      if (motionOnChangedClientResponse_ == null) {
        MotionOnChangedClientResponse = new global::MotionOnChangedClientResponse();
      }
      MotionOnChangedClientResponse.MergeFrom(other.MotionOnChangedClientResponse);
    }
    if (other.homekitOnChangedClientResponse_ != null) {
      if (homekitOnChangedClientResponse_ == null) {
        HomekitOnChangedClientResponse = new global::HomekitOnChangedClientResponse();
      }
      HomekitOnChangedClientResponse.MergeFrom(other.HomekitOnChangedClientResponse);
    }
    if (other.buttonOnChangedClientResponse_ != null) {
      if (buttonOnChangedClientResponse_ == null) {
        ButtonOnChangedClientResponse = new global::ButtonOnChangedClientResponse();
      }
      ButtonOnChangedClientResponse.MergeFrom(other.ButtonOnChangedClientResponse);
    }
    if (other.debugLoggingResponse_ != null) {
      if (debugLoggingResponse_ == null) {
        DebugLoggingResponse = new global::DebugLoggingResponse();
      }
      DebugLoggingResponse.MergeFrom(other.DebugLoggingResponse);
    }
    if (other.ledDriverOnChangedClientResponse_ != null) {
      if (ledDriverOnChangedClientResponse_ == null) {
        LedDriverOnChangedClientResponse = new global::LedDriverOnChangedClientResponse();
      }
      LedDriverOnChangedClientResponse.MergeFrom(other.LedDriverOnChangedClientResponse);
    }
    if (other.environmentOnchangedClientResponse_ != null) {
      if (environmentOnchangedClientResponse_ == null) {
        EnvironmentOnchangedClientResponse = new global::EnvironmentOnchangedClientResponse();
      }
      EnvironmentOnchangedClientResponse.MergeFrom(other.EnvironmentOnchangedClientResponse);
    }
    if (other.smartPlugOnchangedClientResponse_ != null) {
      if (smartPlugOnchangedClientResponse_ == null) {
        SmartPlugOnchangedClientResponse = new global::SmartPlugOnchangedClientResponse();
      }
      SmartPlugOnchangedClientResponse.MergeFrom(other.SmartPlugOnchangedClientResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (meterOnChangedClientResponse_ == null) {
            MeterOnChangedClientResponse = new global::MeterOnChangedClientResponse();
          }
          input.ReadMessage(MeterOnChangedClientResponse);
          break;
        }
        case 18: {
          if (switcherOnChangedClientResponse_ == null) {
            SwitcherOnChangedClientResponse = new global::SwitcherOnChangedClientResponse();
          }
          input.ReadMessage(SwitcherOnChangedClientResponse);
          break;
        }
        case 26: {
          if (curtainSwitcherOnChangedClientResponse_ == null) {
            CurtainSwitcherOnChangedClientResponse = new global::CurtainSwitcherOnChangedClientResponse();
          }
          input.ReadMessage(CurtainSwitcherOnChangedClientResponse);
          break;
        }
        case 34: {
          if (airConditionerOnChangedClientResponse_ == null) {
            AirConditionerOnChangedClientResponse = new global::AirConditionerOnChangedClientResponse();
          }
          input.ReadMessage(AirConditionerOnChangedClientResponse);
          break;
        }
        case 42: {
          if (progressUpdateFirmwareOnChangedDeviceClientResponse_ == null) {
            ProgressUpdateFirmwareOnChangedDeviceClientResponse = new global::ProgressUpdateFirmwareOnChangedDeviceClientResponse();
          }
          input.ReadMessage(ProgressUpdateFirmwareOnChangedDeviceClientResponse);
          break;
        }
        case 50: {
          if (deviceOnChangedDeviceClientResponse_ == null) {
            DeviceOnChangedDeviceClientResponse = new global::DeviceOnChangedDeviceClientResponse();
          }
          input.ReadMessage(DeviceOnChangedDeviceClientResponse);
          break;
        }
        case 58: {
          if (motionOnChangedClientResponse_ == null) {
            MotionOnChangedClientResponse = new global::MotionOnChangedClientResponse();
          }
          input.ReadMessage(MotionOnChangedClientResponse);
          break;
        }
        case 66: {
          if (homekitOnChangedClientResponse_ == null) {
            HomekitOnChangedClientResponse = new global::HomekitOnChangedClientResponse();
          }
          input.ReadMessage(HomekitOnChangedClientResponse);
          break;
        }
        case 74: {
          if (buttonOnChangedClientResponse_ == null) {
            ButtonOnChangedClientResponse = new global::ButtonOnChangedClientResponse();
          }
          input.ReadMessage(ButtonOnChangedClientResponse);
          break;
        }
        case 82: {
          if (debugLoggingResponse_ == null) {
            DebugLoggingResponse = new global::DebugLoggingResponse();
          }
          input.ReadMessage(DebugLoggingResponse);
          break;
        }
        case 90: {
          if (ledDriverOnChangedClientResponse_ == null) {
            LedDriverOnChangedClientResponse = new global::LedDriverOnChangedClientResponse();
          }
          input.ReadMessage(LedDriverOnChangedClientResponse);
          break;
        }
        case 98: {
          if (environmentOnchangedClientResponse_ == null) {
            EnvironmentOnchangedClientResponse = new global::EnvironmentOnchangedClientResponse();
          }
          input.ReadMessage(EnvironmentOnchangedClientResponse);
          break;
        }
        case 106: {
          if (smartPlugOnchangedClientResponse_ == null) {
            SmartPlugOnchangedClientResponse = new global::SmartPlugOnchangedClientResponse();
          }
          input.ReadMessage(SmartPlugOnchangedClientResponse);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Điều hòa 
/// </summary>
public sealed partial class AirConditionerClientMessage : pb::IMessage<AirConditionerClientMessage> {
  private static readonly pb::MessageParser<AirConditionerClientMessage> _parser = new pb::MessageParser<AirConditionerClientMessage>(() => new AirConditionerClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<AirConditionerClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[85]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientMessage(AirConditionerClientMessage other) : this() {
    airConditionerClientRequest_ = other.airConditionerClientRequest_ != null ? other.airConditionerClientRequest_.Clone() : null;
    airConditionerClientResponse_ = other.airConditionerClientResponse_ != null ? other.airConditionerClientResponse_.Clone() : null;
    getAirConditionerClientRequest_ = other.getAirConditionerClientRequest_ != null ? other.getAirConditionerClientRequest_.Clone() : null;
    getAirConditionerClientResponse_ = other.getAirConditionerClientResponse_ != null ? other.getAirConditionerClientResponse_.Clone() : null;
    airConditionerAddIndoorsRequest_ = other.airConditionerAddIndoorsRequest_ != null ? other.airConditionerAddIndoorsRequest_.Clone() : null;
    airConditionerAddIndoorsResponse_ = other.airConditionerAddIndoorsResponse_ != null ? other.airConditionerAddIndoorsResponse_.Clone() : null;
    airConditionerRemoveIndoorRequest_ = other.airConditionerRemoveIndoorRequest_ != null ? other.airConditionerRemoveIndoorRequest_.Clone() : null;
    airConditionerRemoveIndoorResponse_ = other.airConditionerRemoveIndoorResponse_ != null ? other.airConditionerRemoveIndoorResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public AirConditionerClientMessage Clone() {
    return new AirConditionerClientMessage(this);
  }

  /// <summary>Field number for the "airConditionerClientRequest" field.</summary>
  public const int AirConditionerClientRequestFieldNumber = 1;
  private global::AirConditionerClientRequest airConditionerClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerClientRequest AirConditionerClientRequest {
    get { return airConditionerClientRequest_; }
    set {
      airConditionerClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "airConditionerClientResponse" field.</summary>
  public const int AirConditionerClientResponseFieldNumber = 2;
  private global::AirConditionerClientResponse airConditionerClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerClientResponse AirConditionerClientResponse {
    get { return airConditionerClientResponse_; }
    set {
      airConditionerClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "getAirConditionerClientRequest" field.</summary>
  public const int GetAirConditionerClientRequestFieldNumber = 3;
  private global::GetAirConditionerClientRequest getAirConditionerClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetAirConditionerClientRequest GetAirConditionerClientRequest {
    get { return getAirConditionerClientRequest_; }
    set {
      getAirConditionerClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "getAirConditionerClientResponse" field.</summary>
  public const int GetAirConditionerClientResponseFieldNumber = 4;
  private global::GetAirConditionerClientResponse getAirConditionerClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::GetAirConditionerClientResponse GetAirConditionerClientResponse {
    get { return getAirConditionerClientResponse_; }
    set {
      getAirConditionerClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "airConditionerAddIndoorsRequest" field.</summary>
  public const int AirConditionerAddIndoorsRequestFieldNumber = 5;
  private global::AirConditionerAddIndoorsRequest airConditionerAddIndoorsRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerAddIndoorsRequest AirConditionerAddIndoorsRequest {
    get { return airConditionerAddIndoorsRequest_; }
    set {
      airConditionerAddIndoorsRequest_ = value;
    }
  }

  /// <summary>Field number for the "airConditionerAddIndoorsResponse" field.</summary>
  public const int AirConditionerAddIndoorsResponseFieldNumber = 6;
  private global::AirConditionerAddIndoorsResponse airConditionerAddIndoorsResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerAddIndoorsResponse AirConditionerAddIndoorsResponse {
    get { return airConditionerAddIndoorsResponse_; }
    set {
      airConditionerAddIndoorsResponse_ = value;
    }
  }

  /// <summary>Field number for the "airConditionerRemoveIndoorRequest" field.</summary>
  public const int AirConditionerRemoveIndoorRequestFieldNumber = 7;
  private global::AirConditionerRemoveIndoorRequest airConditionerRemoveIndoorRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerRemoveIndoorRequest AirConditionerRemoveIndoorRequest {
    get { return airConditionerRemoveIndoorRequest_; }
    set {
      airConditionerRemoveIndoorRequest_ = value;
    }
  }

  /// <summary>Field number for the "airConditionerRemoveIndoorResponse" field.</summary>
  public const int AirConditionerRemoveIndoorResponseFieldNumber = 8;
  private global::AirConditionerRemoveIndoorResponse airConditionerRemoveIndoorResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerRemoveIndoorResponse AirConditionerRemoveIndoorResponse {
    get { return airConditionerRemoveIndoorResponse_; }
    set {
      airConditionerRemoveIndoorResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as AirConditionerClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(AirConditionerClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(AirConditionerClientRequest, other.AirConditionerClientRequest)) return false;
    if (!object.Equals(AirConditionerClientResponse, other.AirConditionerClientResponse)) return false;
    if (!object.Equals(GetAirConditionerClientRequest, other.GetAirConditionerClientRequest)) return false;
    if (!object.Equals(GetAirConditionerClientResponse, other.GetAirConditionerClientResponse)) return false;
    if (!object.Equals(AirConditionerAddIndoorsRequest, other.AirConditionerAddIndoorsRequest)) return false;
    if (!object.Equals(AirConditionerAddIndoorsResponse, other.AirConditionerAddIndoorsResponse)) return false;
    if (!object.Equals(AirConditionerRemoveIndoorRequest, other.AirConditionerRemoveIndoorRequest)) return false;
    if (!object.Equals(AirConditionerRemoveIndoorResponse, other.AirConditionerRemoveIndoorResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (airConditionerClientRequest_ != null) hash ^= AirConditionerClientRequest.GetHashCode();
    if (airConditionerClientResponse_ != null) hash ^= AirConditionerClientResponse.GetHashCode();
    if (getAirConditionerClientRequest_ != null) hash ^= GetAirConditionerClientRequest.GetHashCode();
    if (getAirConditionerClientResponse_ != null) hash ^= GetAirConditionerClientResponse.GetHashCode();
    if (airConditionerAddIndoorsRequest_ != null) hash ^= AirConditionerAddIndoorsRequest.GetHashCode();
    if (airConditionerAddIndoorsResponse_ != null) hash ^= AirConditionerAddIndoorsResponse.GetHashCode();
    if (airConditionerRemoveIndoorRequest_ != null) hash ^= AirConditionerRemoveIndoorRequest.GetHashCode();
    if (airConditionerRemoveIndoorResponse_ != null) hash ^= AirConditionerRemoveIndoorResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (airConditionerClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(AirConditionerClientRequest);
    }
    if (airConditionerClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(AirConditionerClientResponse);
    }
    if (getAirConditionerClientRequest_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(GetAirConditionerClientRequest);
    }
    if (getAirConditionerClientResponse_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(GetAirConditionerClientResponse);
    }
    if (airConditionerAddIndoorsRequest_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(AirConditionerAddIndoorsRequest);
    }
    if (airConditionerAddIndoorsResponse_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(AirConditionerAddIndoorsResponse);
    }
    if (airConditionerRemoveIndoorRequest_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(AirConditionerRemoveIndoorRequest);
    }
    if (airConditionerRemoveIndoorResponse_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(AirConditionerRemoveIndoorResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (airConditionerClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerClientRequest);
    }
    if (airConditionerClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerClientResponse);
    }
    if (getAirConditionerClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAirConditionerClientRequest);
    }
    if (getAirConditionerClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(GetAirConditionerClientResponse);
    }
    if (airConditionerAddIndoorsRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerAddIndoorsRequest);
    }
    if (airConditionerAddIndoorsResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerAddIndoorsResponse);
    }
    if (airConditionerRemoveIndoorRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerRemoveIndoorRequest);
    }
    if (airConditionerRemoveIndoorResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerRemoveIndoorResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(AirConditionerClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.airConditionerClientRequest_ != null) {
      if (airConditionerClientRequest_ == null) {
        AirConditionerClientRequest = new global::AirConditionerClientRequest();
      }
      AirConditionerClientRequest.MergeFrom(other.AirConditionerClientRequest);
    }
    if (other.airConditionerClientResponse_ != null) {
      if (airConditionerClientResponse_ == null) {
        AirConditionerClientResponse = new global::AirConditionerClientResponse();
      }
      AirConditionerClientResponse.MergeFrom(other.AirConditionerClientResponse);
    }
    if (other.getAirConditionerClientRequest_ != null) {
      if (getAirConditionerClientRequest_ == null) {
        GetAirConditionerClientRequest = new global::GetAirConditionerClientRequest();
      }
      GetAirConditionerClientRequest.MergeFrom(other.GetAirConditionerClientRequest);
    }
    if (other.getAirConditionerClientResponse_ != null) {
      if (getAirConditionerClientResponse_ == null) {
        GetAirConditionerClientResponse = new global::GetAirConditionerClientResponse();
      }
      GetAirConditionerClientResponse.MergeFrom(other.GetAirConditionerClientResponse);
    }
    if (other.airConditionerAddIndoorsRequest_ != null) {
      if (airConditionerAddIndoorsRequest_ == null) {
        AirConditionerAddIndoorsRequest = new global::AirConditionerAddIndoorsRequest();
      }
      AirConditionerAddIndoorsRequest.MergeFrom(other.AirConditionerAddIndoorsRequest);
    }
    if (other.airConditionerAddIndoorsResponse_ != null) {
      if (airConditionerAddIndoorsResponse_ == null) {
        AirConditionerAddIndoorsResponse = new global::AirConditionerAddIndoorsResponse();
      }
      AirConditionerAddIndoorsResponse.MergeFrom(other.AirConditionerAddIndoorsResponse);
    }
    if (other.airConditionerRemoveIndoorRequest_ != null) {
      if (airConditionerRemoveIndoorRequest_ == null) {
        AirConditionerRemoveIndoorRequest = new global::AirConditionerRemoveIndoorRequest();
      }
      AirConditionerRemoveIndoorRequest.MergeFrom(other.AirConditionerRemoveIndoorRequest);
    }
    if (other.airConditionerRemoveIndoorResponse_ != null) {
      if (airConditionerRemoveIndoorResponse_ == null) {
        AirConditionerRemoveIndoorResponse = new global::AirConditionerRemoveIndoorResponse();
      }
      AirConditionerRemoveIndoorResponse.MergeFrom(other.AirConditionerRemoveIndoorResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (airConditionerClientRequest_ == null) {
            AirConditionerClientRequest = new global::AirConditionerClientRequest();
          }
          input.ReadMessage(AirConditionerClientRequest);
          break;
        }
        case 18: {
          if (airConditionerClientResponse_ == null) {
            AirConditionerClientResponse = new global::AirConditionerClientResponse();
          }
          input.ReadMessage(AirConditionerClientResponse);
          break;
        }
        case 26: {
          if (getAirConditionerClientRequest_ == null) {
            GetAirConditionerClientRequest = new global::GetAirConditionerClientRequest();
          }
          input.ReadMessage(GetAirConditionerClientRequest);
          break;
        }
        case 34: {
          if (getAirConditionerClientResponse_ == null) {
            GetAirConditionerClientResponse = new global::GetAirConditionerClientResponse();
          }
          input.ReadMessage(GetAirConditionerClientResponse);
          break;
        }
        case 42: {
          if (airConditionerAddIndoorsRequest_ == null) {
            AirConditionerAddIndoorsRequest = new global::AirConditionerAddIndoorsRequest();
          }
          input.ReadMessage(AirConditionerAddIndoorsRequest);
          break;
        }
        case 50: {
          if (airConditionerAddIndoorsResponse_ == null) {
            AirConditionerAddIndoorsResponse = new global::AirConditionerAddIndoorsResponse();
          }
          input.ReadMessage(AirConditionerAddIndoorsResponse);
          break;
        }
        case 58: {
          if (airConditionerRemoveIndoorRequest_ == null) {
            AirConditionerRemoveIndoorRequest = new global::AirConditionerRemoveIndoorRequest();
          }
          input.ReadMessage(AirConditionerRemoveIndoorRequest);
          break;
        }
        case 66: {
          if (airConditionerRemoveIndoorResponse_ == null) {
            AirConditionerRemoveIndoorResponse = new global::AirConditionerRemoveIndoorResponse();
          }
          input.ReadMessage(AirConditionerRemoveIndoorResponse);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Thiết bị Remote 
/// </summary>
public sealed partial class RemoteClientMessage : pb::IMessage<RemoteClientMessage> {
  private static readonly pb::MessageParser<RemoteClientMessage> _parser = new pb::MessageParser<RemoteClientMessage>(() => new RemoteClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<RemoteClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[86]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteClientMessage(RemoteClientMessage other) : this() {
    sendCommandRemoteClientRequest_ = other.sendCommandRemoteClientRequest_ != null ? other.sendCommandRemoteClientRequest_.Clone() : null;
    sendCommandRemoteClientResponse_ = other.sendCommandRemoteClientResponse_ != null ? other.sendCommandRemoteClientResponse_.Clone() : null;
    learnCommandRemoteClientRequest_ = other.learnCommandRemoteClientRequest_ != null ? other.learnCommandRemoteClientRequest_.Clone() : null;
    learnCommandRemoteClientResponse_ = other.learnCommandRemoteClientResponse_ != null ? other.learnCommandRemoteClientResponse_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public RemoteClientMessage Clone() {
    return new RemoteClientMessage(this);
  }

  /// <summary>Field number for the "sendCommandRemoteClientRequest" field.</summary>
  public const int SendCommandRemoteClientRequestFieldNumber = 1;
  private global::SendCommandRemoteClientRequest sendCommandRemoteClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SendCommandRemoteClientRequest SendCommandRemoteClientRequest {
    get { return sendCommandRemoteClientRequest_; }
    set {
      sendCommandRemoteClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "sendCommandRemoteClientResponse" field.</summary>
  public const int SendCommandRemoteClientResponseFieldNumber = 2;
  private global::SendCommandRemoteClientResponse sendCommandRemoteClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SendCommandRemoteClientResponse SendCommandRemoteClientResponse {
    get { return sendCommandRemoteClientResponse_; }
    set {
      sendCommandRemoteClientResponse_ = value;
    }
  }

  /// <summary>Field number for the "learnCommandRemoteClientRequest" field.</summary>
  public const int LearnCommandRemoteClientRequestFieldNumber = 3;
  private global::LearnCommandRemoteClientRequest learnCommandRemoteClientRequest_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LearnCommandRemoteClientRequest LearnCommandRemoteClientRequest {
    get { return learnCommandRemoteClientRequest_; }
    set {
      learnCommandRemoteClientRequest_ = value;
    }
  }

  /// <summary>Field number for the "learnCommandRemoteClientResponse" field.</summary>
  public const int LearnCommandRemoteClientResponseFieldNumber = 4;
  private global::LearnCommandRemoteClientResponse learnCommandRemoteClientResponse_;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LearnCommandRemoteClientResponse LearnCommandRemoteClientResponse {
    get { return learnCommandRemoteClientResponse_; }
    set {
      learnCommandRemoteClientResponse_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as RemoteClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(RemoteClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(SendCommandRemoteClientRequest, other.SendCommandRemoteClientRequest)) return false;
    if (!object.Equals(SendCommandRemoteClientResponse, other.SendCommandRemoteClientResponse)) return false;
    if (!object.Equals(LearnCommandRemoteClientRequest, other.LearnCommandRemoteClientRequest)) return false;
    if (!object.Equals(LearnCommandRemoteClientResponse, other.LearnCommandRemoteClientResponse)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (sendCommandRemoteClientRequest_ != null) hash ^= SendCommandRemoteClientRequest.GetHashCode();
    if (sendCommandRemoteClientResponse_ != null) hash ^= SendCommandRemoteClientResponse.GetHashCode();
    if (learnCommandRemoteClientRequest_ != null) hash ^= LearnCommandRemoteClientRequest.GetHashCode();
    if (learnCommandRemoteClientResponse_ != null) hash ^= LearnCommandRemoteClientResponse.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (sendCommandRemoteClientRequest_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(SendCommandRemoteClientRequest);
    }
    if (sendCommandRemoteClientResponse_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SendCommandRemoteClientResponse);
    }
    if (learnCommandRemoteClientRequest_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(LearnCommandRemoteClientRequest);
    }
    if (learnCommandRemoteClientResponse_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(LearnCommandRemoteClientResponse);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (sendCommandRemoteClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendCommandRemoteClientRequest);
    }
    if (sendCommandRemoteClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SendCommandRemoteClientResponse);
    }
    if (learnCommandRemoteClientRequest_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LearnCommandRemoteClientRequest);
    }
    if (learnCommandRemoteClientResponse_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LearnCommandRemoteClientResponse);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(RemoteClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.sendCommandRemoteClientRequest_ != null) {
      if (sendCommandRemoteClientRequest_ == null) {
        SendCommandRemoteClientRequest = new global::SendCommandRemoteClientRequest();
      }
      SendCommandRemoteClientRequest.MergeFrom(other.SendCommandRemoteClientRequest);
    }
    if (other.sendCommandRemoteClientResponse_ != null) {
      if (sendCommandRemoteClientResponse_ == null) {
        SendCommandRemoteClientResponse = new global::SendCommandRemoteClientResponse();
      }
      SendCommandRemoteClientResponse.MergeFrom(other.SendCommandRemoteClientResponse);
    }
    if (other.learnCommandRemoteClientRequest_ != null) {
      if (learnCommandRemoteClientRequest_ == null) {
        LearnCommandRemoteClientRequest = new global::LearnCommandRemoteClientRequest();
      }
      LearnCommandRemoteClientRequest.MergeFrom(other.LearnCommandRemoteClientRequest);
    }
    if (other.learnCommandRemoteClientResponse_ != null) {
      if (learnCommandRemoteClientResponse_ == null) {
        LearnCommandRemoteClientResponse = new global::LearnCommandRemoteClientResponse();
      }
      LearnCommandRemoteClientResponse.MergeFrom(other.LearnCommandRemoteClientResponse);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (sendCommandRemoteClientRequest_ == null) {
            SendCommandRemoteClientRequest = new global::SendCommandRemoteClientRequest();
          }
          input.ReadMessage(SendCommandRemoteClientRequest);
          break;
        }
        case 18: {
          if (sendCommandRemoteClientResponse_ == null) {
            SendCommandRemoteClientResponse = new global::SendCommandRemoteClientResponse();
          }
          input.ReadMessage(SendCommandRemoteClientResponse);
          break;
        }
        case 26: {
          if (learnCommandRemoteClientRequest_ == null) {
            LearnCommandRemoteClientRequest = new global::LearnCommandRemoteClientRequest();
          }
          input.ReadMessage(LearnCommandRemoteClientRequest);
          break;
        }
        case 34: {
          if (learnCommandRemoteClientResponse_ == null) {
            LearnCommandRemoteClientResponse = new global::LearnCommandRemoteClientResponse();
          }
          input.ReadMessage(LearnCommandRemoteClientResponse);
          break;
        }
      }
    }
  }

}

/// <summary>
/// Client Message 
/// </summary>
public sealed partial class ClientMessage : pb::IMessage<ClientMessage> {
  private static readonly pb::MessageParser<ClientMessage> _parser = new pb::MessageParser<ClientMessage>(() => new ClientMessage());
  private pb::UnknownFieldSet _unknownFields;
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ClientMessage> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::ClientMessageReflection.Descriptor.MessageTypes[87]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientMessage() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientMessage(ClientMessage other) : this() {
    deviceClientMessage_ = other.deviceClientMessage_ != null ? other.deviceClientMessage_.Clone() : null;
    switcherClientMessage_ = other.switcherClientMessage_ != null ? other.switcherClientMessage_.Clone() : null;
    curtainSwitcherClientMessage_ = other.curtainSwitcherClientMessage_ != null ? other.curtainSwitcherClientMessage_.Clone() : null;
    airConditionerClientMessage_ = other.airConditionerClientMessage_ != null ? other.airConditionerClientMessage_.Clone() : null;
    remoteClientMessage_ = other.remoteClientMessage_ != null ? other.remoteClientMessage_.Clone() : null;
    onChangedClientMessage_ = other.onChangedClientMessage_ != null ? other.onChangedClientMessage_.Clone() : null;
    motionClientMessage_ = other.motionClientMessage_ != null ? other.motionClientMessage_.Clone() : null;
    sceneClientMessage_ = other.sceneClientMessage_ != null ? other.sceneClientMessage_.Clone() : null;
    ledDriverClientMessage_ = other.ledDriverClientMessage_ != null ? other.ledDriverClientMessage_.Clone() : null;
    meterClientMessage_ = other.meterClientMessage_ != null ? other.meterClientMessage_.Clone() : null;
    homekitClientMessage_ = other.homekitClientMessage_ != null ? other.homekitClientMessage_.Clone() : null;
    _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ClientMessage Clone() {
    return new ClientMessage(this);
  }

  /// <summary>Field number for the "deviceClientMessage" field.</summary>
  public const int DeviceClientMessageFieldNumber = 1;
  private global::DeviceClientMessage deviceClientMessage_;
  /// <summary>
  /// Thiết bị kết nối wifi Devices 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::DeviceClientMessage DeviceClientMessage {
    get { return deviceClientMessage_; }
    set {
      deviceClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "switcherClientMessage" field.</summary>
  public const int SwitcherClientMessageFieldNumber = 2;
  private global::SwitcherClientMessage switcherClientMessage_;
  /// <summary>
  /// Thiết bị Công tắc 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SwitcherClientMessage SwitcherClientMessage {
    get { return switcherClientMessage_; }
    set {
      switcherClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "curtainSwitcherClientMessage" field.</summary>
  public const int CurtainSwitcherClientMessageFieldNumber = 3;
  private global::CurtainSwitcherClientMessage curtainSwitcherClientMessage_;
  /// <summary>
  /// Thiết bị rèm cửa 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::CurtainSwitcherClientMessage CurtainSwitcherClientMessage {
    get { return curtainSwitcherClientMessage_; }
    set {
      curtainSwitcherClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "airConditionerClientMessage" field.</summary>
  public const int AirConditionerClientMessageFieldNumber = 4;
  private global::AirConditionerClientMessage airConditionerClientMessage_;
  /// <summary>
  /// Điều hòa 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::AirConditionerClientMessage AirConditionerClientMessage {
    get { return airConditionerClientMessage_; }
    set {
      airConditionerClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "remoteClientMessage" field.</summary>
  public const int RemoteClientMessageFieldNumber = 5;
  private global::RemoteClientMessage remoteClientMessage_;
  /// <summary>
  /// Thiết bị Remote 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::RemoteClientMessage RemoteClientMessage {
    get { return remoteClientMessage_; }
    set {
      remoteClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "onChangedClientMessage" field.</summary>
  public const int OnChangedClientMessageFieldNumber = 6;
  private global::OnChangedClientMessage onChangedClientMessage_;
  /// <summary>
  /// Events runtime 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::OnChangedClientMessage OnChangedClientMessage {
    get { return onChangedClientMessage_; }
    set {
      onChangedClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "motionClientMessage" field.</summary>
  public const int MotionClientMessageFieldNumber = 7;
  private global::MotionClientMessage motionClientMessage_;
  /// <summary>
  /// Thiết bị Motion 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MotionClientMessage MotionClientMessage {
    get { return motionClientMessage_; }
    set {
      motionClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "sceneClientMessage" field.</summary>
  public const int SceneClientMessageFieldNumber = 8;
  private global::SceneClientMessage sceneClientMessage_;
  /// <summary>
  /// Kịch bản 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::SceneClientMessage SceneClientMessage {
    get { return sceneClientMessage_; }
    set {
      sceneClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "ledDriverClientMessage" field.</summary>
  public const int LedDriverClientMessageFieldNumber = 9;
  private global::LedDriverClientMessage ledDriverClientMessage_;
  /// <summary>
  /// Led driver 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::LedDriverClientMessage LedDriverClientMessage {
    get { return ledDriverClientMessage_; }
    set {
      ledDriverClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "meterClientMessage" field.</summary>
  public const int MeterClientMessageFieldNumber = 10;
  private global::MeterClientMessage meterClientMessage_;
  /// <summary>
  /// Thiết bị đọc đồng hồ điện nước 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::MeterClientMessage MeterClientMessage {
    get { return meterClientMessage_; }
    set {
      meterClientMessage_ = value;
    }
  }

  /// <summary>Field number for the "homekitClientMessage" field.</summary>
  public const int HomekitClientMessageFieldNumber = 11;
  private global::HomekitClientMessage homekitClientMessage_;
  /// <summary>
  /// Thiết bị homekit gateway 
  /// </summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public global::HomekitClientMessage HomekitClientMessage {
    get { return homekitClientMessage_; }
    set {
      homekitClientMessage_ = value;
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ClientMessage);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ClientMessage other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if (!object.Equals(DeviceClientMessage, other.DeviceClientMessage)) return false;
    if (!object.Equals(SwitcherClientMessage, other.SwitcherClientMessage)) return false;
    if (!object.Equals(CurtainSwitcherClientMessage, other.CurtainSwitcherClientMessage)) return false;
    if (!object.Equals(AirConditionerClientMessage, other.AirConditionerClientMessage)) return false;
    if (!object.Equals(RemoteClientMessage, other.RemoteClientMessage)) return false;
    if (!object.Equals(OnChangedClientMessage, other.OnChangedClientMessage)) return false;
    if (!object.Equals(MotionClientMessage, other.MotionClientMessage)) return false;
    if (!object.Equals(SceneClientMessage, other.SceneClientMessage)) return false;
    if (!object.Equals(LedDriverClientMessage, other.LedDriverClientMessage)) return false;
    if (!object.Equals(MeterClientMessage, other.MeterClientMessage)) return false;
    if (!object.Equals(HomekitClientMessage, other.HomekitClientMessage)) return false;
    return Equals(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    if (deviceClientMessage_ != null) hash ^= DeviceClientMessage.GetHashCode();
    if (switcherClientMessage_ != null) hash ^= SwitcherClientMessage.GetHashCode();
    if (curtainSwitcherClientMessage_ != null) hash ^= CurtainSwitcherClientMessage.GetHashCode();
    if (airConditionerClientMessage_ != null) hash ^= AirConditionerClientMessage.GetHashCode();
    if (remoteClientMessage_ != null) hash ^= RemoteClientMessage.GetHashCode();
    if (onChangedClientMessage_ != null) hash ^= OnChangedClientMessage.GetHashCode();
    if (motionClientMessage_ != null) hash ^= MotionClientMessage.GetHashCode();
    if (sceneClientMessage_ != null) hash ^= SceneClientMessage.GetHashCode();
    if (ledDriverClientMessage_ != null) hash ^= LedDriverClientMessage.GetHashCode();
    if (meterClientMessage_ != null) hash ^= MeterClientMessage.GetHashCode();
    if (homekitClientMessage_ != null) hash ^= HomekitClientMessage.GetHashCode();
    if (_unknownFields != null) {
      hash ^= _unknownFields.GetHashCode();
    }
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    if (deviceClientMessage_ != null) {
      output.WriteRawTag(10);
      output.WriteMessage(DeviceClientMessage);
    }
    if (switcherClientMessage_ != null) {
      output.WriteRawTag(18);
      output.WriteMessage(SwitcherClientMessage);
    }
    if (curtainSwitcherClientMessage_ != null) {
      output.WriteRawTag(26);
      output.WriteMessage(CurtainSwitcherClientMessage);
    }
    if (airConditionerClientMessage_ != null) {
      output.WriteRawTag(34);
      output.WriteMessage(AirConditionerClientMessage);
    }
    if (remoteClientMessage_ != null) {
      output.WriteRawTag(42);
      output.WriteMessage(RemoteClientMessage);
    }
    if (onChangedClientMessage_ != null) {
      output.WriteRawTag(50);
      output.WriteMessage(OnChangedClientMessage);
    }
    if (motionClientMessage_ != null) {
      output.WriteRawTag(58);
      output.WriteMessage(MotionClientMessage);
    }
    if (sceneClientMessage_ != null) {
      output.WriteRawTag(66);
      output.WriteMessage(SceneClientMessage);
    }
    if (ledDriverClientMessage_ != null) {
      output.WriteRawTag(74);
      output.WriteMessage(LedDriverClientMessage);
    }
    if (meterClientMessage_ != null) {
      output.WriteRawTag(82);
      output.WriteMessage(MeterClientMessage);
    }
    if (homekitClientMessage_ != null) {
      output.WriteRawTag(90);
      output.WriteMessage(HomekitClientMessage);
    }
    if (_unknownFields != null) {
      _unknownFields.WriteTo(output);
    }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    if (deviceClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeviceClientMessage);
    }
    if (switcherClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SwitcherClientMessage);
    }
    if (curtainSwitcherClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(CurtainSwitcherClientMessage);
    }
    if (airConditionerClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(AirConditionerClientMessage);
    }
    if (remoteClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(RemoteClientMessage);
    }
    if (onChangedClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(OnChangedClientMessage);
    }
    if (motionClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MotionClientMessage);
    }
    if (sceneClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(SceneClientMessage);
    }
    if (ledDriverClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(LedDriverClientMessage);
    }
    if (meterClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(MeterClientMessage);
    }
    if (homekitClientMessage_ != null) {
      size += 1 + pb::CodedOutputStream.ComputeMessageSize(HomekitClientMessage);
    }
    if (_unknownFields != null) {
      size += _unknownFields.CalculateSize();
    }
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ClientMessage other) {
    if (other == null) {
      return;
    }
    if (other.deviceClientMessage_ != null) {
      if (deviceClientMessage_ == null) {
        DeviceClientMessage = new global::DeviceClientMessage();
      }
      DeviceClientMessage.MergeFrom(other.DeviceClientMessage);
    }
    if (other.switcherClientMessage_ != null) {
      if (switcherClientMessage_ == null) {
        SwitcherClientMessage = new global::SwitcherClientMessage();
      }
      SwitcherClientMessage.MergeFrom(other.SwitcherClientMessage);
    }
    if (other.curtainSwitcherClientMessage_ != null) {
      if (curtainSwitcherClientMessage_ == null) {
        CurtainSwitcherClientMessage = new global::CurtainSwitcherClientMessage();
      }
      CurtainSwitcherClientMessage.MergeFrom(other.CurtainSwitcherClientMessage);
    }
    if (other.airConditionerClientMessage_ != null) {
      if (airConditionerClientMessage_ == null) {
        AirConditionerClientMessage = new global::AirConditionerClientMessage();
      }
      AirConditionerClientMessage.MergeFrom(other.AirConditionerClientMessage);
    }
    if (other.remoteClientMessage_ != null) {
      if (remoteClientMessage_ == null) {
        RemoteClientMessage = new global::RemoteClientMessage();
      }
      RemoteClientMessage.MergeFrom(other.RemoteClientMessage);
    }
    if (other.onChangedClientMessage_ != null) {
      if (onChangedClientMessage_ == null) {
        OnChangedClientMessage = new global::OnChangedClientMessage();
      }
      OnChangedClientMessage.MergeFrom(other.OnChangedClientMessage);
    }
    if (other.motionClientMessage_ != null) {
      if (motionClientMessage_ == null) {
        MotionClientMessage = new global::MotionClientMessage();
      }
      MotionClientMessage.MergeFrom(other.MotionClientMessage);
    }
    if (other.sceneClientMessage_ != null) {
      if (sceneClientMessage_ == null) {
        SceneClientMessage = new global::SceneClientMessage();
      }
      SceneClientMessage.MergeFrom(other.SceneClientMessage);
    }
    if (other.ledDriverClientMessage_ != null) {
      if (ledDriverClientMessage_ == null) {
        LedDriverClientMessage = new global::LedDriverClientMessage();
      }
      LedDriverClientMessage.MergeFrom(other.LedDriverClientMessage);
    }
    if (other.meterClientMessage_ != null) {
      if (meterClientMessage_ == null) {
        MeterClientMessage = new global::MeterClientMessage();
      }
      MeterClientMessage.MergeFrom(other.MeterClientMessage);
    }
    if (other.homekitClientMessage_ != null) {
      if (homekitClientMessage_ == null) {
        HomekitClientMessage = new global::HomekitClientMessage();
      }
      HomekitClientMessage.MergeFrom(other.HomekitClientMessage);
    }
    _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
          break;
        case 10: {
          if (deviceClientMessage_ == null) {
            DeviceClientMessage = new global::DeviceClientMessage();
          }
          input.ReadMessage(DeviceClientMessage);
          break;
        }
        case 18: {
          if (switcherClientMessage_ == null) {
            SwitcherClientMessage = new global::SwitcherClientMessage();
          }
          input.ReadMessage(SwitcherClientMessage);
          break;
        }
        case 26: {
          if (curtainSwitcherClientMessage_ == null) {
            CurtainSwitcherClientMessage = new global::CurtainSwitcherClientMessage();
          }
          input.ReadMessage(CurtainSwitcherClientMessage);
          break;
        }
        case 34: {
          if (airConditionerClientMessage_ == null) {
            AirConditionerClientMessage = new global::AirConditionerClientMessage();
          }
          input.ReadMessage(AirConditionerClientMessage);
          break;
        }
        case 42: {
          if (remoteClientMessage_ == null) {
            RemoteClientMessage = new global::RemoteClientMessage();
          }
          input.ReadMessage(RemoteClientMessage);
          break;
        }
        case 50: {
          if (onChangedClientMessage_ == null) {
            OnChangedClientMessage = new global::OnChangedClientMessage();
          }
          input.ReadMessage(OnChangedClientMessage);
          break;
        }
        case 58: {
          if (motionClientMessage_ == null) {
            MotionClientMessage = new global::MotionClientMessage();
          }
          input.ReadMessage(MotionClientMessage);
          break;
        }
        case 66: {
          if (sceneClientMessage_ == null) {
            SceneClientMessage = new global::SceneClientMessage();
          }
          input.ReadMessage(SceneClientMessage);
          break;
        }
        case 74: {
          if (ledDriverClientMessage_ == null) {
            LedDriverClientMessage = new global::LedDriverClientMessage();
          }
          input.ReadMessage(LedDriverClientMessage);
          break;
        }
        case 82: {
          if (meterClientMessage_ == null) {
            MeterClientMessage = new global::MeterClientMessage();
          }
          input.ReadMessage(MeterClientMessage);
          break;
        }
        case 90: {
          if (homekitClientMessage_ == null) {
            HomekitClientMessage = new global::HomekitClientMessage();
          }
          input.ReadMessage(HomekitClientMessage);
          break;
        }
      }
    }
  }

}

#endregion


#endregion Designer generated code
